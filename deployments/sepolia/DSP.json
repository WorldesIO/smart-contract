{
  "address": "0x2BE005Af93E4B4BCCFad452b93aE86dBd8026ADc",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "increaseShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "name": "BuyShares",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum PMMPricing.RState",
          "name": "newRState",
          "type": "uint8"
        }
      ],
      "name": "RChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decreaseShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "name": "SellShares",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quoteAmount",
          "type": "uint256"
        }
      ],
      "name": "WorldesFlashLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "WorldesSwap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_BASE_PRICE_CUMULATIVE_LAST_",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_BASE_RESERVE_",
      "outputs": [
        {
          "internalType": "uint112",
          "name": "",
          "type": "uint112"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_BASE_TARGET_",
      "outputs": [
        {
          "internalType": "uint112",
          "name": "",
          "type": "uint112"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_BASE_TOKEN_",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_BLOCK_TIMESTAMP_LAST_",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_IS_OPEN_TWAP_",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_I_",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_K_",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_LP_FEE_RATE_",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_MAINTAINER_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_MT_FEE_RATE_MODEL_",
      "outputs": [
        {
          "internalType": "contract IFeeRateModel",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_QUOTE_RESERVE_",
      "outputs": [
        {
          "internalType": "uint112",
          "name": "",
          "type": "uint112"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_QUOTE_TARGET_",
      "outputs": [
        {
          "internalType": "uint112",
          "name": "",
          "type": "uint112"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_QUOTE_TOKEN_",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_RState_",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "addressToShortString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "buyShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseInput",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteInput",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "correctRState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "assetTo",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "flashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "input",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMidPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "midPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPMMState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "K",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "B",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "Q",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "B0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "Q0",
              "type": "uint256"
            },
            {
              "internalType": "enum PMMPricing.RState",
              "name": "R",
              "type": "uint8"
            }
          ],
          "internalType": "struct PMMPricing.PMMState",
          "name": "state",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPMMStateForCall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "K",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "B",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "Q",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "B0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "Q0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "R",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getQuoteInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "input",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lpFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mtFeeRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "baseReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteReserve",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maintainer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "quoteTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lpFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "mtFeeRateModel",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "k",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isOpenTWAP",
          "type": "bool"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "payBaseAmount",
          "type": "uint256"
        }
      ],
      "name": "querySellBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "receiveQuoteAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mtFee",
          "type": "uint256"
        },
        {
          "internalType": "enum PMMPricing.RState",
          "name": "newRState",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "newBaseTarget",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "payQuoteAmount",
          "type": "uint256"
        }
      ],
      "name": "querySellQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "receiveBaseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mtFee",
          "type": "uint256"
        },
        {
          "internalType": "enum PMMPricing.RState",
          "name": "newRState",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "newQuoteTarget",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "sellBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "receiveQuoteAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "sellQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "receiveBaseAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shareAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseMinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteMinAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "sellShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "baseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sync",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x321fe902666acdf87bc351c612b68f125d2aba9a16b0d85cd10588c9c5d4ee22",
  "receipt": {
    "to": null,
    "from": "0xd7B80c111500CB2f36077F9F69a4eC5bF16Ca947",
    "contractAddress": "0x2BE005Af93E4B4BCCFad452b93aE86dBd8026ADc",
    "transactionIndex": 105,
    "gasUsed": "4027736",
    "logsBloom": "0x
    "blockHash": "0xd063680d2c6375b9b3c9b40dba4f8ac60c77b61ae0c0086319a880ec9314162f",
    "transactionHash": "0x321fe902666acdf87bc351c612b68f125d2aba9a16b0d85cd10588c9c5d4ee22",
    "logs": [],
    "blockNumber": 5746712,
    "cumulativeGasUsed": "16096681",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2bc52c20de8a37fa339f3a7b69b4b897",
  "metadata": "{\"compiler\":{\"version\":\"0.6.9+commit.3e3065ac\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"increaseShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"BuyShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum PMMPricing.RState\",\"name\":\"newRState\",\"type\":\"uint8\"}],\"name\":\"RChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreaseShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"SellShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"}],\"name\":\"WorldesFlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"WorldesSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BASE_PRICE_CUMULATIVE_LAST_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BASE_RESERVE_\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BASE_TARGET_\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BASE_TOKEN_\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BLOCK_TIMESTAMP_LAST_\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_IS_OPEN_TWAP_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_I_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_K_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_LP_FEE_RATE_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MAINTAINER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MT_FEE_RATE_MODEL_\",\"outputs\":[{\"internalType\":\"contract IFeeRateModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_QUOTE_RESERVE_\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_QUOTE_TARGET_\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_QUOTE_TOKEN_\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_RState_\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addressToShortString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"buyShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteInput\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"correctRState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetTo\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMidPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"midPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPMMState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"K\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"B\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Q\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"B0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Q0\",\"type\":\"uint256\"},{\"internalType\":\"enum PMMPricing.RState\",\"name\":\"R\",\"type\":\"uint8\"}],\"internalType\":\"struct PMMPricing.PMMState\",\"name\":\"state\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPMMStateForCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"K\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"B\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Q\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"B0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Q0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"R\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuoteInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mtFeeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteReserve\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maintainer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mtFeeRateModel\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpenTWAP\",\"type\":\"bool\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payBaseAmount\",\"type\":\"uint256\"}],\"name\":\"querySellBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"receiveQuoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mtFee\",\"type\":\"uint256\"},{\"internalType\":\"enum PMMPricing.RState\",\"name\":\"newRState\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newBaseTarget\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payQuoteAmount\",\"type\":\"uint256\"}],\"name\":\"querySellQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"receiveBaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mtFee\",\"type\":\"uint256\"},{\"internalType\":\"enum PMMPricing.RState\",\"name\":\"newRState\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newQuoteTarget\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sellBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"receiveQuoteAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sellQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"receiveBaseAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shareAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"sellShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner _ALLOWED_ to a spender.\",\"params\":{\"owner\":\"address The address which owns the funds.\",\"spender\":\"address The address which will spend the funds.\"},\"returns\":{\"_0\":\"A uint256 specifying the amount of tokens still available for the spender.\"}},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\",\"params\":{\"amount\":\"The amount of tokens to be spent.\",\"spender\":\"The address which will spend the funds.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"The address to query the the balance of.\"},\"returns\":{\"balance\":\"An uint256 representing the amount owned by the passed address.\"}},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\",\"params\":{\"amount\":\"The amount to be transferred.\",\"to\":\"The address to transfer to.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"amount\":\"uint256 the amount of tokens to be transferred\",\"from\":\"address The address which you want to send tokens from\",\"to\":\"address The address which you want to transfer to\"}}},\"title\":\"StablePool\"},\"userdoc\":{\"methods\":{},\"notice\":\"StablePool initialization\"}},\"settings\":{\"compilationTarget\":{\"contracts/stablePool/implements/DSP.sol\":\"DSP\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC20.sol\":{\"content\":\"// This is a file copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\",\"keccak256\":\"0xc3b1b297d3eb14bbe1767f9d36a68592d7a80ad01b7596e95aa542a0d1d662a2\",\"license\":\"MIT\"},\"contracts/interfaces/IWorldesCallee.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IWorldesCallee {\\r\\n    function DVMSellShareCall(\\r\\n        address sender,\\r\\n        uint256 burnShareAmount,\\r\\n        uint256 baseAmount,\\r\\n        uint256 quoteAmount,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function DVMFlashLoanCall(\\r\\n        address sender,\\r\\n        uint256 baseAmount,\\r\\n        uint256 quoteAmount,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function DSPFlashLoanCall(\\r\\n        address sender,\\r\\n        uint256 baseAmount,\\r\\n        uint256 quoteAmount,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x62a95e6b109c8ae886c94f519db50dda30745db648980bb2b8a8e6393ddc6cf2\",\"license\":\"Apache-2.0\"},\"contracts/libraries/DecimalMath.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title DecimalMath\\r\\n *\\r\\n * @notice Functions for fixed point number with 18 decimals\\r\\n */\\r\\nlibrary DecimalMath {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 internal constant ONE = 10**18;\\r\\n    uint256 internal constant ONE2 = 10**36;\\r\\n\\r\\n    function mulFloor(uint256 target, uint256 d) internal pure returns (uint256) {\\r\\n        return target.mul(d) / (10**18);\\r\\n    }\\r\\n\\r\\n    function mulCeil(uint256 target, uint256 d) internal pure returns (uint256) {\\r\\n        return target.mul(d).divCeil(10**18);\\r\\n    }\\r\\n\\r\\n    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\\r\\n        return target.mul(10**18).div(d);\\r\\n    }\\r\\n\\r\\n    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\\r\\n        return target.mul(10**18).divCeil(d);\\r\\n    }\\r\\n\\r\\n    function reciprocalFloor(uint256 target) internal pure returns (uint256) {\\r\\n        return uint256(10**36).div(target);\\r\\n    }\\r\\n\\r\\n    function reciprocalCeil(uint256 target) internal pure returns (uint256) {\\r\\n        return uint256(10**36).divCeil(target);\\r\\n    }\\r\\n\\r\\n    function powFloor(uint256 target, uint256 e) internal pure returns (uint256) {\\r\\n        if (e == 0) {\\r\\n            return 10 ** 18;\\r\\n        } else if (e == 1) {\\r\\n            return target;\\r\\n        } else {\\r\\n            uint p = powFloor(target, e.div(2));\\r\\n            p = p.mul(p) / (10**18);\\r\\n            if (e % 2 == 1) {\\r\\n                p = p.mul(target) / (10**18);\\r\\n            }\\r\\n            return p;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa71c6c5af95e795862208bf00aac9a298291138b9324c720468ad4230acf7818\",\"license\":\"Apache-2.0\"},\"contracts/libraries/FeeRateModel.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {InitializableOwnable} from \\\"../libraries/InitializableOwnable.sol\\\";\\r\\n\\r\\ninterface IFeeRateImpl {\\r\\n    function getFeeRate(address pool, address trader) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IFeeRateModel {\\r\\n    function getFeeRate(address trader) external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract FeeRateModel is InitializableOwnable {\\r\\n    address public feeRateImpl;\\r\\n\\r\\n    function setFeeProxy(address _feeRateImpl) public onlyOwner {\\r\\n        feeRateImpl = _feeRateImpl;\\r\\n    }\\r\\n    \\r\\n    function getFeeRate(address trader) external view returns (uint256) {\\r\\n        if(feeRateImpl == address(0))\\r\\n            return 0;\\r\\n        return IFeeRateImpl(feeRateImpl).getFeeRate(msg.sender,trader);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x583ff0af353ce149f1f0a6996bd5ef50b8969390719ba95b2537f0ae88874be0\",\"license\":\"Apache-2.0\"},\"contracts/libraries/InitializableOwnable.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n  *\\r\\n * @notice Ownership related functions\\r\\n */\\r\\ncontract InitializableOwnable {\\r\\n    address public _OWNER_;\\r\\n    address public _NEW_OWNER_;\\r\\n    bool internal _INITIALIZED_;\\r\\n\\r\\n    // ============ Events ============\\r\\n\\r\\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    // ============ Modifiers ============\\r\\n\\r\\n    modifier notInitialized() {\\r\\n        require(!_INITIALIZED_, \\\"_INITIALIZED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == _OWNER_, \\\"NOT_OWNER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ============ Functions ============\\r\\n\\r\\n    function initOwner(address newOwner) public notInitialized {\\r\\n        _INITIALIZED_ = true;\\r\\n        _OWNER_ = newOwner;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\\r\\n        _NEW_OWNER_ = newOwner;\\r\\n    }\\r\\n\\r\\n    function claimOwnership() public {\\r\\n        require(msg.sender == _NEW_OWNER_, \\\"INVALID_CLAIM\\\");\\r\\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\\r\\n        _OWNER_ = _NEW_OWNER_;\\r\\n        _NEW_OWNER_ = address(0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfe6ac3ca14bc72355847e9a53052d5007d24155214135116feefabcc135a57e0\",\"license\":\"Apache-2.0\"},\"contracts/libraries/PMMPricing.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {SafeMath} from \\\"../libraries/SafeMath.sol\\\";\\r\\nimport {DecimalMath} from \\\"../libraries/DecimalMath.sol\\\";\\r\\nimport {WorldesMath} from \\\"../libraries/WorldesMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Pricing\\r\\n  *\\r\\n * @notice Worldes Pricing model\\r\\n */\\r\\n\\r\\nlibrary PMMPricing {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    enum RState {ONE, ABOVE_ONE, BELOW_ONE}\\r\\n\\r\\n    struct PMMState {\\r\\n        uint256 i;\\r\\n        uint256 K;\\r\\n        uint256 B;\\r\\n        uint256 Q;\\r\\n        uint256 B0;\\r\\n        uint256 Q0;\\r\\n        RState R;\\r\\n    }\\r\\n\\r\\n    // ============ buy & sell ============\\r\\n\\r\\n    function sellBaseToken(PMMState memory state, uint256 payBaseAmount)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 receiveQuoteAmount, RState newR)\\r\\n    {\\r\\n        if (state.R == RState.ONE) {\\r\\n            // case 1: R=1\\r\\n            // R falls below one\\r\\n            receiveQuoteAmount = _ROneSellBaseToken(state, payBaseAmount);\\r\\n            newR = RState.BELOW_ONE;\\r\\n        } else if (state.R == RState.ABOVE_ONE) {\\r\\n            uint256 backToOnePayBase = state.B0.sub(state.B);\\r\\n            uint256 backToOneReceiveQuote = state.Q.sub(state.Q0);\\r\\n            // case 2: R>1\\r\\n            // complex case, R status depends on trading amount\\r\\n            if (payBaseAmount < backToOnePayBase) {\\r\\n                // case 2.1: R status do not change\\r\\n                receiveQuoteAmount = _RAboveSellBaseToken(state, payBaseAmount);\\r\\n                newR = RState.ABOVE_ONE;\\r\\n                if (receiveQuoteAmount > backToOneReceiveQuote) {\\r\\n                    // [Important corner case!] may enter this branch when some precision problem happens. And consequently contribute to negative spare quote amount\\r\\n                    // to make sure spare quote>=0, mannually set receiveQuote=backToOneReceiveQuote\\r\\n                    receiveQuoteAmount = backToOneReceiveQuote;\\r\\n                }\\r\\n            } else if (payBaseAmount == backToOnePayBase) {\\r\\n                // case 2.2: R status changes to ONE\\r\\n                receiveQuoteAmount = backToOneReceiveQuote;\\r\\n                newR = RState.ONE;\\r\\n            } else {\\r\\n                // case 2.3: R status changes to BELOW_ONE\\r\\n                receiveQuoteAmount = backToOneReceiveQuote.add(\\r\\n                    _ROneSellBaseToken(state, payBaseAmount.sub(backToOnePayBase))\\r\\n                );\\r\\n                newR = RState.BELOW_ONE;\\r\\n            }\\r\\n        } else {\\r\\n            // state.R == RState.BELOW_ONE\\r\\n            // case 3: R<1\\r\\n            receiveQuoteAmount = _RBelowSellBaseToken(state, payBaseAmount);\\r\\n            newR = RState.BELOW_ONE;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function sellQuoteToken(PMMState memory state, uint256 payQuoteAmount)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 receiveBaseAmount, RState newR)\\r\\n    {\\r\\n        if (state.R == RState.ONE) {\\r\\n            receiveBaseAmount = _ROneSellQuoteToken(state, payQuoteAmount);\\r\\n            newR = RState.ABOVE_ONE;\\r\\n        } else if (state.R == RState.ABOVE_ONE) {\\r\\n            receiveBaseAmount = _RAboveSellQuoteToken(state, payQuoteAmount);\\r\\n            newR = RState.ABOVE_ONE;\\r\\n        } else {\\r\\n            uint256 backToOnePayQuote = state.Q0.sub(state.Q);\\r\\n            uint256 backToOneReceiveBase = state.B.sub(state.B0);\\r\\n            if (payQuoteAmount < backToOnePayQuote) {\\r\\n                receiveBaseAmount = _RBelowSellQuoteToken(state, payQuoteAmount);\\r\\n                newR = RState.BELOW_ONE;\\r\\n                if (receiveBaseAmount > backToOneReceiveBase) {\\r\\n                    receiveBaseAmount = backToOneReceiveBase;\\r\\n                }\\r\\n            } else if (payQuoteAmount == backToOnePayQuote) {\\r\\n                receiveBaseAmount = backToOneReceiveBase;\\r\\n                newR = RState.ONE;\\r\\n            } else {\\r\\n                receiveBaseAmount = backToOneReceiveBase.add(\\r\\n                    _ROneSellQuoteToken(state, payQuoteAmount.sub(backToOnePayQuote))\\r\\n                );\\r\\n                newR = RState.ABOVE_ONE;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============ R = 1 cases ============\\r\\n\\r\\n    function _ROneSellBaseToken(PMMState memory state, uint256 payBaseAmount)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 // receiveQuoteToken\\r\\n        )\\r\\n    {\\r\\n        // in theory Q2 <= targetQuoteTokenAmount\\r\\n        // however when amount is close to 0, precision problems may cause Q2 > targetQuoteTokenAmount\\r\\n        return\\r\\n            WorldesMath._SolveQuadraticFunctionForTrade(\\r\\n                state.Q0,\\r\\n                state.Q0,\\r\\n                payBaseAmount,\\r\\n                state.i,\\r\\n                state.K\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _ROneSellQuoteToken(PMMState memory state, uint256 payQuoteAmount)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 // receiveBaseToken\\r\\n        )\\r\\n    {\\r\\n        return\\r\\n            WorldesMath._SolveQuadraticFunctionForTrade(\\r\\n                state.B0,\\r\\n                state.B0,\\r\\n                payQuoteAmount,\\r\\n                DecimalMath.reciprocalFloor(state.i),\\r\\n                state.K\\r\\n            );\\r\\n    }\\r\\n\\r\\n    // ============ R < 1 cases ============\\r\\n\\r\\n    function _RBelowSellQuoteToken(PMMState memory state, uint256 payQuoteAmount)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 // receiveBaseToken\\r\\n        )\\r\\n    {\\r\\n        return\\r\\n            WorldesMath._GeneralIntegrate(\\r\\n                state.Q0,\\r\\n                state.Q.add(payQuoteAmount),\\r\\n                state.Q,\\r\\n                DecimalMath.reciprocalFloor(state.i),\\r\\n                state.K\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _RBelowSellBaseToken(PMMState memory state, uint256 payBaseAmount)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 // receiveQuoteToken\\r\\n        )\\r\\n    {\\r\\n        return\\r\\n            WorldesMath._SolveQuadraticFunctionForTrade(\\r\\n                state.Q0,\\r\\n                state.Q,\\r\\n                payBaseAmount,\\r\\n                state.i,\\r\\n                state.K\\r\\n            );\\r\\n    }\\r\\n\\r\\n    // ============ R > 1 cases ============\\r\\n\\r\\n    function _RAboveSellBaseToken(PMMState memory state, uint256 payBaseAmount)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 // receiveQuoteToken\\r\\n        )\\r\\n    {\\r\\n        return\\r\\n            WorldesMath._GeneralIntegrate(\\r\\n                state.B0,\\r\\n                state.B.add(payBaseAmount),\\r\\n                state.B,\\r\\n                state.i,\\r\\n                state.K\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _RAboveSellQuoteToken(PMMState memory state, uint256 payQuoteAmount)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 // receiveBaseToken\\r\\n        )\\r\\n    {\\r\\n        return\\r\\n            WorldesMath._SolveQuadraticFunctionForTrade(\\r\\n                state.B0,\\r\\n                state.B,\\r\\n                payQuoteAmount,\\r\\n                DecimalMath.reciprocalFloor(state.i),\\r\\n                state.K\\r\\n            );\\r\\n    }\\r\\n\\r\\n    // ============ Helper functions ============\\r\\n\\r\\n    function adjustedTarget(PMMState memory state) internal pure {\\r\\n        if (state.R == RState.BELOW_ONE) {\\r\\n            state.Q0 = WorldesMath._SolveQuadraticFunctionForTarget(\\r\\n                state.Q,\\r\\n                state.B.sub(state.B0),\\r\\n                state.i,\\r\\n                state.K\\r\\n            );\\r\\n        } else if (state.R == RState.ABOVE_ONE) {\\r\\n            state.B0 = WorldesMath._SolveQuadraticFunctionForTarget(\\r\\n                state.B,\\r\\n                state.Q.sub(state.Q0),\\r\\n                DecimalMath.reciprocalFloor(state.i),\\r\\n                state.K\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getMidPrice(PMMState memory state) internal pure returns (uint256) {\\r\\n        if (state.R == RState.BELOW_ONE) {\\r\\n            uint256 R = DecimalMath.divFloor(state.Q0.mul(state.Q0).div(state.Q), state.Q);\\r\\n            R = DecimalMath.ONE.sub(state.K).add(DecimalMath.mulFloor(state.K, R));\\r\\n            return DecimalMath.divFloor(state.i, R);\\r\\n        } else {\\r\\n            uint256 R = DecimalMath.divFloor(state.B0.mul(state.B0).div(state.B), state.B);\\r\\n            R = DecimalMath.ONE.sub(state.K).add(DecimalMath.mulFloor(state.K, R));\\r\\n            return DecimalMath.mulFloor(state.i, R);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x884dc3ba64226d5c3139d4ad77cc526f22d66f9eb7f56258cfd778bf41682e04\",\"license\":\"Apache-2.0\"},\"contracts/libraries/ReentrancyGuard.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * @title ReentrancyGuard\\r\\n  *\\r\\n * @notice Protect functions from Reentrancy Attack\\r\\n */\\r\\ncontract ReentrancyGuard {\\r\\n    // https://solidity.readthedocs.io/en/latest/control-structures.html?highlight=zero-state#scoping-and-declarations\\r\\n    // zero-state of _ENTERED_ is false\\r\\n    bool private _ENTERED_;\\r\\n\\r\\n    modifier preventReentrant() {\\r\\n        require(!_ENTERED_, \\\"REENTRANT\\\");\\r\\n        _ENTERED_ = true;\\r\\n        _;\\r\\n        _ENTERED_ = false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe447ab99ae8905d3b9fdff7f6c45ee21f39fe915e90d90dcf7cff3d6f86f7eb0\",\"license\":\"Apache-2.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n    This is a simplified version of OpenZepplin's SafeERC20 library\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\r\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves.\\r\\n\\r\\n        // A Solidity high level call has three parts:\\r\\n        //  1. The target address is checked to verify it contains contract code\\r\\n        //  2. The call itself is made, and success asserted\\r\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\r\\n        // solhint-disable-next-line max-line-length\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\r\\n\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x73bdda5b177b6f1cb93396fa135a99a99b317ec8475b6d5f13f4696b0685af9c\",\"license\":\"Apache-2.0\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n *\\r\\n * @notice Math operations with safety checks that revert on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"MUL_ERROR\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b > 0, \\\"DIVIDING_ERROR\\\");\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 quotient = div(a, b);\\r\\n        uint256 remainder = a - quotient * b;\\r\\n        if (remainder > 0) {\\r\\n            return quotient + 1;\\r\\n        } else {\\r\\n            return quotient;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= a, \\\"SUB_ERROR\\\");\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"ADD_ERROR\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\\r\\n        uint256 z = x / 2 + 1;\\r\\n        y = x;\\r\\n        while (z < y) {\\r\\n            y = z;\\r\\n            z = (x / z + z) / 2;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4e15e5debcd4097573f1e017fb458502a0122b8d543d140d8f708d4db35590c8\",\"license\":\"Apache-2.0\"},\"contracts/libraries/WorldesMath.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\r\\nimport {DecimalMath} from \\\"./DecimalMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title WorldesMath\\r\\n  *\\r\\n * @notice Functions for complex calculating. Including ONE Integration and TWO Quadratic solutions\\r\\n */\\r\\nlibrary WorldesMath {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /*\\r\\n        Integrate worldes curve from V1 to V2\\r\\n        require V0>=V1>=V2>0\\r\\n        res = (1-k)i(V1-V2)+ikV0*V0(1/V2-1/V1)\\r\\n        let V1-V2=delta\\r\\n        res = i*delta*(1-k+k(V0^2/V1/V2))\\r\\n\\r\\n        i is the price of V-res trading pair\\r\\n\\r\\n        support k=1 & k=0 case\\r\\n\\r\\n        [round down]\\r\\n    */\\r\\n    function _GeneralIntegrate(\\r\\n        uint256 V0,\\r\\n        uint256 V1,\\r\\n        uint256 V2,\\r\\n        uint256 i,\\r\\n        uint256 k\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(V0 > 0, \\\"TARGET_IS_ZERO\\\");\\r\\n        uint256 fairAmount = i.mul(V1.sub(V2)); // i*delta\\r\\n        if (k == 0) {\\r\\n            return fairAmount.div(DecimalMath.ONE);\\r\\n        }\\r\\n        uint256 V0V0V1V2 = DecimalMath.divFloor(V0.mul(V0).div(V1), V2);\\r\\n        uint256 penalty = DecimalMath.mulFloor(k, V0V0V1V2); // k(V0^2/V1/V2)\\r\\n        return DecimalMath.ONE.sub(k).add(penalty).mul(fairAmount).div(DecimalMath.ONE2);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        Follow the integration function above\\r\\n        i*deltaB = (Q2-Q1)*(1-k+kQ0^2/Q1/Q2)\\r\\n        Assume Q2=Q0, Given Q1 and deltaB, solve Q0\\r\\n\\r\\n        i is the price of delta-V trading pair\\r\\n        give out target of V\\r\\n\\r\\n        support k=1 & k=0 case\\r\\n\\r\\n        [round down]\\r\\n    */\\r\\n    function _SolveQuadraticFunctionForTarget(\\r\\n        uint256 V1,\\r\\n        uint256 delta,\\r\\n        uint256 i,\\r\\n        uint256 k\\r\\n    ) internal pure returns (uint256) {\\r\\n        if (k == 0) {\\r\\n            return V1.add(DecimalMath.mulFloor(i, delta));\\r\\n        }\\r\\n        // V0 = V1*(1+(sqrt-1)/2k)\\r\\n        // sqrt = \\u221a(1+4kidelta/V1)\\r\\n        // premium = 1+(sqrt-1)/2k\\r\\n        // uint256 sqrt = (4 * k).mul(i).mul(delta).div(V1).add(DecimalMath.ONE2).sqrt();\\r\\n\\r\\n        if (V1 == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 sqrt;\\r\\n        uint256 ki = (4 * k).mul(i);\\r\\n        if (ki == 0) {\\r\\n            sqrt = DecimalMath.ONE;\\r\\n        } else if ((ki * delta) / ki == delta) {\\r\\n            sqrt = (ki * delta).div(V1).add(DecimalMath.ONE2).sqrt();\\r\\n        } else {\\r\\n            sqrt = ki.div(V1).mul(delta).add(DecimalMath.ONE2).sqrt();\\r\\n        }\\r\\n        uint256 premium =\\r\\n            DecimalMath.divFloor(sqrt.sub(DecimalMath.ONE), k * 2).add(DecimalMath.ONE);\\r\\n        // V0 is greater than or equal to V1 according to the solution\\r\\n        return DecimalMath.mulFloor(V1, premium);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        Follow the integration expression above, we have:\\r\\n        i*deltaB = (Q2-Q1)*(1-k+kQ0^2/Q1/Q2)\\r\\n        Given Q1 and deltaB, solve Q2\\r\\n        This is a quadratic function and the standard version is\\r\\n        aQ2^2 + bQ2 + c = 0, where\\r\\n        a=1-k\\r\\n        -b=(1-k)Q1-kQ0^2/Q1+i*deltaB\\r\\n        c=-kQ0^2 \\r\\n        and Q2=(-b+sqrt(b^2+4(1-k)kQ0^2))/2(1-k)\\r\\n        note: another root is negative, abondan\\r\\n\\r\\n        if deltaBSig=true, then Q2>Q1, user sell Q and receive B\\r\\n        if deltaBSig=false, then Q2<Q1, user sell B and receive Q\\r\\n        return |Q1-Q2|\\r\\n\\r\\n        as we only support sell amount as delta, the deltaB is always negative\\r\\n        the input ideltaB is actually -ideltaB in the equation\\r\\n\\r\\n        i is the price of delta-V trading pair\\r\\n\\r\\n        support k=1 & k=0 case\\r\\n\\r\\n        [round down]\\r\\n    */\\r\\n    function _SolveQuadraticFunctionForTrade(\\r\\n        uint256 V0,\\r\\n        uint256 V1,\\r\\n        uint256 delta,\\r\\n        uint256 i,\\r\\n        uint256 k\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(V0 > 0, \\\"TARGET_IS_ZERO\\\");\\r\\n        if (delta == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        if (k == 0) {\\r\\n            return DecimalMath.mulFloor(i, delta) > V1 ? V1 : DecimalMath.mulFloor(i, delta);\\r\\n        }\\r\\n\\r\\n        if (k == DecimalMath.ONE) {\\r\\n            // if k==1\\r\\n            // Q2=Q1/(1+ideltaBQ1/Q0/Q0)\\r\\n            // temp = ideltaBQ1/Q0/Q0\\r\\n            // Q2 = Q1/(1+temp)\\r\\n            // Q1-Q2 = Q1*(1-1/(1+temp)) = Q1*(temp/(1+temp))\\r\\n            // uint256 temp = i.mul(delta).mul(V1).div(V0.mul(V0));\\r\\n            uint256 temp;\\r\\n            uint256 idelta = i.mul(delta);\\r\\n            if (idelta == 0) {\\r\\n                temp = 0;\\r\\n            } else if ((idelta * V1) / idelta == V1) {\\r\\n                temp = (idelta * V1).div(V0.mul(V0));\\r\\n            } else {\\r\\n                temp = delta.mul(V1).div(V0).mul(i).div(V0);\\r\\n            }\\r\\n            return V1.mul(temp).div(temp.add(DecimalMath.ONE));\\r\\n        }\\r\\n\\r\\n        // calculate -b value and sig\\r\\n        // b = kQ0^2/Q1-i*deltaB-(1-k)Q1\\r\\n        // part1 = (1-k)Q1 >=0\\r\\n        // part2 = kQ0^2/Q1-i*deltaB >=0\\r\\n        // bAbs = abs(part1-part2)\\r\\n        // if part1>part2 => b is negative => bSig is false\\r\\n        // if part2>part1 => b is positive => bSig is true\\r\\n        uint256 part2 = k.mul(V0).div(V1).mul(V0).add(i.mul(delta)); // kQ0^2/Q1-i*deltaB\\r\\n        uint256 bAbs = DecimalMath.ONE.sub(k).mul(V1); // (1-k)Q1\\r\\n\\r\\n        bool bSig;\\r\\n        if (bAbs >= part2) {\\r\\n            bAbs = bAbs - part2;\\r\\n            bSig = false;\\r\\n        } else {\\r\\n            bAbs = part2 - bAbs;\\r\\n            bSig = true;\\r\\n        }\\r\\n        bAbs = bAbs.div(DecimalMath.ONE);\\r\\n\\r\\n        // calculate sqrt\\r\\n        uint256 squareRoot =\\r\\n            DecimalMath.mulFloor(\\r\\n                DecimalMath.ONE.sub(k).mul(4),\\r\\n                DecimalMath.mulFloor(k, V0).mul(V0)\\r\\n            ); // 4(1-k)kQ0^2\\r\\n        squareRoot = bAbs.mul(bAbs).add(squareRoot).sqrt(); // sqrt(b*b+4(1-k)kQ0*Q0)\\r\\n\\r\\n        // final res\\r\\n        uint256 denominator = DecimalMath.ONE.sub(k).mul(2); // 2(1-k)\\r\\n        uint256 numerator;\\r\\n        if (bSig) {\\r\\n            numerator = squareRoot.sub(bAbs);\\r\\n            if (numerator == 0) {\\r\\n                revert(\\\"WorldesMath: should not be zero\\\");\\r\\n            }\\r\\n        } else {\\r\\n            numerator = bAbs.add(squareRoot);\\r\\n        }\\r\\n\\r\\n        uint256 V2 = DecimalMath.divCeil(numerator, denominator);\\r\\n        if (V2 > V1) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return V1 - V2;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8171831bccb59e280a75bdca3f85a7e1daf01e3994568dfbf17b5393104e4b8b\",\"license\":\"Apache-2.0\"},\"contracts/stablePool/implements/DSP.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {IFeeRateModel} from \\\"../../libraries/FeeRateModel.sol\\\";\\r\\nimport {IERC20} from \\\"../../interfaces/IERC20.sol\\\";\\r\\nimport {DSPTrader} from \\\"./DSPTrader.sol\\\";\\r\\nimport {DSPFunding} from \\\"./DSPFunding.sol\\\";\\r\\nimport {DSPVault} from \\\"./DSPVault.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title StablePool\\r\\n  *\\r\\n * @notice StablePool initialization\\r\\n */\\r\\ncontract DSP is DSPTrader, DSPFunding {\\r\\n    function init(\\r\\n        address maintainer,\\r\\n        address baseTokenAddress,\\r\\n        address quoteTokenAddress,\\r\\n        uint256 lpFeeRate,\\r\\n        address mtFeeRateModel,\\r\\n        uint256 i,\\r\\n        uint256 k,\\r\\n        bool isOpenTWAP\\r\\n    ) external {\\r\\n        require(!_DSP_INITIALIZED_, \\\"DSP_INITIALIZED\\\");\\r\\n        _DSP_INITIALIZED_ = true;\\r\\n        \\r\\n        require(baseTokenAddress != quoteTokenAddress, \\\"BASE_QUOTE_CAN_NOT_BE_SAME\\\");\\r\\n        _BASE_TOKEN_ = IERC20(baseTokenAddress);\\r\\n        _QUOTE_TOKEN_ = IERC20(quoteTokenAddress);\\r\\n\\r\\n        require(i > 0 && i <= 10**36);\\r\\n        _I_ = i;\\r\\n\\r\\n        require(k <= 10**18);\\r\\n        _K_ = k;\\r\\n\\r\\n        _LP_FEE_RATE_ = lpFeeRate;\\r\\n        _MT_FEE_RATE_MODEL_ = IFeeRateModel(mtFeeRateModel);\\r\\n        _MAINTAINER_ = maintainer;\\r\\n\\r\\n        _IS_OPEN_TWAP_ = isOpenTWAP;\\r\\n        if (isOpenTWAP) _BLOCK_TIMESTAMP_LAST_ = uint32(block.timestamp % 2**32);\\r\\n\\r\\n        string memory connect = \\\"_\\\";\\r\\n        string memory suffix = \\\"DLP\\\";\\r\\n\\r\\n        name = string(abi.encodePacked(suffix, connect, addressToShortString(address(this))));\\r\\n        symbol = \\\"DLP\\\";\\r\\n        decimals = _BASE_TOKEN_.decimals();\\r\\n\\r\\n        // ============================== Permit ====================================\\r\\n        uint256 chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                // keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\r\\n                0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f,\\r\\n                keccak256(bytes(name)),\\r\\n                keccak256(bytes(\\\"1\\\")),\\r\\n                chainId,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n        // ==========================================================================\\r\\n    }\\r\\n\\r\\n    function addressToShortString(address _addr) public pure returns (string memory) {\\r\\n        bytes32 value = bytes32(uint256(_addr));\\r\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\r\\n\\r\\n        bytes memory str = new bytes(8);\\r\\n        for (uint256 i = 0; i < 4; i++) {\\r\\n            str[i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\r\\n            str[1 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\r\\n        }\\r\\n        return string(str);\\r\\n    }\\r\\n\\r\\n    // ============ Version Control ============\\r\\n\\r\\n    function version() external pure returns (string memory) {\\r\\n        return \\\"DSP 1.0.1\\\";\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x302683f0c6f3d190a4ce448a8394a5eb111f932bb9d512253bd81c0cd39ddc92\",\"license\":\"Apache-2.0\"},\"contracts/stablePool/implements/DSPFunding.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {DSPVault} from \\\"./DSPVault.sol\\\";\\r\\nimport {DecimalMath} from \\\"../../libraries/DecimalMath.sol\\\";\\r\\nimport {IWorldesCallee} from \\\"../../interfaces/IWorldesCallee.sol\\\";\\r\\n\\r\\ncontract DSPFunding is DSPVault {\\r\\n    // ============ Events ============\\r\\n\\r\\n    event BuyShares(address to, uint256 increaseShares, uint256 totalShares);\\r\\n\\r\\n    event SellShares(address payer, address to, uint256 decreaseShares, uint256 totalShares);\\r\\n\\r\\n    // ============ Buy & Sell Shares ============\\r\\n\\r\\n    // buy shares [round down]\\r\\n    function buyShares(address to)\\r\\n        external\\r\\n        preventReentrant\\r\\n        returns (\\r\\n            uint256 shares,\\r\\n            uint256 baseInput,\\r\\n            uint256 quoteInput\\r\\n        )\\r\\n    {\\r\\n        uint256 baseBalance = _BASE_TOKEN_.balanceOf(address(this));\\r\\n        uint256 quoteBalance = _QUOTE_TOKEN_.balanceOf(address(this));\\r\\n        uint256 baseReserve = _BASE_RESERVE_;\\r\\n        uint256 quoteReserve = _QUOTE_RESERVE_;\\r\\n\\r\\n        baseInput = baseBalance.sub(baseReserve);\\r\\n        quoteInput = quoteBalance.sub(quoteReserve);\\r\\n        require(baseInput > 0, \\\"NO_BASE_INPUT\\\");\\r\\n\\r\\n        // Round down when withdrawing. Therefore, never be a situation occuring balance is 0 but totalsupply is not 0\\r\\n        // But May Happen\\uff0creserve >0 But totalSupply = 0\\r\\n        if (totalSupply == 0) {\\r\\n            // case 1. initial supply\\r\\n            require(quoteBalance > 0, \\\"ZERO_QUOTE_AMOUNT\\\");\\r\\n            shares = quoteBalance < DecimalMath.mulFloor(baseBalance, _I_)\\r\\n                ? DecimalMath.divFloor(quoteBalance, _I_)\\r\\n                : baseBalance;\\r\\n            _BASE_TARGET_ = uint112(shares);\\r\\n            _QUOTE_TARGET_ = uint112(DecimalMath.mulFloor(shares, _I_));\\r\\n            require(shares > 2001, \\\"MINT_AMOUNT_NOT_ENOUGH\\\");\\r\\n            _mint(address(0), 1001);\\r\\n            shares -= 1001;\\r\\n        } else if (baseReserve > 0 && quoteReserve > 0) {\\r\\n            // case 2. normal case\\r\\n            uint256 baseInputRatio = DecimalMath.divFloor(baseInput, baseReserve);\\r\\n            uint256 quoteInputRatio = DecimalMath.divFloor(quoteInput, quoteReserve);\\r\\n            uint256 mintRatio = quoteInputRatio < baseInputRatio ? quoteInputRatio : baseInputRatio;\\r\\n            shares = DecimalMath.mulFloor(totalSupply, mintRatio);\\r\\n\\r\\n            _BASE_TARGET_ = uint112(uint256(_BASE_TARGET_).add(DecimalMath.mulFloor(uint256(_BASE_TARGET_), mintRatio)));\\r\\n            _QUOTE_TARGET_ = uint112(uint256(_QUOTE_TARGET_).add(DecimalMath.mulFloor(uint256(_QUOTE_TARGET_), mintRatio)));\\r\\n        }\\r\\n        _mint(to, shares);\\r\\n        _setReserve(baseBalance, quoteBalance);\\r\\n        emit BuyShares(to, shares, _SHARES_[to]);\\r\\n    }\\r\\n\\r\\n    // sell shares [round down]\\r\\n    function sellShares(\\r\\n        uint256 shareAmount,\\r\\n        address to,\\r\\n        uint256 baseMinAmount,\\r\\n        uint256 quoteMinAmount,\\r\\n        bytes calldata data,\\r\\n        uint256 deadline\\r\\n    ) external preventReentrant returns (uint256 baseAmount, uint256 quoteAmount) {\\r\\n        require(deadline >= block.timestamp, \\\"TIME_EXPIRED\\\");\\r\\n        require(shareAmount <= _SHARES_[msg.sender], \\\"DLP_NOT_ENOUGH\\\");\\r\\n        require(to != address(this), \\\"SELL_BACK_NOT_ALLOWED\\\");\\r\\n\\r\\n        uint256 baseBalance = _BASE_TOKEN_.balanceOf(address(this));\\r\\n        uint256 quoteBalance = _QUOTE_TOKEN_.balanceOf(address(this));\\r\\n        uint256 totalShares = totalSupply;\\r\\n\\r\\n        baseAmount = baseBalance.mul(shareAmount).div(totalShares);\\r\\n        quoteAmount = quoteBalance.mul(shareAmount).div(totalShares);\\r\\n\\r\\n        _BASE_TARGET_ = uint112(uint256(_BASE_TARGET_).sub(uint256(_BASE_TARGET_).mul(shareAmount).divCeil(totalShares)));\\r\\n        _QUOTE_TARGET_ = uint112(uint256(_QUOTE_TARGET_).sub(uint256(_QUOTE_TARGET_).mul(shareAmount).divCeil(totalShares)));\\r\\n\\r\\n        require(\\r\\n            baseAmount >= baseMinAmount && quoteAmount >= quoteMinAmount,\\r\\n            \\\"WITHDRAW_NOT_ENOUGH\\\"\\r\\n        );\\r\\n\\r\\n        _burn(msg.sender, shareAmount);\\r\\n        _transferBaseOut(to, baseAmount);\\r\\n        _transferQuoteOut(to, quoteAmount);\\r\\n        _sync();\\r\\n\\r\\n        if (data.length > 0) {\\r\\n            //Same as DVM \\r\\n            IWorldesCallee(to).DVMSellShareCall(\\r\\n                msg.sender,\\r\\n                shareAmount,\\r\\n                baseAmount,\\r\\n                quoteAmount,\\r\\n                data\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit SellShares(msg.sender, to, shareAmount, _SHARES_[msg.sender]);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xda216c5c6d24e2bd9a7180486fc80f4f99633ac43952ae313efb3dc167bb463e\",\"license\":\"Apache-2.0\"},\"contracts/stablePool/implements/DSPStorage.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {ReentrancyGuard} from \\\"../../libraries/ReentrancyGuard.sol\\\";\\r\\nimport {SafeMath} from \\\"../../libraries/SafeMath.sol\\\";\\r\\nimport {WorldesMath} from \\\"../../libraries/WorldesMath.sol\\\";\\r\\nimport {DecimalMath} from \\\"../../libraries/DecimalMath.sol\\\";\\r\\nimport {IFeeRateModel} from \\\"../../libraries/FeeRateModel.sol\\\";\\r\\nimport {IERC20} from \\\"../../interfaces/IERC20.sol\\\";\\r\\nimport {PMMPricing} from \\\"../../libraries/PMMPricing.sol\\\";\\r\\n\\r\\ncontract DSPStorage is ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    bool internal _DSP_INITIALIZED_;\\r\\n    bool public _IS_OPEN_TWAP_ = false;\\r\\n    \\r\\n    // ============ Core Address ============\\r\\n\\r\\n    address public _MAINTAINER_;\\r\\n\\r\\n    IERC20 public _BASE_TOKEN_;\\r\\n    IERC20 public _QUOTE_TOKEN_;\\r\\n\\r\\n    uint112 public _BASE_RESERVE_;\\r\\n    uint112 public _QUOTE_RESERVE_;\\r\\n    uint32 public _BLOCK_TIMESTAMP_LAST_;\\r\\n    \\r\\n    uint256 public _BASE_PRICE_CUMULATIVE_LAST_;\\r\\n\\r\\n    uint112 public _BASE_TARGET_;\\r\\n    uint112 public _QUOTE_TARGET_;\\r\\n    uint32 public _RState_;\\r\\n\\r\\n    // ============ Shares (ERC20) ============\\r\\n\\r\\n    string public symbol;\\r\\n    uint8 public decimals;\\r\\n    string public name;\\r\\n\\r\\n    uint256 public totalSupply;\\r\\n    mapping(address => uint256) internal _SHARES_;\\r\\n    mapping(address => mapping(address => uint256)) internal _ALLOWED_;\\r\\n\\r\\n    // ================= Permit ======================\\r\\n\\r\\n    bytes32 public DOMAIN_SEPARATOR;\\r\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n    bytes32 public constant PERMIT_TYPEHASH =\\r\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\r\\n    mapping(address => uint256) public nonces;\\r\\n\\r\\n    // ============ Variables for Pricing ============\\r\\n\\r\\n    IFeeRateModel public _MT_FEE_RATE_MODEL_;\\r\\n\\r\\n    uint256 public _LP_FEE_RATE_;\\r\\n    uint256 public _K_;\\r\\n    uint256 public _I_;\\r\\n\\r\\n    // ============ Helper Functions ============\\r\\n\\r\\n    function getPMMState() public view returns (PMMPricing.PMMState memory state) {\\r\\n        state.i = _I_;\\r\\n        state.K = _K_;\\r\\n        state.B = _BASE_RESERVE_;\\r\\n        state.Q = _QUOTE_RESERVE_;\\r\\n        state.B0 = _BASE_TARGET_; // will be calculated in adjustedTarget\\r\\n        state.Q0 = _QUOTE_TARGET_;\\r\\n        state.R = PMMPricing.RState(_RState_);\\r\\n        PMMPricing.adjustedTarget(state);\\r\\n    }\\r\\n\\r\\n    function getPMMStateForCall()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 i,\\r\\n            uint256 K,\\r\\n            uint256 B,\\r\\n            uint256 Q,\\r\\n            uint256 B0,\\r\\n            uint256 Q0,\\r\\n            uint256 R\\r\\n        )\\r\\n    {\\r\\n        PMMPricing.PMMState memory state = getPMMState();\\r\\n        i = state.i;\\r\\n        K = state.K;\\r\\n        B = state.B;\\r\\n        Q = state.Q;\\r\\n        B0 = state.B0;\\r\\n        Q0 = state.Q0;\\r\\n        R = uint256(state.R);\\r\\n    }\\r\\n\\r\\n    function getMidPrice() public view returns (uint256 midPrice) {\\r\\n        return PMMPricing.getMidPrice(getPMMState());\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa12b3163bfb96be01bda48ee9211e34511abd094a6eb7fad4ff656cf8a4ec836\",\"license\":\"Apache-2.0\"},\"contracts/stablePool/implements/DSPTrader.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {DSPVault} from \\\"./DSPVault.sol\\\";\\r\\nimport {SafeMath} from \\\"../../libraries/SafeMath.sol\\\";\\r\\nimport {DecimalMath} from \\\"../../libraries/DecimalMath.sol\\\";\\r\\nimport {PMMPricing} from \\\"../../libraries/PMMPricing.sol\\\";\\r\\nimport {IWorldesCallee} from \\\"../../interfaces/IWorldesCallee.sol\\\";\\r\\n\\r\\ncontract DSPTrader is DSPVault {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // ============ Events ============\\r\\n\\r\\n    event WorldesSwap(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        uint256 fromAmount,\\r\\n        uint256 toAmount,\\r\\n        address trader,\\r\\n        address receiver\\r\\n    );\\r\\n\\r\\n    event WorldesFlashLoan(address borrower, address assetTo, uint256 baseAmount, uint256 quoteAmount);\\r\\n\\r\\n    event RChange(PMMPricing.RState newRState);\\r\\n\\r\\n    // ============ Trade Functions ============\\r\\n\\r\\n    function sellBase(address to) external preventReentrant returns (uint256 receiveQuoteAmount) {\\r\\n        uint256 baseBalance = _BASE_TOKEN_.balanceOf(address(this));\\r\\n        uint256 baseInput = baseBalance.sub(uint256(_BASE_RESERVE_));\\r\\n        uint256 mtFee;\\r\\n        uint256 newBaseTarget;\\r\\n        PMMPricing.RState newRState;\\r\\n        (receiveQuoteAmount, mtFee, newRState, newBaseTarget) = querySellBase(tx.origin, baseInput);\\r\\n\\r\\n        _transferQuoteOut(to, receiveQuoteAmount);\\r\\n        _transferQuoteOut(_MAINTAINER_, mtFee);\\r\\n\\r\\n        // update TARGET\\r\\n        if (_RState_ != uint32(newRState)) {\\r\\n            require(newBaseTarget <= uint112(-1), \\\"OVERFLOW\\\");\\r\\n            _BASE_TARGET_ = uint112(newBaseTarget);\\r\\n            _RState_ = uint32(newRState);\\r\\n            emit RChange(newRState);\\r\\n        }\\r\\n\\r\\n        _setReserve(baseBalance, _QUOTE_TOKEN_.balanceOf(address(this)));\\r\\n\\r\\n        emit WorldesSwap(\\r\\n            address(_BASE_TOKEN_),\\r\\n            address(_QUOTE_TOKEN_),\\r\\n            baseInput,\\r\\n            receiveQuoteAmount,\\r\\n            msg.sender,\\r\\n            to\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function sellQuote(address to) external preventReentrant returns (uint256 receiveBaseAmount) {\\r\\n        uint256 quoteBalance = _QUOTE_TOKEN_.balanceOf(address(this));\\r\\n        uint256 quoteInput = quoteBalance.sub(uint256(_QUOTE_RESERVE_));\\r\\n        uint256 mtFee;\\r\\n        uint256 newQuoteTarget;\\r\\n        PMMPricing.RState newRState;\\r\\n        (receiveBaseAmount, mtFee, newRState, newQuoteTarget) = querySellQuote(\\r\\n            tx.origin,\\r\\n            quoteInput\\r\\n        );\\r\\n\\r\\n        _transferBaseOut(to, receiveBaseAmount);\\r\\n        _transferBaseOut(_MAINTAINER_, mtFee);\\r\\n\\r\\n        // update TARGET\\r\\n        if (_RState_ != uint32(newRState)) {\\r\\n            require(newQuoteTarget <= uint112(-1), \\\"OVERFLOW\\\");\\r\\n            _QUOTE_TARGET_ = uint112(newQuoteTarget);\\r\\n            _RState_ = uint32(newRState);\\r\\n            emit RChange(newRState);\\r\\n        }\\r\\n\\r\\n        _setReserve(_BASE_TOKEN_.balanceOf(address(this)), quoteBalance);\\r\\n\\r\\n        emit WorldesSwap(\\r\\n            address(_QUOTE_TOKEN_),\\r\\n            address(_BASE_TOKEN_),\\r\\n            quoteInput,\\r\\n            receiveBaseAmount,\\r\\n            msg.sender,\\r\\n            to\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function flashLoan(\\r\\n        uint256 baseAmount,\\r\\n        uint256 quoteAmount,\\r\\n        address assetTo,\\r\\n        bytes calldata data\\r\\n    ) external preventReentrant {\\r\\n        _transferBaseOut(assetTo, baseAmount);\\r\\n        _transferQuoteOut(assetTo, quoteAmount);\\r\\n\\r\\n        if (data.length > 0)\\r\\n            IWorldesCallee(assetTo).DSPFlashLoanCall(msg.sender, baseAmount, quoteAmount, data);\\r\\n\\r\\n        uint256 baseBalance = _BASE_TOKEN_.balanceOf(address(this));\\r\\n        uint256 quoteBalance = _QUOTE_TOKEN_.balanceOf(address(this));\\r\\n\\r\\n        // no input -> pure loss\\r\\n        require(\\r\\n            baseBalance >= _BASE_RESERVE_ || quoteBalance >= _QUOTE_RESERVE_,\\r\\n            \\\"FLASH_LOAN_FAILED\\\"\\r\\n        );\\r\\n\\r\\n        // sell quote case\\r\\n        // quote input + base output\\r\\n        if (baseBalance < _BASE_RESERVE_) {\\r\\n            uint256 quoteInput = quoteBalance.sub(uint256(_QUOTE_RESERVE_));\\r\\n            (\\r\\n                uint256 receiveBaseAmount,\\r\\n                uint256 mtFee,\\r\\n                PMMPricing.RState newRState,\\r\\n                uint256 newQuoteTarget\\r\\n            ) = querySellQuote(tx.origin, quoteInput); // revert if quoteBalance<quoteReserve\\r\\n            require(\\r\\n                uint256(_BASE_RESERVE_).sub(baseBalance) <= receiveBaseAmount,\\r\\n                \\\"FLASH_LOAN_FAILED\\\"\\r\\n            );\\r\\n\\r\\n            _transferBaseOut(_MAINTAINER_, mtFee);\\r\\n            if (_RState_ != uint32(newRState)) {\\r\\n                require(newQuoteTarget <= uint112(-1), \\\"OVERFLOW\\\");\\r\\n                _QUOTE_TARGET_ = uint112(newQuoteTarget);\\r\\n                _RState_ = uint32(newRState);\\r\\n                emit RChange(newRState);\\r\\n            }\\r\\n            emit WorldesSwap(\\r\\n                address(_QUOTE_TOKEN_),\\r\\n                address(_BASE_TOKEN_),\\r\\n                quoteInput,\\r\\n                receiveBaseAmount,\\r\\n                msg.sender,\\r\\n                assetTo\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // sell base case\\r\\n        // base input + quote output\\r\\n        if (quoteBalance < _QUOTE_RESERVE_) {\\r\\n            uint256 baseInput = baseBalance.sub(uint256(_BASE_RESERVE_));\\r\\n            (\\r\\n                uint256 receiveQuoteAmount,\\r\\n                uint256 mtFee,\\r\\n                PMMPricing.RState newRState,\\r\\n                uint256 newBaseTarget\\r\\n            ) = querySellBase(tx.origin, baseInput); // revert if baseBalance<baseReserve\\r\\n            require(\\r\\n                uint256(_QUOTE_RESERVE_).sub(quoteBalance) <= receiveQuoteAmount,\\r\\n                \\\"FLASH_LOAN_FAILED\\\"\\r\\n            );\\r\\n\\r\\n            _transferQuoteOut(_MAINTAINER_, mtFee);\\r\\n            if (_RState_ != uint32(newRState)) {\\r\\n                require(newBaseTarget <= uint112(-1), \\\"OVERFLOW\\\");\\r\\n                _BASE_TARGET_ = uint112(newBaseTarget);\\r\\n                _RState_ = uint32(newRState);\\r\\n                emit RChange(newRState);\\r\\n            }\\r\\n            emit WorldesSwap(\\r\\n                address(_BASE_TOKEN_),\\r\\n                address(_QUOTE_TOKEN_),\\r\\n                baseInput,\\r\\n                receiveQuoteAmount,\\r\\n                msg.sender,\\r\\n                assetTo\\r\\n            );\\r\\n        }\\r\\n\\r\\n        _sync();\\r\\n\\r\\n        emit WorldesFlashLoan(msg.sender, assetTo, baseAmount, quoteAmount);\\r\\n    }\\r\\n\\r\\n    // ============ Query Functions ============\\r\\n\\r\\n    function querySellBase(address trader, uint256 payBaseAmount)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256 receiveQuoteAmount,\\r\\n            uint256 mtFee,\\r\\n            PMMPricing.RState newRState,\\r\\n            uint256 newBaseTarget\\r\\n        )\\r\\n    {\\r\\n        PMMPricing.PMMState memory state = getPMMState();\\r\\n        (receiveQuoteAmount, newRState) = PMMPricing.sellBaseToken(state, payBaseAmount);\\r\\n\\r\\n        uint256 lpFeeRate = _LP_FEE_RATE_;\\r\\n        uint256 mtFeeRate = _MT_FEE_RATE_MODEL_.getFeeRate(trader);\\r\\n        mtFee = DecimalMath.mulFloor(receiveQuoteAmount, mtFeeRate);\\r\\n        receiveQuoteAmount = receiveQuoteAmount\\r\\n            .sub(DecimalMath.mulFloor(receiveQuoteAmount, lpFeeRate))\\r\\n            .sub(mtFee);\\r\\n        newBaseTarget = state.B0;\\r\\n    }\\r\\n\\r\\n    function querySellQuote(address trader, uint256 payQuoteAmount)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256 receiveBaseAmount,\\r\\n            uint256 mtFee,\\r\\n            PMMPricing.RState newRState,\\r\\n            uint256 newQuoteTarget\\r\\n        )\\r\\n    {\\r\\n        PMMPricing.PMMState memory state = getPMMState();\\r\\n        (receiveBaseAmount, newRState) = PMMPricing.sellQuoteToken(state, payQuoteAmount);\\r\\n\\r\\n        uint256 lpFeeRate = _LP_FEE_RATE_;\\r\\n        uint256 mtFeeRate = _MT_FEE_RATE_MODEL_.getFeeRate(trader);\\r\\n        mtFee = DecimalMath.mulFloor(receiveBaseAmount, mtFeeRate);\\r\\n        receiveBaseAmount = receiveBaseAmount\\r\\n            .sub(DecimalMath.mulFloor(receiveBaseAmount, lpFeeRate))\\r\\n            .sub(mtFee);\\r\\n        newQuoteTarget = state.Q0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x63133f4299e321e51f3b365197e3d3056bcc4098013fc05c3be2ceef006f43cf\",\"license\":\"Apache-2.0\"},\"contracts/stablePool/implements/DSPVault.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {IERC20} from \\\"../../interfaces/IERC20.sol\\\";\\r\\nimport {SafeMath} from \\\"../../libraries/SafeMath.sol\\\";\\r\\nimport {DecimalMath} from \\\"../../libraries/DecimalMath.sol\\\";\\r\\nimport {PMMPricing} from \\\"../../libraries/PMMPricing.sol\\\";\\r\\nimport {SafeERC20} from \\\"../../libraries/SafeERC20.sol\\\";\\r\\nimport {DSPStorage} from \\\"./DSPStorage.sol\\\";\\r\\n\\r\\ncontract DSPVault is DSPStorage {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // ============ Events ============\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n\\r\\n    event Mint(address indexed user, uint256 value);\\r\\n\\r\\n    event Burn(address indexed user, uint256 value);\\r\\n\\r\\n    // ============ View Functions ============\\r\\n\\r\\n    function getVaultReserve() external view returns (uint256 baseReserve, uint256 quoteReserve) {\\r\\n        baseReserve = _BASE_RESERVE_;\\r\\n        quoteReserve = _QUOTE_RESERVE_;\\r\\n    }\\r\\n\\r\\n    function getUserFeeRate(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 lpFeeRate, uint256 mtFeeRate)\\r\\n    {\\r\\n        lpFeeRate = _LP_FEE_RATE_;\\r\\n        mtFeeRate = _MT_FEE_RATE_MODEL_.getFeeRate(user);\\r\\n    }\\r\\n\\r\\n    // ============ Asset In ============\\r\\n\\r\\n    function getBaseInput() public view returns (uint256 input) {\\r\\n        return _BASE_TOKEN_.balanceOf(address(this)).sub(uint256(_BASE_RESERVE_));\\r\\n    }\\r\\n\\r\\n    function getQuoteInput() public view returns (uint256 input) {\\r\\n        return _QUOTE_TOKEN_.balanceOf(address(this)).sub(uint256(_QUOTE_RESERVE_));\\r\\n    }\\r\\n\\r\\n    // ============ TWAP UPDATE ===========\\r\\n\\r\\n    function _twapUpdate() internal {\\r\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\r\\n        uint32 timeElapsed = blockTimestamp - _BLOCK_TIMESTAMP_LAST_;\\r\\n        if (timeElapsed > 0 && _BASE_RESERVE_ != 0 && _QUOTE_RESERVE_ != 0) {\\r\\n            _BASE_PRICE_CUMULATIVE_LAST_ += getMidPrice() * timeElapsed;\\r\\n        }\\r\\n        _BLOCK_TIMESTAMP_LAST_ = blockTimestamp;\\r\\n    }\\r\\n\\r\\n    // ============ Set States ============\\r\\n\\r\\n    function _setReserve(uint256 baseReserve, uint256 quoteReserve) internal {\\r\\n        require(baseReserve <= uint112(-1) && quoteReserve <= uint112(-1), \\\"OVERFLOW\\\");\\r\\n        _BASE_RESERVE_ = uint112(baseReserve);\\r\\n        _QUOTE_RESERVE_ = uint112(quoteReserve);\\r\\n\\r\\n        if (_IS_OPEN_TWAP_) _twapUpdate();\\r\\n    }\\r\\n\\r\\n    function _sync() internal {\\r\\n        uint256 baseBalance = _BASE_TOKEN_.balanceOf(address(this));\\r\\n        uint256 quoteBalance = _QUOTE_TOKEN_.balanceOf(address(this));\\r\\n        require(baseBalance <= uint112(-1) && quoteBalance <= uint112(-1), \\\"OVERFLOW\\\");\\r\\n        if (baseBalance != _BASE_RESERVE_) {\\r\\n            _BASE_RESERVE_ = uint112(baseBalance);\\r\\n        }\\r\\n        if (quoteBalance != _QUOTE_RESERVE_) {\\r\\n            _QUOTE_RESERVE_ = uint112(quoteBalance);\\r\\n        }\\r\\n\\r\\n        if (_IS_OPEN_TWAP_) _twapUpdate();\\r\\n    }\\r\\n\\r\\n    function sync() external preventReentrant {\\r\\n        _sync();\\r\\n    }\\r\\n\\r\\n    function correctRState() public {\\r\\n        if (_RState_ == uint32(PMMPricing.RState.BELOW_ONE) && _BASE_RESERVE_<_BASE_TARGET_) {\\r\\n          _RState_ = uint32(PMMPricing.RState.ONE);\\r\\n          _BASE_TARGET_ = _BASE_RESERVE_;\\r\\n          _QUOTE_TARGET_ = _QUOTE_RESERVE_;\\r\\n        }\\r\\n        if (_RState_ == uint32(PMMPricing.RState.ABOVE_ONE) && _QUOTE_RESERVE_<_QUOTE_TARGET_) {\\r\\n          _RState_ = uint32(PMMPricing.RState.ONE);\\r\\n          _BASE_TARGET_ = _BASE_RESERVE_;\\r\\n          _QUOTE_TARGET_ = _QUOTE_RESERVE_;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============ Asset Out ============\\r\\n\\r\\n    function _transferBaseOut(address to, uint256 amount) internal {\\r\\n        if (amount > 0) {\\r\\n            _BASE_TOKEN_.safeTransfer(to, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _transferQuoteOut(address to, uint256 amount) internal {\\r\\n        if (amount > 0) {\\r\\n            _QUOTE_TOKEN_.safeTransfer(to, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============ Shares (ERC20) ============\\r\\n\\r\\n    /**\\r\\n     * @dev transfer token for a specified address\\r\\n     * @param to The address to transfer to.\\r\\n     * @param amount The amount to be transferred.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) public returns (bool) {\\r\\n        require(amount <= _SHARES_[msg.sender], \\\"BALANCE_NOT_ENOUGH\\\");\\r\\n\\r\\n        _SHARES_[msg.sender] = _SHARES_[msg.sender].sub(amount);\\r\\n        _SHARES_[to] = _SHARES_[to].add(amount);\\r\\n        emit Transfer(msg.sender, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the balance of the specified address.\\r\\n     * @param owner The address to query the the balance of.\\r\\n     * @return balance An uint256 representing the amount owned by the passed address.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance) {\\r\\n        return _SHARES_[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer tokens from one address to another\\r\\n     * @param from address The address which you want to send tokens from\\r\\n     * @param to address The address which you want to transfer to\\r\\n     * @param amount uint256 the amount of tokens to be transferred\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public returns (bool) {\\r\\n        require(amount <= _SHARES_[from], \\\"BALANCE_NOT_ENOUGH\\\");\\r\\n        require(amount <= _ALLOWED_[from][msg.sender], \\\"ALLOWANCE_NOT_ENOUGH\\\");\\r\\n\\r\\n        _SHARES_[from] = _SHARES_[from].sub(amount);\\r\\n        _SHARES_[to] = _SHARES_[to].add(amount);\\r\\n        _ALLOWED_[from][msg.sender] = _ALLOWED_[from][msg.sender].sub(amount);\\r\\n        emit Transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r\\n     * @param spender The address which will spend the funds.\\r\\n     * @param amount The amount of tokens to be spent.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        _ALLOWED_[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to check the amount of tokens that an owner _ALLOWED_ to a spender.\\r\\n     * @param owner address The address which owns the funds.\\r\\n     * @param spender address The address which will spend the funds.\\r\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view returns (uint256) {\\r\\n        return _ALLOWED_[owner][spender];\\r\\n    }\\r\\n\\r\\n    function _mint(address user, uint256 value) internal {\\r\\n        require(value > 1000, \\\"MINT_AMOUNT_NOT_ENOUGH\\\");\\r\\n        _SHARES_[user] = _SHARES_[user].add(value);\\r\\n        totalSupply = totalSupply.add(value);\\r\\n        emit Mint(user, value);\\r\\n        emit Transfer(address(0), user, value);\\r\\n    }\\r\\n\\r\\n    function _burn(address user, uint256 value) internal {\\r\\n        _SHARES_[user] = _SHARES_[user].sub(value);\\r\\n        totalSupply = totalSupply.sub(value);\\r\\n        emit Burn(user, value);\\r\\n        emit Transfer(user, address(0), value);\\r\\n    }\\r\\n\\r\\n    // ============================ Permit ======================================\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external {\\r\\n        require(deadline >= block.timestamp, \\\"DSP_LP: EXPIRED\\\");\\r\\n        bytes32 digest =\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\r\\n                    \\\"\\\\x19\\\\x01\\\",\\r\\n                    DOMAIN_SEPARATOR,\\r\\n                    keccak256(\\r\\n                        abi.encode(\\r\\n                            PERMIT_TYPEHASH,\\r\\n                            owner,\\r\\n                            spender,\\r\\n                            value,\\r\\n                            nonces[owner]++,\\r\\n                            deadline\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\r\\n        require(\\r\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\r\\n            \\\"DSP_LP: INVALID_SIGNATURE\\\"\\r\\n        );\\r\\n        _approve(owner, spender, value);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf89fdf927f0129ce51ed4331a06bb2bf13848a3fad02c94416c8417552cfe745\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60806040526000805462ff00001916905534801561001c57600080fd5b506147d48061002c6000396000f3fe608060405234801561001057600080fd5b50600436106102955760003560e01c80637d72150411610167578063d4b97046116100ce578063ee27c68911610087578063ee27c6891461053d578063f6b06e7014610545578063f811d6921461054d578063fd1ed7e914610555578063fe24cb7f14610570578063fff6cae91461057857610295565b8063d4b97046146104ec578063d505accf146104f4578063dd62ed3e14610507578063dd93f59a1461051a578063e539ef491461052d578063ec2fd46d1461053557610295565b8063ab44a7a311610120578063ab44a7a31461049b578063b56ceaa6146104a3578063bbf5ce78146104b6578063bd6015b4146104be578063bf357dae146104d1578063d0a494e4146104d957610295565b80637d7215041461043b5780637ecebe0014610443578063880a4d871461045657806395d89b411461046b578063a382d1b914610473578063a9059cbb1461048857610295565b8063440966091161020b57806366410a21116101c457806366410a21146103cd57806370a08231146103f057806371f9100c1461040357806373d74cf81461040b57806377f586571461041357806379a048761461042857610295565b8063440966091461036b5780634a248d2a1461037e5780634c85b425146103865780635039972a146103a857806354fd4d50146103bd57806365f6fcbb146103c557610295565b80632df6cb481161025d5780632df6cb481461031357806330adf81f1461031b578063313ce5671461032357806336223ce9146103385780633644e5151461034e5780634322ec831461035657610295565b806306fdde031461029a578063095ea7b3146102b857806317101940146102d857806318160ddd146102eb57806323b872dd14610300575b600080fd5b6102a2610580565b6040516102af9190614175565b60405180910390f35b6102cb6102c6366004613d34565b61060e565b6040516102af91906140cf565b6102a26102e6366004613bae565b610625565b6102f361074f565b6040516102af91906140da565b6102cb61030e366004613c86565b610755565b6102cb6108d9565b6102f36108e8565b61032b61090c565b6040516102af91906146c7565b610340610915565b6040516102af929190614637565b6102f3610930565b61035e610936565b6040516102af9190613fa5565b610340610379366004613bae565b61094c565b61035e6109d7565b610399610394366004613bae565b6109e6565b6040516102af93929190614670565b6103bb6103b6366004613bfd565b610dd0565b005b6102a261110d565b6102f3611131565b6103e06103db366004613d34565b6111d8565b6040516102af9493929190614645565b6102f36103fe366004613bae565b6112c6565b6102f36112e1565b6103bb61132d565b61041b61142a565b6040516102af9190614623565b6103e0610436366004613d34565b611440565b61041b611521565b6102f3610451366004613bae565b611530565b61045e611542565b6040516102af91906146b6565b6102a2611555565b61047b6115b0565b6040516102af91906145cd565b6102cb610496366004613d34565b61163d565b6102f361170c565b6103406104b1366004613d92565b611712565b61041b611b39565b6102f36104cc366004613bae565b611b4f565b61045e611e00565b6103bb6104e7366004613e0c565b611e13565b61035e612400565b6103bb610502366004613cc6565b61240f565b6102f3610515366004613bc9565b61257e565b6102f3610528366004613bae565b6125a9565b61041b612844565b6102f3612853565b6102f3612859565b61035e61286b565b6102f361287a565b61055d612880565b6040516102af9796959493929190614686565b6102f36128e3565b6103bb6128e9565b6008805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106065780601f106105db57610100808354040283529160200191610606565b820191906000526020600020905b8154815290600101906020018083116105e957829003601f168201915b505050505081565b600061061b33848461292d565b5060015b92915050565b604080518082018252601081526f181899199a1a9b1b9c1cb0b131b232b360811b6020820152815160088082528184019093526060926001600160a01b0385169291849160208201818036833701905050905060005b6004811015610744578260048583600c016020811061069657fe5b1a60f81b6001600160f81b031916901c60f81c60ff16815181106106b657fe5b602001015160f81c60f81b8282600202815181106106d057fe5b60200101906001600160f81b031916908160001a905350828482600c01602081106106f757fe5b825191901a600f1690811061070857fe5b602001015160f81c60f81b82826002026001018151811061072557fe5b60200101906001600160f81b031916908160001a90535060010161067b565b50925050505b919050565b60095481565b6001600160a01b0383166000908152600a60205260408120548211156107965760405162461bcd60e51b815260040161078d90614492565b60405180910390fd5b6001600160a01b0384166000908152600b602090815260408083203384529091529020548211156107d95760405162461bcd60e51b815260040161078d9061422c565b6001600160a01b0384166000908152600a6020526040902054610802908363ffffffff61299516565b6001600160a01b038086166000908152600a60205260408082209390935590851681522054610837908363ffffffff6129bd16565b6001600160a01b038085166000908152600a60209081526040808320949094559187168152600b8252828120338252909152205461087b908363ffffffff61299516565b6001600160a01b038086166000818152600b6020908152604080832033845290915290819020939093559151908516919060008051602061475f833981519152906108c79086906140da565b60405180910390a35060019392505050565b60005462010000900460ff1681565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60075460ff1681565b6003546001600160701b0380821692600160701b9092041690565b600c5481565b600054630100000090046001600160a01b031681565b600f54600e54604051638198edbf60e01b81526000916001600160a01b031690638198edbf90610980908690600401613fa5565b60206040518083038186803b15801561099857600080fd5b505afa1580156109ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d09190613d7a565b9050915091565b6001546001600160a01b031681565b600080548190819060ff1615610a0e5760405162461bcd60e51b815260040161078d90614282565b6000805460ff191660019081178255546040516370a0823160e01b81526001600160a01b03909116906370a0823190610a4b903090600401613fa5565b60206040518083038186803b158015610a6357600080fd5b505afa158015610a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9b9190613d7a565b6002546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190610ad1903090600401613fa5565b60206040518083038186803b158015610ae957600080fd5b505afa158015610afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b219190613d7a565b6003549091506001600160701b0380821691600160701b900416610b4b848363ffffffff61299516565b9550610b5d838263ffffffff61299516565b945060008611610b7f5760405162461bcd60e51b815260040161078d9061436b565b600954610c565760008311610ba65760405162461bcd60e51b815260040161078d906142d4565b610bb2846011546129e9565b8310610bbe5783610bca565b610bca83601154612a13565b600580546001600160701b0319166001600160701b038316179055601154909750610bf69088906129e9565b6005600e6101000a8154816001600160701b0302191690836001600160701b031602179055506107d18711610c3d5760405162461bcd60e51b815260040161078d906141fc565b610c4a60006103e9612a31565b6103e987039650610d52565b600082118015610c665750600081115b15610d52576000610c778784612a13565b90506000610c858784612a13565b90506000828210610c965782610c98565b815b9050610ca6600954826129e9565b600554909a50610cdb90610cc3906001600160701b0316836129e9565b6005546001600160701b03169063ffffffff6129bd16565b600580546001600160701b0319166001600160701b039283161790819055610d2891610d0f91600160701b900416836129e9565b600554600160701b90046001600160701b0316906129bd565b6005600e6101000a8154816001600160701b0302191690836001600160701b031602179055505050505b610d5c8888612a31565b610d668484612b2b565b6001600160a01b0388166000908152600a6020526040908190205490517f1c172440bdebb59cd92a7f08f4227903a3305ab6f880cb25f93eddb66843a10291610db2918b918b916140ae565b60405180910390a150506000805460ff191690555092949193509150565b600054610100900460ff1615610df85760405162461bcd60e51b815260040161078d906141a8565b6000805461ff0019166101001790556001600160a01b038781169087161415610e335760405162461bcd60e51b815260040161078d906142ff565b600180546001600160a01b03808a166001600160a01b03199283161790925560028054928916929091169190911790558215801590610e8157506ec097ce7bc90715b34b9f10000000008311155b610e8a57600080fd5b6011839055670de0b6b3a7640000821115610ea457600080fd5b6010829055600f859055600e80546001600160a01b038087166001600160a01b0319909216919091179091556000805483158015620100000262ff000019948d166301000000026301000000600160b81b03199093169290921793909316179055610f2757600380546001600160e01b03164263ffffffff16600160e01b021790555b60408051808201825260018152605f60f81b602080830191909152825180840190935260038352620444c560ec1b90830152908082610f6530610625565b604051602001610f7793929190613f45565b60405160208183030381529060405260089080519060200190610f9b929190613a78565b50604080518082019091526003808252620444c560ec1b6020909201918252610fc691600691613a78565b50600160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561101557600080fd5b505afa158015611029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104d9190613e73565b6007805460ff191660ff9290921691909117905560405146907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f9061109490600890613ed5565b60408051918290038220828201825260018352603160f81b60209384015290516110e593927fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6918691309101614149565b60408051601f198184030181529190528051602090910120600c555050505050505050505050565b60408051808201909152600981526844535020312e302e3160b81b60208201525b90565b6003546001546040516370a0823160e01b81526000926111d3926001600160701b03909116916001600160a01b03909116906370a0823190611177903090600401613fa5565b60206040518083038186803b15801561118f57600080fd5b505afa1580156111a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c79190613d7a565b9063ffffffff61299516565b905090565b6000806000806111e6613af6565b6111ee6115b0565b90506111fa8187612bbb565b600f54600e54604051638198edbf60e01b8152939850919550916000916001600160a01b031690638198edbf90611235908c90600401613fa5565b60206040518083038186803b15801561124d57600080fd5b505afa158015611261573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112859190613d7a565b905061129187826129e9565b95506112b1866111c76112a48a866129e9565b8a9063ffffffff61299516565b96508260a00151935050505092959194509250565b6001600160a01b03166000908152600a602052604090205490565b6003546002546040516370a0823160e01b81526000926111d392600160701b9091046001600160701b0316916001600160a01b03909116906370a0823190611177903090600401613fa5565b60055463ffffffff600160e01b90910416600214801561135d57506005546003546001600160701b039182169116105b156113a557600580546003546001600160701b03808216600160701b600160e01b0390931692909217600160701b600160e01b031916600160701b9182900492909216021790555b60055463ffffffff600160e01b9091041660011480156113e057506005546003546001600160701b03600160701b9283900481169290910416105b1561142857600580546003546001600160701b03808216600160701b600160e01b0390931692909217600160701b600160e01b031916600160701b9182900492909216021790555b565b600554600160701b90046001600160701b031681565b60008060008061144e613af6565b6114566115b0565b90506114628187612cc1565b600f54600e54604051638198edbf60e01b8152939850919550916000916001600160a01b031690638198edbf9061149d908c90600401613fa5565b60206040518083038186803b1580156114b557600080fd5b505afa1580156114c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ed9190613d7a565b90506114f987826129e9565b955061150c866111c76112a48a866129e9565b96508260800151935050505092959194509250565b6003546001600160701b031681565b600d6020526000908152604090205481565b600354600160e01b900463ffffffff1681565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106065780601f106105db57610100808354040283529160200191610606565b6115b8613af6565b601154815260105460208201526003546001600160701b038082166040840152600160701b918290048116606084015260055480821660808501529182041660a0830152600160e01b900463ffffffff16600281111561161457fe5b8160c00190600281111561162457fe5b9081600281111561163157fe5b90525061112e81612dc2565b336000908152600a602052604081205482111561166c5760405162461bcd60e51b815260040161078d90614492565b336000908152600a602052604090205461168c908363ffffffff61299516565b336000908152600a6020526040808220929092556001600160a01b038516815220546116be908363ffffffff6129bd16565b6001600160a01b0384166000818152600a602052604090819020929092559051339060008051602061475f833981519152906116fb9086906140da565b60405180910390a350600192915050565b600f5481565b60008054819060ff16156117385760405162461bcd60e51b815260040161078d90614282565b6000805460ff19166001179055428310156117655760405162461bcd60e51b815260040161078d90614584565b336000908152600a60205260409020548911156117945760405162461bcd60e51b815260040161078d9061446a565b6001600160a01b0388163014156117bd5760405162461bcd60e51b815260040161078d906142a5565b6001546040516370a0823160e01b81526000916001600160a01b0316906370a08231906117ee903090600401613fa5565b60206040518083038186803b15801561180657600080fd5b505afa15801561181a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183e9190613d7a565b6002546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190611874903090600401613fa5565b60206040518083038186803b15801561188c57600080fd5b505afa1580156118a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c49190613d7a565b6009549091506118ea816118de858f63ffffffff612e6c16565b9063ffffffff612ea616565b9450611900816118de848f63ffffffff612e6c16565b935061195e6119468261193a8f600560009054906101000a90046001600160701b03166001600160701b0316612e6c90919063ffffffff16565b9063ffffffff612ed016565b6005546001600160701b03169063ffffffff61299516565b600560006101000a8154816001600160701b0302191690836001600160701b031602179055506119d56119bc8261193a8f6005600e9054906101000a90046001600160701b03166001600160701b0316612e6c90919063ffffffff16565b600554600160701b90046001600160701b031690612995565b6005600e6101000a8154816001600160701b0302191690836001600160701b03160217905550898510158015611a0b5750888410155b611a275760405162461bcd60e51b815260040161078d90614406565b611a31338d612efd565b611a3b8b86612fca565b611a458b85612fed565b611a4d613010565b8615611abc578a6001600160a01b0316632411d338338e88888d8d6040518763ffffffff1660e01b8152600401611a899695949392919061401b565b600060405180830381600087803b158015611aa357600080fd5b505af1158015611ab7573d6000803e3d6000fd5b505050505b7f55caccde83781f39bfc1296eff45655b6496729443a7d48958b18b3b685600a5338c8e600a6000336001600160a01b03166001600160a01b0316815260200190815260200160002054604051611b169493929190613fb9565b60405180910390a150506000805460ff1916905550909890975095505050505050565b600354600160701b90046001600160701b031681565b6000805460ff1615611b735760405162461bcd60e51b815260040161078d90614282565b6000805460ff191660019081178255546040516370a0823160e01b81526001600160a01b03909116906370a0823190611bb0903090600401613fa5565b60206040518083038186803b158015611bc857600080fd5b505afa158015611bdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c009190613d7a565b600354909150600090611c239083906001600160701b031663ffffffff61299516565b90506000806000611c343285611440565b9298509094509092509050611c498787612fed565b600054611c6690630100000090046001600160a01b031684612fed565b806002811115611c7257fe5b600554600160e01b900463ffffffff908116911614611d1f576001600160701b03821115611cb25760405162461bcd60e51b815260040161078d906144be565b600580546001600160701b0319166001600160701b038416179055806002811115611cd957fe5b6005601c6101000a81548163ffffffff021916908363ffffffff16021790555060008051602061477f83398151915281604051611d169190614135565b60405180910390a15b6002546040516370a0823160e01b8152611daa9187916001600160a01b03909116906370a0823190611d55903090600401613fa5565b60206040518083038186803b158015611d6d57600080fd5b505afa158015611d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da59190613d7a565b612b2b565b60015460025460405160008051602061473f83398151915292611de3926001600160a01b039182169291169088908b9033908e9061405b565b60405180910390a150506000805460ff1916905550919392505050565b600554600160e01b900463ffffffff1681565b60005460ff1615611e365760405162461bcd60e51b815260040161078d90614282565b6000805460ff19166001179055611e4d8386612fca565b611e578385612fed565b8015611ec45760405163d5b9979760e01b81526001600160a01b0384169063d5b9979790611e919033908990899088908890600401613fe2565b600060405180830381600087803b158015611eab57600080fd5b505af1158015611ebf573d6000803e3d6000fd5b505050505b6001546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611ef5903090600401613fa5565b60206040518083038186803b158015611f0d57600080fd5b505afa158015611f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f459190613d7a565b6002546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190611f7b903090600401613fa5565b60206040518083038186803b158015611f9357600080fd5b505afa158015611fa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fcb9190613d7a565b6003549091506001600160701b031682101580611ffa5750600354600160701b90046001600160701b03168110155b6120165760405162461bcd60e51b815260040161078d906141d1565b6003546001600160701b03168210156121e05760035460009061204a908390600160701b90046001600160701b0316612995565b905060008060008061205c32866111d8565b600354939750919550935091508490612084906001600160701b03168963ffffffff61299516565b11156120a25760405162461bcd60e51b815260040161078d906141d1565b6000546120bf90630100000090046001600160a01b031684612fca565b8160028111156120cb57fe5b600554600160e01b900463ffffffff908116911614612181576001600160701b0381111561210b5760405162461bcd60e51b815260040161078d906144be565b60058054600160701b600160e01b031916600160701b6001600160701b0384160217905581600281111561213b57fe5b6005601c6101000a81548163ffffffff021916908363ffffffff16021790555060008051602061477f833981519152826040516121789190614135565b60405180910390a15b60008051602061473f833981519152600260009054906101000a90046001600160a01b0316600160009054906101000a90046001600160a01b03168787338f6040516121d29695949392919061405b565b60405180910390a150505050505b600354600160701b90046001600160701b03168110156123a85760035460009061221a9084906001600160701b031663ffffffff61299516565b905060008060008061222c3286611440565b60035493975091955093509150849061225590600160701b90046001600160701b031688612995565b11156122735760405162461bcd60e51b815260040161078d906141d1565b60005461229090630100000090046001600160a01b031684612fed565b81600281111561229c57fe5b600554600160e01b900463ffffffff908116911614612349576001600160701b038111156122dc5760405162461bcd60e51b815260040161078d906144be565b600580546001600160701b0319166001600160701b03831617905581600281111561230357fe5b6005601c6101000a81548163ffffffff021916908363ffffffff16021790555060008051602061477f833981519152826040516123409190614135565b60405180910390a15b60008051602061473f833981519152600160009054906101000a90046001600160a01b0316600260009054906101000a90046001600160a01b03168787338f60405161239a9695949392919061405b565b60405180910390a150505050505b6123b0613010565b7f20e2e2c4fb8b1247816587eea997df07e3f4b5296c9538fab6d06233a160ec7b338689896040516123e59493929190613fb9565b60405180910390a150506000805460ff191690555050505050565b6002546001600160a01b031681565b4284101561242f5760405162461bcd60e51b815260040161078d906143ba565b600c546001600160a01b0388166000908152600d602090815260408083208054600181019091559051929392612490927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928d928d928d92918d91016140e3565b604051602081830303815290604052805190602001206040516020016124b7929190613f8a565b6040516020818303038152906040528051906020012090506000600182868686604051600081526020016040526040516124f49493929190614117565b6020604051602081039080840390855afa158015612516573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061254c5750886001600160a01b0316816001600160a01b0316145b6125685760405162461bcd60e51b815260040161078d90614433565b61257389898961292d565b505050505050505050565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205490565b6000805460ff16156125cd5760405162461bcd60e51b815260040161078d90614282565b6000805460ff191660011781556002546040516370a0823160e01b81526001600160a01b03909116906370a082319061260a903090600401613fa5565b60206040518083038186803b15801561262257600080fd5b505afa158015612636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265a9190613d7a565b60035490915060009061267e908390600160701b90046001600160701b0316612995565b9050600080600061268f32856111d8565b92985090945090925090506126a48787612fca565b6000546126c190630100000090046001600160a01b031684612fca565b8060028111156126cd57fe5b600554600160e01b900463ffffffff908116911614612783576001600160701b0382111561270d5760405162461bcd60e51b815260040161078d906144be565b60058054600160701b600160e01b031916600160701b6001600160701b0385160217905580600281111561273d57fe5b6005601c6101000a81548163ffffffff021916908363ffffffff16021790555060008051602061477f8339815191528160405161277a9190614135565b60405180910390a15b6001546040516370a0823160e01b815261280b916001600160a01b0316906370a08231906127b5903090600401613fa5565b60206040518083038186803b1580156127cd57600080fd5b505afa1580156127e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128059190613d7a565b86612b2b565b60025460015460405160008051602061473f83398151915292611de3926001600160a01b039182169291169088908b9033908e9061405b565b6005546001600160701b031681565b60105481565b60006111d36128666115b0565b6131d8565b600e546001600160a01b031681565b60115481565b6000806000806000806000612893613af6565b61289b6115b0565b905080600001519750806020015196508060400151955080606001519450806080015193508060a0015192508060c0015160028111156128d757fe5b91505090919293949596565b60045481565b60005460ff161561290c5760405162461bcd60e51b815260040161078d90614282565b6000805460ff19166001179055612921613010565b6000805460ff19169055565b6001600160a01b038084166000818152600b602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906129889085906140da565b60405180910390a3505050565b6000828211156129b75760405162461bcd60e51b815260040161078d906143e3565b50900390565b6000828201838110156129e25760405162461bcd60e51b815260040161078d90614517565b9392505050565b6000670de0b6b3a7640000612a04848463ffffffff612e6c16565b81612a0b57fe5b049392505050565b60006129e2826118de85670de0b6b3a764000063ffffffff612e6c16565b6103e88111612a525760405162461bcd60e51b815260040161078d906141fc565b6001600160a01b0382166000908152600a6020526040902054612a7b908263ffffffff6129bd16565b6001600160a01b0383166000908152600a6020526040902055600954612aa7908263ffffffff6129bd16565b6009556040516001600160a01b038316907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688590612ae59084906140da565b60405180910390a2816001600160a01b031660006001600160a01b031660008051602061475f83398151915283604051612b1f91906140da565b60405180910390a35050565b6001600160701b038211801590612b4957506001600160701b038111155b612b655760405162461bcd60e51b815260040161078d906144be565b600380546001600160701b03838116600160701b02600160701b600160e01b03199186166001600160701b0319909316929092171617905560005460ff620100009091041615612bb757612bb76132ca565b5050565b600080808460c001516002811115612bcf57fe5b1415612bea57612bdf848461335f565b915060019050612cba565b60018460c001516002811115612bfc57fe5b1415612c0c57612bdf8484613386565b6000612c2985606001518660a0015161299590919063ffffffff16565b90506000612c488660800151876040015161299590919063ffffffff16565b905081851015612c7357612c5c86866133a3565b93506002925080841115612c6e578093505b612cb7565b81851415612c875780935060009250612cb7565b612cb0612ca387612c9e888663ffffffff61299516565b61335f565b829063ffffffff6129bd16565b9350600192505b50505b9250929050565b600080808460c001516002811115612cd557fe5b1415612cf057612ce584846133de565b915060029050612cba565b60018460c001516002811115612d0257fe5b1415612dad576000612d258560400151866080015161299590919063ffffffff16565b90506000612d448660a00151876060015161299590919063ffffffff16565b905081851015612d6f57612d5886866133fd565b93506001925080841115612d6a578093505b612da6565b81851415612d835780935060009250612da6565b612d9f612ca387612d9a888663ffffffff61299516565b6133de565b9350600292505b5050612cba565b612db7848461342f565b946002945092505050565b60028160c001516002811115612dd457fe5b1415612e1357612e098160600151612dfd8360800151846040015161299590919063ffffffff16565b8351602085015161344e565b60a0820152612e69565b60018160c001516002811115612e2557fe5b1415612e6957612e638160400151612e4e8360a00151846060015161299590919063ffffffff16565b8351612e5990613574565b846020015161344e565b60808201525b50565b600082612e7b5750600061061f565b82820282848281612e8857fe5b04146129e25760405162461bcd60e51b815260040161078d906145aa565b6000808211612ec75760405162461bcd60e51b815260040161078d90614392565b818381612a0b57fe5b600080612edd8484612ea6565b905082810284038015612ef55750600101905061061f565b50905061061f565b6001600160a01b0382166000908152600a6020526040902054612f26908263ffffffff61299516565b6001600160a01b0383166000908152600a6020526040902055600954612f52908263ffffffff61299516565b6009556040516001600160a01b038316907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca590612f909084906140da565b60405180910390a260006001600160a01b0316826001600160a01b031660008051602061475f83398151915283604051612b1f91906140da565b8015612bb757600154612bb7906001600160a01b0316838363ffffffff61359516565b8015612bb757600254612bb7906001600160a01b0316838363ffffffff61359516565b6001546040516370a0823160e01b81526000916001600160a01b0316906370a0823190613041903090600401613fa5565b60206040518083038186803b15801561305957600080fd5b505afa15801561306d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130919190613d7a565b6002546040516370a0823160e01b81529192506000916001600160a01b03909116906370a08231906130c7903090600401613fa5565b60206040518083038186803b1580156130df57600080fd5b505afa1580156130f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131179190613d7a565b90506001600160701b03821180159061313757506001600160701b038111155b6131535760405162461bcd60e51b815260040161078d906144be565b6003546001600160701b0316821461318157600380546001600160701b0319166001600160701b0384161790555b600354600160701b90046001600160701b031681146131bf5760038054600160701b600160e01b031916600160701b6001600160701b038416021790555b60005462010000900460ff1615612bb757612bb76132ca565b600060028260c0015160028111156131ec57fe5b141561327757606082015160a08301516000916132229161321891906118de908063ffffffff612e6c16565b8460600151612a13565b905061325f6132358460200151836129e9565b602085015161325390670de0b6b3a76400009063ffffffff61299516565b9063ffffffff6129bd16565b905061326f836000015182612a13565b91505061074a565b604082015160808301516000916132a79161329d91906118de908063ffffffff612e6c16565b8460400151612a13565b90506132ba6132358460200151836129e9565b905061326f8360000151826129e9565b60035463ffffffff42811691600160e01b900481168203908116158015906132fc57506003546001600160701b031615155b80156133195750600354600160701b90046001600160701b031615155b15613339578063ffffffff1661332d612859565b60048054919092020190555b506003805463ffffffff909216600160e01b026001600160e01b03909216919091179055565b60006129e2836080015184608001518461337c8760000151613574565b87602001516135f0565b60006129e2836080015184604001518461337c8760000151613574565b60006129e28360a001516133c48486606001516129bd90919063ffffffff16565b606086015186516133d490613574565b876020015161388d565b60006129e28360a001518460a0015184866000015187602001516135f0565b60006129e2836080015161341e8486604001516129bd90919063ffffffff16565b60408601518651602088015161388d565b60006129e28360a00151846060015184866000015187602001516135f0565b6000816134765761346f61346284866129e9565b869063ffffffff6129bd16565b905061356c565b846134835750600061356c565b600080613499600485028663ffffffff612e6c16565b9050806134b057670de0b6b3a76400009150613530565b8581878302816134bc57fe5b0414156134f7576134f06134eb6ec097ce7bc90715b34b9f1000000000613253848a028b63ffffffff612ea616565b613966565b9150613530565b61352d6134eb6ec097ce7bc90715b34b9f100000000061325389613521868d63ffffffff612ea616565b9063ffffffff612e6c16565b91505b600061355a670de0b6b3a7640000613253613551868363ffffffff61299516565b88600202612a13565b905061356688826129e9565b93505050505b949350505050565b600061061f6ec097ce7bc90715b34b9f10000000008363ffffffff612ea616565b6135eb8363a9059cbb60e01b84846040516024016135b4929190614095565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261399d565b505050565b60008086116136115760405162461bcd60e51b815260040161078d9061425a565b8361361e57506000613884565b8161364b578461362e84866129e9565b116136425761363d83856129e9565b613644565b845b9050613884565b670de0b6b3a764000082141561370b5760008061366e858763ffffffff612e6c16565b90508061367e57600091506136d7565b86818883028161368a57fe5b0414156136ba576136b36136a4898063ffffffff612e6c16565b8289029063ffffffff612ea616565b91506136d7565b6136d4886118de8761352183838c8e63ffffffff612e6c16565b91505b6137026136f283670de0b6b3a764000063ffffffff6129bd16565b6118de898563ffffffff612e6c16565b92505050613884565b6000613738613720858763ffffffff612e6c16565b613253896135218a6118de898463ffffffff612e6c16565b9050600061375887613521670de0b6b3a76400008763ffffffff61299516565b9050600082821061376e57508190036000613774565b50810360015b61378c82670de0b6b3a764000063ffffffff612ea616565b915060006137c36137b06004613521670de0b6b3a76400008a63ffffffff61299516565b6137be8c6135218a8f6129e9565b6129e9565b90506137dc6134eb82613253868063ffffffff612e6c16565b905060006137fd6002613521670de0b6b3a76400008a63ffffffff61299516565b90506000831561383b57613817838663ffffffff61299516565b9050806138365760405162461bcd60e51b815260040161078d906144e0565b61384e565b61384b858463ffffffff6129bd16565b90505b600061385a8284613a5a565b90508b811115613874576000975050505050505050613884565b8b03965061388495505050505050565b95945050505050565b60008086116138ae5760405162461bcd60e51b815260040161078d9061425a565b60006138d06138c3878763ffffffff61299516565b859063ffffffff612e6c16565b9050826138f7576138ef81670de0b6b3a764000063ffffffff612ea616565b915050613884565b6000613916613910886118de8b8063ffffffff612e6c16565b87612a13565b9050600061392485836129e9565b90506139596ec097ce7bc90715b34b9f10000000006118de8561352185613253670de0b6b3a76400008c63ffffffff61299516565b9998505050505050505050565b80600160028204015b818110156139975780915060028182858161398657fe5b04018161398f57fe5b04905061396f565b50919050565b60006060836001600160a01b0316836040516139b99190613eb9565b6000604051808303816000865af19150503d80600081146139f6576040519150601f19603f3d011682016040523d82523d6000602084013e6139fb565b606091505b509150915081613a1d5760405162461bcd60e51b815260040161078d90614336565b805115613a545780806020019051810190613a389190613d5e565b613a545760405162461bcd60e51b815260040161078d9061453a565b50505050565b60006129e28261193a85670de0b6b3a764000063ffffffff612e6c16565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613ab957805160ff1916838001178555613ae6565b82800160010185558215613ae6579182015b82811115613ae6578251825591602001919060010190613acb565b50613af2929150613b3d565b5090565b6040518060e0016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160006002811115613b3857fe5b905290565b61112e91905b80821115613af25760008155600101613b43565b80356001600160a01b038116811461061f57600080fd5b60008083601f840112613b7f578182fd5b50813567ffffffffffffffff811115613b96578182fd5b602083019150836020828501011115612cba57600080fd5b600060208284031215613bbf578081fd5b6129e28383613b57565b60008060408385031215613bdb578081fd5b613be58484613b57565b9150613bf48460208501613b57565b90509250929050565b600080600080600080600080610100898b031215613c19578384fd5b613c238a8a613b57565b9750613c328a60208b01613b57565b9650613c418a60408b01613b57565b955060608901359450613c578a60808b01613b57565b935060a0890135925060c0890135915060e0890135613c7581614721565b809150509295985092959890939650565b600080600060608486031215613c9a578283fd5b8335613ca58161470c565b92506020840135613cb58161470c565b929592945050506040919091013590565b600080600080600080600060e0888a031215613ce0578283fd5b613cea8989613b57565b9650613cf98960208a01613b57565b955060408801359450606088013593506080880135613d178161472f565b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215613d46578182fd5b613d508484613b57565b946020939093013593505050565b600060208284031215613d6f578081fd5b81516129e281614721565b600060208284031215613d8b578081fd5b5051919050565b600080600080600080600060c0888a031215613dac578283fd5b873596506020880135613dbe8161470c565b95506040880135945060608801359350608088013567ffffffffffffffff811115613de7578384fd5b613df38a828b01613b6e565b989b979a5095989497959660a090950135949350505050565b600080600080600060808688031215613e23578081fd5b8535945060208601359350613e3b8760408801613b57565b9250606086013567ffffffffffffffff811115613e56578182fd5b613e6288828901613b6e565b969995985093965092949392505050565b600060208284031215613e84578081fd5b81516129e28161472f565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008251613ecb8184602087016146e0565b9190910192915050565b6000808354600180821660008114613ef45760018114613f0b57613f3a565b60ff198316865260028304607f1686019350613f3a565b600283048786526020808720875b83811015613f325781548a820152908501908201613f19565b505050860193505b509195945050505050565b60008451613f578184602089016146e0565b8451908301613f6a8282602089016146e0565b8451918101613f7d8382602089016146e0565b9091019695505050505050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b600060018060a01b038716825285602083015284604083015260806060830152614010608083018486613e8f565b979650505050505050565b600060018060a01b038816825286602083015285604083015284606083015260a0608083015261404f60a083018486613e8f565b98975050505050505050565b6001600160a01b0396871681529486166020860152604085019390935260608401919091528316608083015290911660a082015260c00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b901515815260200190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b93845260ff9290921660208401526040830152606082015260800190565b602081016003831061414357fe5b91905290565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b60006020825282518060208401526141948160408501602087016146e0565b601f01601f19169190910160400192915050565b6020808252600f908201526e1114d417d253925512505312569151608a1b604082015260600190565b60208082526011908201527011931054d217d313d05397d19052531151607a1b604082015260600190565b60208082526016908201527509a929ca8be829a9eaa9ca8be9c9ea8be8a9c9eaa8e960531b604082015260600190565b60208082526014908201527308298989eae829c868abe9c9ea8be8a9c9eaa8e960631b604082015260600190565b6020808252600e908201526d5441524745545f49535f5a45524f60901b604082015260600190565b60208082526009908201526814915153951490539560ba1b604082015260600190565b60208082526015908201527414d1531317d09050d2d7d393d517d0531313d5d151605a1b604082015260600190565b60208082526011908201527016915493d7d45553d51157d05353d55395607a1b604082015260600190565b6020808252601a908201527f424153455f51554f54455f43414e5f4e4f545f42455f53414d45000000000000604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252600d908201526c1393d7d09054d157d253941555609a1b604082015260600190565b6020808252600e908201526d2224ab24a224a723afa2a92927a960911b604082015260600190565b6020808252600f908201526e1114d417d3140e8811561412549151608a1b604082015260600190565b60208082526009908201526829aaa12fa2a92927a960b91b604082015260600190565b6020808252601390820152720ae92a89088a482aebe9c9ea8be8a9c9eaa8e9606b1b604082015260600190565b60208082526019908201527f4453505f4c503a20494e56414c49445f5349474e415455524500000000000000604082015260600190565b6020808252600e908201526d08898a0be9c9ea8be8a9c9eaa8e960931b604082015260600190565b6020808252601290820152710848298829c868abe9c9ea8be8a9c9eaa8e960731b604082015260600190565b6020808252600890820152674f564552464c4f5760c01b604082015260600190565b6020808252601f908201527f576f726c6465734d6174683a2073686f756c64206e6f74206265207a65726f00604082015260600190565b60208082526009908201526820a2222fa2a92927a960b91b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252600c908201526b1512535157d156141254915160a21b604082015260600190565b60208082526009908201526826aaa62fa2a92927a960b91b604082015260600190565b600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015261461860c08401516146d5565b60c083015292915050565b6001600160701b0391909116815260200190565b918252602082015260400190565b848152602081018490526080810161465c846146d5565b604083015282606083015295945050505050565b9283526020830191909152604082015260600190565b968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b63ffffffff91909116815260200190565b60ff91909116815260200190565b806003811061074a57fe5b60005b838110156146fb5781810151838201526020016146e3565b83811115613a545750506000910152565b6001600160a01b0381168114612e6957600080fd5b8015158114612e6957600080fd5b60ff81168114612e6957600080fdfec2cabab55d7789bb2cd7d88eb57b8ccf65ca19bbc0ddcd956de5a1ad2fbb154fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efdf176ad18be4f9f32efaa32f06e9d1175476504739a745f1399a6d3fa4b75917a2646970667358221220251156152aa7b30799334c5f2920c88d96f87b78a5037e084230c7931269619864736f6c63430006090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102955760003560e01c80637d72150411610167578063d4b97046116100ce578063ee27c68911610087578063ee27c6891461053d578063f6b06e7014610545578063f811d6921461054d578063fd1ed7e914610555578063fe24cb7f14610570578063fff6cae91461057857610295565b8063d4b97046146104ec578063d505accf146104f4578063dd62ed3e14610507578063dd93f59a1461051a578063e539ef491461052d578063ec2fd46d1461053557610295565b8063ab44a7a311610120578063ab44a7a31461049b578063b56ceaa6146104a3578063bbf5ce78146104b6578063bd6015b4146104be578063bf357dae146104d1578063d0a494e4146104d957610295565b80637d7215041461043b5780637ecebe0014610443578063880a4d871461045657806395d89b411461046b578063a382d1b914610473578063a9059cbb1461048857610295565b8063440966091161020b57806366410a21116101c457806366410a21146103cd57806370a08231146103f057806371f9100c1461040357806373d74cf81461040b57806377f586571461041357806379a048761461042857610295565b8063440966091461036b5780634a248d2a1461037e5780634c85b425146103865780635039972a146103a857806354fd4d50146103bd57806365f6fcbb146103c557610295565b80632df6cb481161025d5780632df6cb481461031357806330adf81f1461031b578063313ce5671461032357806336223ce9146103385780633644e5151461034e5780634322ec831461035657610295565b806306fdde031461029a578063095ea7b3146102b857806317101940146102d857806318160ddd146102eb57806323b872dd14610300575b600080fd5b6102a2610580565b6040516102af9190614175565b60405180910390f35b6102cb6102c6366004613d34565b61060e565b6040516102af91906140cf565b6102a26102e6366004613bae565b610625565b6102f361074f565b6040516102af91906140da565b6102cb61030e366004613c86565b610755565b6102cb6108d9565b6102f36108e8565b61032b61090c565b6040516102af91906146c7565b610340610915565b6040516102af929190614637565b6102f3610930565b61035e610936565b6040516102af9190613fa5565b610340610379366004613bae565b61094c565b61035e6109d7565b610399610394366004613bae565b6109e6565b6040516102af93929190614670565b6103bb6103b6366004613bfd565b610dd0565b005b6102a261110d565b6102f3611131565b6103e06103db366004613d34565b6111d8565b6040516102af9493929190614645565b6102f36103fe366004613bae565b6112c6565b6102f36112e1565b6103bb61132d565b61041b61142a565b6040516102af9190614623565b6103e0610436366004613d34565b611440565b61041b611521565b6102f3610451366004613bae565b611530565b61045e611542565b6040516102af91906146b6565b6102a2611555565b61047b6115b0565b6040516102af91906145cd565b6102cb610496366004613d34565b61163d565b6102f361170c565b6103406104b1366004613d92565b611712565b61041b611b39565b6102f36104cc366004613bae565b611b4f565b61045e611e00565b6103bb6104e7366004613e0c565b611e13565b61035e612400565b6103bb610502366004613cc6565b61240f565b6102f3610515366004613bc9565b61257e565b6102f3610528366004613bae565b6125a9565b61041b612844565b6102f3612853565b6102f3612859565b61035e61286b565b6102f361287a565b61055d612880565b6040516102af9796959493929190614686565b6102f36128e3565b6103bb6128e9565b6008805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106065780601f106105db57610100808354040283529160200191610606565b820191906000526020600020905b8154815290600101906020018083116105e957829003601f168201915b505050505081565b600061061b33848461292d565b5060015b92915050565b604080518082018252601081526f181899199a1a9b1b9c1cb0b131b232b360811b6020820152815160088082528184019093526060926001600160a01b0385169291849160208201818036833701905050905060005b6004811015610744578260048583600c016020811061069657fe5b1a60f81b6001600160f81b031916901c60f81c60ff16815181106106b657fe5b602001015160f81c60f81b8282600202815181106106d057fe5b60200101906001600160f81b031916908160001a905350828482600c01602081106106f757fe5b825191901a600f1690811061070857fe5b602001015160f81c60f81b82826002026001018151811061072557fe5b60200101906001600160f81b031916908160001a90535060010161067b565b50925050505b919050565b60095481565b6001600160a01b0383166000908152600a60205260408120548211156107965760405162461bcd60e51b815260040161078d90614492565b60405180910390fd5b6001600160a01b0384166000908152600b602090815260408083203384529091529020548211156107d95760405162461bcd60e51b815260040161078d9061422c565b6001600160a01b0384166000908152600a6020526040902054610802908363ffffffff61299516565b6001600160a01b038086166000908152600a60205260408082209390935590851681522054610837908363ffffffff6129bd16565b6001600160a01b038085166000908152600a60209081526040808320949094559187168152600b8252828120338252909152205461087b908363ffffffff61299516565b6001600160a01b038086166000818152600b6020908152604080832033845290915290819020939093559151908516919060008051602061475f833981519152906108c79086906140da565b60405180910390a35060019392505050565b60005462010000900460ff1681565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60075460ff1681565b6003546001600160701b0380821692600160701b9092041690565b600c5481565b600054630100000090046001600160a01b031681565b600f54600e54604051638198edbf60e01b81526000916001600160a01b031690638198edbf90610980908690600401613fa5565b60206040518083038186803b15801561099857600080fd5b505afa1580156109ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d09190613d7a565b9050915091565b6001546001600160a01b031681565b600080548190819060ff1615610a0e5760405162461bcd60e51b815260040161078d90614282565b6000805460ff191660019081178255546040516370a0823160e01b81526001600160a01b03909116906370a0823190610a4b903090600401613fa5565b60206040518083038186803b158015610a6357600080fd5b505afa158015610a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9b9190613d7a565b6002546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190610ad1903090600401613fa5565b60206040518083038186803b158015610ae957600080fd5b505afa158015610afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b219190613d7a565b6003549091506001600160701b0380821691600160701b900416610b4b848363ffffffff61299516565b9550610b5d838263ffffffff61299516565b945060008611610b7f5760405162461bcd60e51b815260040161078d9061436b565b600954610c565760008311610ba65760405162461bcd60e51b815260040161078d906142d4565b610bb2846011546129e9565b8310610bbe5783610bca565b610bca83601154612a13565b600580546001600160701b0319166001600160701b038316179055601154909750610bf69088906129e9565b6005600e6101000a8154816001600160701b0302191690836001600160701b031602179055506107d18711610c3d5760405162461bcd60e51b815260040161078d906141fc565b610c4a60006103e9612a31565b6103e987039650610d52565b600082118015610c665750600081115b15610d52576000610c778784612a13565b90506000610c858784612a13565b90506000828210610c965782610c98565b815b9050610ca6600954826129e9565b600554909a50610cdb90610cc3906001600160701b0316836129e9565b6005546001600160701b03169063ffffffff6129bd16565b600580546001600160701b0319166001600160701b039283161790819055610d2891610d0f91600160701b900416836129e9565b600554600160701b90046001600160701b0316906129bd565b6005600e6101000a8154816001600160701b0302191690836001600160701b031602179055505050505b610d5c8888612a31565b610d668484612b2b565b6001600160a01b0388166000908152600a6020526040908190205490517f1c172440bdebb59cd92a7f08f4227903a3305ab6f880cb25f93eddb66843a10291610db2918b918b916140ae565b60405180910390a150506000805460ff191690555092949193509150565b600054610100900460ff1615610df85760405162461bcd60e51b815260040161078d906141a8565b6000805461ff0019166101001790556001600160a01b038781169087161415610e335760405162461bcd60e51b815260040161078d906142ff565b600180546001600160a01b03808a166001600160a01b03199283161790925560028054928916929091169190911790558215801590610e8157506ec097ce7bc90715b34b9f10000000008311155b610e8a57600080fd5b6011839055670de0b6b3a7640000821115610ea457600080fd5b6010829055600f859055600e80546001600160a01b038087166001600160a01b0319909216919091179091556000805483158015620100000262ff000019948d166301000000026301000000600160b81b03199093169290921793909316179055610f2757600380546001600160e01b03164263ffffffff16600160e01b021790555b60408051808201825260018152605f60f81b602080830191909152825180840190935260038352620444c560ec1b90830152908082610f6530610625565b604051602001610f7793929190613f45565b60405160208183030381529060405260089080519060200190610f9b929190613a78565b50604080518082019091526003808252620444c560ec1b6020909201918252610fc691600691613a78565b50600160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561101557600080fd5b505afa158015611029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104d9190613e73565b6007805460ff191660ff9290921691909117905560405146907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f9061109490600890613ed5565b60408051918290038220828201825260018352603160f81b60209384015290516110e593927fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6918691309101614149565b60408051601f198184030181529190528051602090910120600c555050505050505050505050565b60408051808201909152600981526844535020312e302e3160b81b60208201525b90565b6003546001546040516370a0823160e01b81526000926111d3926001600160701b03909116916001600160a01b03909116906370a0823190611177903090600401613fa5565b60206040518083038186803b15801561118f57600080fd5b505afa1580156111a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c79190613d7a565b9063ffffffff61299516565b905090565b6000806000806111e6613af6565b6111ee6115b0565b90506111fa8187612bbb565b600f54600e54604051638198edbf60e01b8152939850919550916000916001600160a01b031690638198edbf90611235908c90600401613fa5565b60206040518083038186803b15801561124d57600080fd5b505afa158015611261573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112859190613d7a565b905061129187826129e9565b95506112b1866111c76112a48a866129e9565b8a9063ffffffff61299516565b96508260a00151935050505092959194509250565b6001600160a01b03166000908152600a602052604090205490565b6003546002546040516370a0823160e01b81526000926111d392600160701b9091046001600160701b0316916001600160a01b03909116906370a0823190611177903090600401613fa5565b60055463ffffffff600160e01b90910416600214801561135d57506005546003546001600160701b039182169116105b156113a557600580546003546001600160701b03808216600160701b600160e01b0390931692909217600160701b600160e01b031916600160701b9182900492909216021790555b60055463ffffffff600160e01b9091041660011480156113e057506005546003546001600160701b03600160701b9283900481169290910416105b1561142857600580546003546001600160701b03808216600160701b600160e01b0390931692909217600160701b600160e01b031916600160701b9182900492909216021790555b565b600554600160701b90046001600160701b031681565b60008060008061144e613af6565b6114566115b0565b90506114628187612cc1565b600f54600e54604051638198edbf60e01b8152939850919550916000916001600160a01b031690638198edbf9061149d908c90600401613fa5565b60206040518083038186803b1580156114b557600080fd5b505afa1580156114c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ed9190613d7a565b90506114f987826129e9565b955061150c866111c76112a48a866129e9565b96508260800151935050505092959194509250565b6003546001600160701b031681565b600d6020526000908152604090205481565b600354600160e01b900463ffffffff1681565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106065780601f106105db57610100808354040283529160200191610606565b6115b8613af6565b601154815260105460208201526003546001600160701b038082166040840152600160701b918290048116606084015260055480821660808501529182041660a0830152600160e01b900463ffffffff16600281111561161457fe5b8160c00190600281111561162457fe5b9081600281111561163157fe5b90525061112e81612dc2565b336000908152600a602052604081205482111561166c5760405162461bcd60e51b815260040161078d90614492565b336000908152600a602052604090205461168c908363ffffffff61299516565b336000908152600a6020526040808220929092556001600160a01b038516815220546116be908363ffffffff6129bd16565b6001600160a01b0384166000818152600a602052604090819020929092559051339060008051602061475f833981519152906116fb9086906140da565b60405180910390a350600192915050565b600f5481565b60008054819060ff16156117385760405162461bcd60e51b815260040161078d90614282565b6000805460ff19166001179055428310156117655760405162461bcd60e51b815260040161078d90614584565b336000908152600a60205260409020548911156117945760405162461bcd60e51b815260040161078d9061446a565b6001600160a01b0388163014156117bd5760405162461bcd60e51b815260040161078d906142a5565b6001546040516370a0823160e01b81526000916001600160a01b0316906370a08231906117ee903090600401613fa5565b60206040518083038186803b15801561180657600080fd5b505afa15801561181a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183e9190613d7a565b6002546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190611874903090600401613fa5565b60206040518083038186803b15801561188c57600080fd5b505afa1580156118a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c49190613d7a565b6009549091506118ea816118de858f63ffffffff612e6c16565b9063ffffffff612ea616565b9450611900816118de848f63ffffffff612e6c16565b935061195e6119468261193a8f600560009054906101000a90046001600160701b03166001600160701b0316612e6c90919063ffffffff16565b9063ffffffff612ed016565b6005546001600160701b03169063ffffffff61299516565b600560006101000a8154816001600160701b0302191690836001600160701b031602179055506119d56119bc8261193a8f6005600e9054906101000a90046001600160701b03166001600160701b0316612e6c90919063ffffffff16565b600554600160701b90046001600160701b031690612995565b6005600e6101000a8154816001600160701b0302191690836001600160701b03160217905550898510158015611a0b5750888410155b611a275760405162461bcd60e51b815260040161078d90614406565b611a31338d612efd565b611a3b8b86612fca565b611a458b85612fed565b611a4d613010565b8615611abc578a6001600160a01b0316632411d338338e88888d8d6040518763ffffffff1660e01b8152600401611a899695949392919061401b565b600060405180830381600087803b158015611aa357600080fd5b505af1158015611ab7573d6000803e3d6000fd5b505050505b7f55caccde83781f39bfc1296eff45655b6496729443a7d48958b18b3b685600a5338c8e600a6000336001600160a01b03166001600160a01b0316815260200190815260200160002054604051611b169493929190613fb9565b60405180910390a150506000805460ff1916905550909890975095505050505050565b600354600160701b90046001600160701b031681565b6000805460ff1615611b735760405162461bcd60e51b815260040161078d90614282565b6000805460ff191660019081178255546040516370a0823160e01b81526001600160a01b03909116906370a0823190611bb0903090600401613fa5565b60206040518083038186803b158015611bc857600080fd5b505afa158015611bdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c009190613d7a565b600354909150600090611c239083906001600160701b031663ffffffff61299516565b90506000806000611c343285611440565b9298509094509092509050611c498787612fed565b600054611c6690630100000090046001600160a01b031684612fed565b806002811115611c7257fe5b600554600160e01b900463ffffffff908116911614611d1f576001600160701b03821115611cb25760405162461bcd60e51b815260040161078d906144be565b600580546001600160701b0319166001600160701b038416179055806002811115611cd957fe5b6005601c6101000a81548163ffffffff021916908363ffffffff16021790555060008051602061477f83398151915281604051611d169190614135565b60405180910390a15b6002546040516370a0823160e01b8152611daa9187916001600160a01b03909116906370a0823190611d55903090600401613fa5565b60206040518083038186803b158015611d6d57600080fd5b505afa158015611d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da59190613d7a565b612b2b565b60015460025460405160008051602061473f83398151915292611de3926001600160a01b039182169291169088908b9033908e9061405b565b60405180910390a150506000805460ff1916905550919392505050565b600554600160e01b900463ffffffff1681565b60005460ff1615611e365760405162461bcd60e51b815260040161078d90614282565b6000805460ff19166001179055611e4d8386612fca565b611e578385612fed565b8015611ec45760405163d5b9979760e01b81526001600160a01b0384169063d5b9979790611e919033908990899088908890600401613fe2565b600060405180830381600087803b158015611eab57600080fd5b505af1158015611ebf573d6000803e3d6000fd5b505050505b6001546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611ef5903090600401613fa5565b60206040518083038186803b158015611f0d57600080fd5b505afa158015611f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f459190613d7a565b6002546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190611f7b903090600401613fa5565b60206040518083038186803b158015611f9357600080fd5b505afa158015611fa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fcb9190613d7a565b6003549091506001600160701b031682101580611ffa5750600354600160701b90046001600160701b03168110155b6120165760405162461bcd60e51b815260040161078d906141d1565b6003546001600160701b03168210156121e05760035460009061204a908390600160701b90046001600160701b0316612995565b905060008060008061205c32866111d8565b600354939750919550935091508490612084906001600160701b03168963ffffffff61299516565b11156120a25760405162461bcd60e51b815260040161078d906141d1565b6000546120bf90630100000090046001600160a01b031684612fca565b8160028111156120cb57fe5b600554600160e01b900463ffffffff908116911614612181576001600160701b0381111561210b5760405162461bcd60e51b815260040161078d906144be565b60058054600160701b600160e01b031916600160701b6001600160701b0384160217905581600281111561213b57fe5b6005601c6101000a81548163ffffffff021916908363ffffffff16021790555060008051602061477f833981519152826040516121789190614135565b60405180910390a15b60008051602061473f833981519152600260009054906101000a90046001600160a01b0316600160009054906101000a90046001600160a01b03168787338f6040516121d29695949392919061405b565b60405180910390a150505050505b600354600160701b90046001600160701b03168110156123a85760035460009061221a9084906001600160701b031663ffffffff61299516565b905060008060008061222c3286611440565b60035493975091955093509150849061225590600160701b90046001600160701b031688612995565b11156122735760405162461bcd60e51b815260040161078d906141d1565b60005461229090630100000090046001600160a01b031684612fed565b81600281111561229c57fe5b600554600160e01b900463ffffffff908116911614612349576001600160701b038111156122dc5760405162461bcd60e51b815260040161078d906144be565b600580546001600160701b0319166001600160701b03831617905581600281111561230357fe5b6005601c6101000a81548163ffffffff021916908363ffffffff16021790555060008051602061477f833981519152826040516123409190614135565b60405180910390a15b60008051602061473f833981519152600160009054906101000a90046001600160a01b0316600260009054906101000a90046001600160a01b03168787338f60405161239a9695949392919061405b565b60405180910390a150505050505b6123b0613010565b7f20e2e2c4fb8b1247816587eea997df07e3f4b5296c9538fab6d06233a160ec7b338689896040516123e59493929190613fb9565b60405180910390a150506000805460ff191690555050505050565b6002546001600160a01b031681565b4284101561242f5760405162461bcd60e51b815260040161078d906143ba565b600c546001600160a01b0388166000908152600d602090815260408083208054600181019091559051929392612490927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928d928d928d92918d91016140e3565b604051602081830303815290604052805190602001206040516020016124b7929190613f8a565b6040516020818303038152906040528051906020012090506000600182868686604051600081526020016040526040516124f49493929190614117565b6020604051602081039080840390855afa158015612516573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061254c5750886001600160a01b0316816001600160a01b0316145b6125685760405162461bcd60e51b815260040161078d90614433565b61257389898961292d565b505050505050505050565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205490565b6000805460ff16156125cd5760405162461bcd60e51b815260040161078d90614282565b6000805460ff191660011781556002546040516370a0823160e01b81526001600160a01b03909116906370a082319061260a903090600401613fa5565b60206040518083038186803b15801561262257600080fd5b505afa158015612636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265a9190613d7a565b60035490915060009061267e908390600160701b90046001600160701b0316612995565b9050600080600061268f32856111d8565b92985090945090925090506126a48787612fca565b6000546126c190630100000090046001600160a01b031684612fca565b8060028111156126cd57fe5b600554600160e01b900463ffffffff908116911614612783576001600160701b0382111561270d5760405162461bcd60e51b815260040161078d906144be565b60058054600160701b600160e01b031916600160701b6001600160701b0385160217905580600281111561273d57fe5b6005601c6101000a81548163ffffffff021916908363ffffffff16021790555060008051602061477f8339815191528160405161277a9190614135565b60405180910390a15b6001546040516370a0823160e01b815261280b916001600160a01b0316906370a08231906127b5903090600401613fa5565b60206040518083038186803b1580156127cd57600080fd5b505afa1580156127e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128059190613d7a565b86612b2b565b60025460015460405160008051602061473f83398151915292611de3926001600160a01b039182169291169088908b9033908e9061405b565b6005546001600160701b031681565b60105481565b60006111d36128666115b0565b6131d8565b600e546001600160a01b031681565b60115481565b6000806000806000806000612893613af6565b61289b6115b0565b905080600001519750806020015196508060400151955080606001519450806080015193508060a0015192508060c0015160028111156128d757fe5b91505090919293949596565b60045481565b60005460ff161561290c5760405162461bcd60e51b815260040161078d90614282565b6000805460ff19166001179055612921613010565b6000805460ff19169055565b6001600160a01b038084166000818152600b602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906129889085906140da565b60405180910390a3505050565b6000828211156129b75760405162461bcd60e51b815260040161078d906143e3565b50900390565b6000828201838110156129e25760405162461bcd60e51b815260040161078d90614517565b9392505050565b6000670de0b6b3a7640000612a04848463ffffffff612e6c16565b81612a0b57fe5b049392505050565b60006129e2826118de85670de0b6b3a764000063ffffffff612e6c16565b6103e88111612a525760405162461bcd60e51b815260040161078d906141fc565b6001600160a01b0382166000908152600a6020526040902054612a7b908263ffffffff6129bd16565b6001600160a01b0383166000908152600a6020526040902055600954612aa7908263ffffffff6129bd16565b6009556040516001600160a01b038316907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688590612ae59084906140da565b60405180910390a2816001600160a01b031660006001600160a01b031660008051602061475f83398151915283604051612b1f91906140da565b60405180910390a35050565b6001600160701b038211801590612b4957506001600160701b038111155b612b655760405162461bcd60e51b815260040161078d906144be565b600380546001600160701b03838116600160701b02600160701b600160e01b03199186166001600160701b0319909316929092171617905560005460ff620100009091041615612bb757612bb76132ca565b5050565b600080808460c001516002811115612bcf57fe5b1415612bea57612bdf848461335f565b915060019050612cba565b60018460c001516002811115612bfc57fe5b1415612c0c57612bdf8484613386565b6000612c2985606001518660a0015161299590919063ffffffff16565b90506000612c488660800151876040015161299590919063ffffffff16565b905081851015612c7357612c5c86866133a3565b93506002925080841115612c6e578093505b612cb7565b81851415612c875780935060009250612cb7565b612cb0612ca387612c9e888663ffffffff61299516565b61335f565b829063ffffffff6129bd16565b9350600192505b50505b9250929050565b600080808460c001516002811115612cd557fe5b1415612cf057612ce584846133de565b915060029050612cba565b60018460c001516002811115612d0257fe5b1415612dad576000612d258560400151866080015161299590919063ffffffff16565b90506000612d448660a00151876060015161299590919063ffffffff16565b905081851015612d6f57612d5886866133fd565b93506001925080841115612d6a578093505b612da6565b81851415612d835780935060009250612da6565b612d9f612ca387612d9a888663ffffffff61299516565b6133de565b9350600292505b5050612cba565b612db7848461342f565b946002945092505050565b60028160c001516002811115612dd457fe5b1415612e1357612e098160600151612dfd8360800151846040015161299590919063ffffffff16565b8351602085015161344e565b60a0820152612e69565b60018160c001516002811115612e2557fe5b1415612e6957612e638160400151612e4e8360a00151846060015161299590919063ffffffff16565b8351612e5990613574565b846020015161344e565b60808201525b50565b600082612e7b5750600061061f565b82820282848281612e8857fe5b04146129e25760405162461bcd60e51b815260040161078d906145aa565b6000808211612ec75760405162461bcd60e51b815260040161078d90614392565b818381612a0b57fe5b600080612edd8484612ea6565b905082810284038015612ef55750600101905061061f565b50905061061f565b6001600160a01b0382166000908152600a6020526040902054612f26908263ffffffff61299516565b6001600160a01b0383166000908152600a6020526040902055600954612f52908263ffffffff61299516565b6009556040516001600160a01b038316907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca590612f909084906140da565b60405180910390a260006001600160a01b0316826001600160a01b031660008051602061475f83398151915283604051612b1f91906140da565b8015612bb757600154612bb7906001600160a01b0316838363ffffffff61359516565b8015612bb757600254612bb7906001600160a01b0316838363ffffffff61359516565b6001546040516370a0823160e01b81526000916001600160a01b0316906370a0823190613041903090600401613fa5565b60206040518083038186803b15801561305957600080fd5b505afa15801561306d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130919190613d7a565b6002546040516370a0823160e01b81529192506000916001600160a01b03909116906370a08231906130c7903090600401613fa5565b60206040518083038186803b1580156130df57600080fd5b505afa1580156130f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131179190613d7a565b90506001600160701b03821180159061313757506001600160701b038111155b6131535760405162461bcd60e51b815260040161078d906144be565b6003546001600160701b0316821461318157600380546001600160701b0319166001600160701b0384161790555b600354600160701b90046001600160701b031681146131bf5760038054600160701b600160e01b031916600160701b6001600160701b038416021790555b60005462010000900460ff1615612bb757612bb76132ca565b600060028260c0015160028111156131ec57fe5b141561327757606082015160a08301516000916132229161321891906118de908063ffffffff612e6c16565b8460600151612a13565b905061325f6132358460200151836129e9565b602085015161325390670de0b6b3a76400009063ffffffff61299516565b9063ffffffff6129bd16565b905061326f836000015182612a13565b91505061074a565b604082015160808301516000916132a79161329d91906118de908063ffffffff612e6c16565b8460400151612a13565b90506132ba6132358460200151836129e9565b905061326f8360000151826129e9565b60035463ffffffff42811691600160e01b900481168203908116158015906132fc57506003546001600160701b031615155b80156133195750600354600160701b90046001600160701b031615155b15613339578063ffffffff1661332d612859565b60048054919092020190555b506003805463ffffffff909216600160e01b026001600160e01b03909216919091179055565b60006129e2836080015184608001518461337c8760000151613574565b87602001516135f0565b60006129e2836080015184604001518461337c8760000151613574565b60006129e28360a001516133c48486606001516129bd90919063ffffffff16565b606086015186516133d490613574565b876020015161388d565b60006129e28360a001518460a0015184866000015187602001516135f0565b60006129e2836080015161341e8486604001516129bd90919063ffffffff16565b60408601518651602088015161388d565b60006129e28360a00151846060015184866000015187602001516135f0565b6000816134765761346f61346284866129e9565b869063ffffffff6129bd16565b905061356c565b846134835750600061356c565b600080613499600485028663ffffffff612e6c16565b9050806134b057670de0b6b3a76400009150613530565b8581878302816134bc57fe5b0414156134f7576134f06134eb6ec097ce7bc90715b34b9f1000000000613253848a028b63ffffffff612ea616565b613966565b9150613530565b61352d6134eb6ec097ce7bc90715b34b9f100000000061325389613521868d63ffffffff612ea616565b9063ffffffff612e6c16565b91505b600061355a670de0b6b3a7640000613253613551868363ffffffff61299516565b88600202612a13565b905061356688826129e9565b93505050505b949350505050565b600061061f6ec097ce7bc90715b34b9f10000000008363ffffffff612ea616565b6135eb8363a9059cbb60e01b84846040516024016135b4929190614095565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261399d565b505050565b60008086116136115760405162461bcd60e51b815260040161078d9061425a565b8361361e57506000613884565b8161364b578461362e84866129e9565b116136425761363d83856129e9565b613644565b845b9050613884565b670de0b6b3a764000082141561370b5760008061366e858763ffffffff612e6c16565b90508061367e57600091506136d7565b86818883028161368a57fe5b0414156136ba576136b36136a4898063ffffffff612e6c16565b8289029063ffffffff612ea616565b91506136d7565b6136d4886118de8761352183838c8e63ffffffff612e6c16565b91505b6137026136f283670de0b6b3a764000063ffffffff6129bd16565b6118de898563ffffffff612e6c16565b92505050613884565b6000613738613720858763ffffffff612e6c16565b613253896135218a6118de898463ffffffff612e6c16565b9050600061375887613521670de0b6b3a76400008763ffffffff61299516565b9050600082821061376e57508190036000613774565b50810360015b61378c82670de0b6b3a764000063ffffffff612ea616565b915060006137c36137b06004613521670de0b6b3a76400008a63ffffffff61299516565b6137be8c6135218a8f6129e9565b6129e9565b90506137dc6134eb82613253868063ffffffff612e6c16565b905060006137fd6002613521670de0b6b3a76400008a63ffffffff61299516565b90506000831561383b57613817838663ffffffff61299516565b9050806138365760405162461bcd60e51b815260040161078d906144e0565b61384e565b61384b858463ffffffff6129bd16565b90505b600061385a8284613a5a565b90508b811115613874576000975050505050505050613884565b8b03965061388495505050505050565b95945050505050565b60008086116138ae5760405162461bcd60e51b815260040161078d9061425a565b60006138d06138c3878763ffffffff61299516565b859063ffffffff612e6c16565b9050826138f7576138ef81670de0b6b3a764000063ffffffff612ea616565b915050613884565b6000613916613910886118de8b8063ffffffff612e6c16565b87612a13565b9050600061392485836129e9565b90506139596ec097ce7bc90715b34b9f10000000006118de8561352185613253670de0b6b3a76400008c63ffffffff61299516565b9998505050505050505050565b80600160028204015b818110156139975780915060028182858161398657fe5b04018161398f57fe5b04905061396f565b50919050565b60006060836001600160a01b0316836040516139b99190613eb9565b6000604051808303816000865af19150503d80600081146139f6576040519150601f19603f3d011682016040523d82523d6000602084013e6139fb565b606091505b509150915081613a1d5760405162461bcd60e51b815260040161078d90614336565b805115613a545780806020019051810190613a389190613d5e565b613a545760405162461bcd60e51b815260040161078d9061453a565b50505050565b60006129e28261193a85670de0b6b3a764000063ffffffff612e6c16565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613ab957805160ff1916838001178555613ae6565b82800160010185558215613ae6579182015b82811115613ae6578251825591602001919060010190613acb565b50613af2929150613b3d565b5090565b6040518060e0016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160006002811115613b3857fe5b905290565b61112e91905b80821115613af25760008155600101613b43565b80356001600160a01b038116811461061f57600080fd5b60008083601f840112613b7f578182fd5b50813567ffffffffffffffff811115613b96578182fd5b602083019150836020828501011115612cba57600080fd5b600060208284031215613bbf578081fd5b6129e28383613b57565b60008060408385031215613bdb578081fd5b613be58484613b57565b9150613bf48460208501613b57565b90509250929050565b600080600080600080600080610100898b031215613c19578384fd5b613c238a8a613b57565b9750613c328a60208b01613b57565b9650613c418a60408b01613b57565b955060608901359450613c578a60808b01613b57565b935060a0890135925060c0890135915060e0890135613c7581614721565b809150509295985092959890939650565b600080600060608486031215613c9a578283fd5b8335613ca58161470c565b92506020840135613cb58161470c565b929592945050506040919091013590565b600080600080600080600060e0888a031215613ce0578283fd5b613cea8989613b57565b9650613cf98960208a01613b57565b955060408801359450606088013593506080880135613d178161472f565b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215613d46578182fd5b613d508484613b57565b946020939093013593505050565b600060208284031215613d6f578081fd5b81516129e281614721565b600060208284031215613d8b578081fd5b5051919050565b600080600080600080600060c0888a031215613dac578283fd5b873596506020880135613dbe8161470c565b95506040880135945060608801359350608088013567ffffffffffffffff811115613de7578384fd5b613df38a828b01613b6e565b989b979a5095989497959660a090950135949350505050565b600080600080600060808688031215613e23578081fd5b8535945060208601359350613e3b8760408801613b57565b9250606086013567ffffffffffffffff811115613e56578182fd5b613e6288828901613b6e565b969995985093965092949392505050565b600060208284031215613e84578081fd5b81516129e28161472f565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008251613ecb8184602087016146e0565b9190910192915050565b6000808354600180821660008114613ef45760018114613f0b57613f3a565b60ff198316865260028304607f1686019350613f3a565b600283048786526020808720875b83811015613f325781548a820152908501908201613f19565b505050860193505b509195945050505050565b60008451613f578184602089016146e0565b8451908301613f6a8282602089016146e0565b8451918101613f7d8382602089016146e0565b9091019695505050505050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b600060018060a01b038716825285602083015284604083015260806060830152614010608083018486613e8f565b979650505050505050565b600060018060a01b038816825286602083015285604083015284606083015260a0608083015261404f60a083018486613e8f565b98975050505050505050565b6001600160a01b0396871681529486166020860152604085019390935260608401919091528316608083015290911660a082015260c00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b901515815260200190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b93845260ff9290921660208401526040830152606082015260800190565b602081016003831061414357fe5b91905290565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b60006020825282518060208401526141948160408501602087016146e0565b601f01601f19169190910160400192915050565b6020808252600f908201526e1114d417d253925512505312569151608a1b604082015260600190565b60208082526011908201527011931054d217d313d05397d19052531151607a1b604082015260600190565b60208082526016908201527509a929ca8be829a9eaa9ca8be9c9ea8be8a9c9eaa8e960531b604082015260600190565b60208082526014908201527308298989eae829c868abe9c9ea8be8a9c9eaa8e960631b604082015260600190565b6020808252600e908201526d5441524745545f49535f5a45524f60901b604082015260600190565b60208082526009908201526814915153951490539560ba1b604082015260600190565b60208082526015908201527414d1531317d09050d2d7d393d517d0531313d5d151605a1b604082015260600190565b60208082526011908201527016915493d7d45553d51157d05353d55395607a1b604082015260600190565b6020808252601a908201527f424153455f51554f54455f43414e5f4e4f545f42455f53414d45000000000000604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252600d908201526c1393d7d09054d157d253941555609a1b604082015260600190565b6020808252600e908201526d2224ab24a224a723afa2a92927a960911b604082015260600190565b6020808252600f908201526e1114d417d3140e8811561412549151608a1b604082015260600190565b60208082526009908201526829aaa12fa2a92927a960b91b604082015260600190565b6020808252601390820152720ae92a89088a482aebe9c9ea8be8a9c9eaa8e9606b1b604082015260600190565b60208082526019908201527f4453505f4c503a20494e56414c49445f5349474e415455524500000000000000604082015260600190565b6020808252600e908201526d08898a0be9c9ea8be8a9c9eaa8e960931b604082015260600190565b6020808252601290820152710848298829c868abe9c9ea8be8a9c9eaa8e960731b604082015260600190565b6020808252600890820152674f564552464c4f5760c01b604082015260600190565b6020808252601f908201527f576f726c6465734d6174683a2073686f756c64206e6f74206265207a65726f00604082015260600190565b60208082526009908201526820a2222fa2a92927a960b91b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252600c908201526b1512535157d156141254915160a21b604082015260600190565b60208082526009908201526826aaa62fa2a92927a960b91b604082015260600190565b600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015261461860c08401516146d5565b60c083015292915050565b6001600160701b0391909116815260200190565b918252602082015260400190565b848152602081018490526080810161465c846146d5565b604083015282606083015295945050505050565b9283526020830191909152604082015260600190565b968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b63ffffffff91909116815260200190565b60ff91909116815260200190565b806003811061074a57fe5b60005b838110156146fb5781810151838201526020016146e3565b83811115613a545750506000910152565b6001600160a01b0381168114612e6957600080fd5b8015158114612e6957600080fd5b60ff81168114612e6957600080fdfec2cabab55d7789bb2cd7d88eb57b8ccf65ca19bbc0ddcd956de5a1ad2fbb154fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efdf176ad18be4f9f32efaa32f06e9d1175476504739a745f1399a6d3fa4b75917a2646970667358221220251156152aa7b30799334c5f2920c88d96f87b78a5037e084230c7931269619864736f6c63430006090033",
  "devdoc": {
    "methods": {
      "allowance(address,address)": {
        "details": "Function to check the amount of tokens that an owner _ALLOWED_ to a spender.",
        "params": {
          "owner": "address The address which owns the funds.",
          "spender": "address The address which will spend the funds."
        },
        "returns": {
          "_0": "A uint256 specifying the amount of tokens still available for the spender."
        }
      },
      "approve(address,uint256)": {
        "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.",
        "params": {
          "amount": "The amount of tokens to be spent.",
          "spender": "The address which will spend the funds."
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "The address to query the the balance of."
        },
        "returns": {
          "balance": "An uint256 representing the amount owned by the passed address."
        }
      },
      "transfer(address,uint256)": {
        "details": "transfer token for a specified address",
        "params": {
          "amount": "The amount to be transferred.",
          "to": "The address to transfer to."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from one address to another",
        "params": {
          "amount": "uint256 the amount of tokens to be transferred",
          "from": "address The address which you want to send tokens from",
          "to": "address The address which you want to transfer to"
        }
      }
    },
    "title": "StablePool"
  },
  "userdoc": {
    "methods": {},
    "notice": "StablePool initialization"
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2873,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "_ENTERED_",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6839,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "_DSP_INITIALIZED_",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6842,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "_IS_OPEN_TWAP_",
        "offset": 2,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6844,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "_MAINTAINER_",
        "offset": 3,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6846,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "_BASE_TOKEN_",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)1495"
      },
      {
        "astId": 6848,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "_QUOTE_TOKEN_",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)1495"
      },
      {
        "astId": 6850,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "_BASE_RESERVE_",
        "offset": 0,
        "slot": "3",
        "type": "t_uint112"
      },
      {
        "astId": 6852,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "_QUOTE_RESERVE_",
        "offset": 14,
        "slot": "3",
        "type": "t_uint112"
      },
      {
        "astId": 6854,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "_BLOCK_TIMESTAMP_LAST_",
        "offset": 28,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 6856,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "_BASE_PRICE_CUMULATIVE_LAST_",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6858,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "_BASE_TARGET_",
        "offset": 0,
        "slot": "5",
        "type": "t_uint112"
      },
      {
        "astId": 6860,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "_QUOTE_TARGET_",
        "offset": 14,
        "slot": "5",
        "type": "t_uint112"
      },
      {
        "astId": 6862,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "_RState_",
        "offset": 28,
        "slot": "5",
        "type": "t_uint32"
      },
      {
        "astId": 6864,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 6866,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "decimals",
        "offset": 0,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 6868,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "name",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 6870,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "totalSupply",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 6874,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "_SHARES_",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6880,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "_ALLOWED_",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6882,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "12",
        "type": "t_bytes32"
      },
      {
        "astId": 6889,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "nonces",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6891,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "_MT_FEE_RATE_MODEL_",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IFeeRateModel)2111"
      },
      {
        "astId": 6893,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "_LP_FEE_RATE_",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 6895,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "_K_",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 6897,
        "contract": "contracts/stablePool/implements/DSP.sol:DSP",
        "label": "_I_",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1495": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IFeeRateModel)2111": {
        "encoding": "inplace",
        "label": "contract IFeeRateModel",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint112": {
        "encoding": "inplace",
        "label": "uint112",
        "numberOfBytes": "14"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}