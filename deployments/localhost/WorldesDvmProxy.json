{
  "address": "0x959922bE3CAee4b8Cd9a407cc3ac1C251C2007B1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dvmFactory",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "worldesApproveProxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "returnAmount",
          "type": "uint256"
        }
      ],
      "name": "OrderHistory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferPrepared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "_DVM_FACTORY_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_NEW_OWNER_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_OWNER_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_WETH_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_WORLDES_APPROVE_PROXY_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dvmAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseMinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteMinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "flag",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "deadLine",
          "type": "uint256"
        }
      ],
      "name": "addDVMLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseAdjustedInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteAdjustedInAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        }
      ],
      "name": "addWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "k",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isOpenTWAP",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "deadLine",
          "type": "uint256"
        }
      ],
      "name": "createVendingMachine",
      "outputs": [
        {
          "internalType": "address",
          "name": "newVendingMachine",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "approveTarget",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapTarget",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReturnAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "callDataConcat",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "deadLine",
          "type": "uint256"
        }
      ],
      "name": "externalSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "returnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "initOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isWhiteListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        }
      ],
      "name": "removeWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minReturnAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "worldesPairs",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "directions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadLine",
          "type": "uint256"
        }
      ],
      "name": "worldesSwapETHToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "returnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReturnAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "worldesPairs",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "directions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadLine",
          "type": "uint256"
        }
      ],
      "name": "worldesSwapTokenToETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "returnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReturnAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "worldesPairs",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "directions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadLine",
          "type": "uint256"
        }
      ],
      "name": "worldesSwapTokenToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "returnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xce661991287bd58fda8cba5d8cc885906674f4be09a980635e58fba8e7c54d42",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x959922bE3CAee4b8Cd9a407cc3ac1C251C2007B1",
    "transactionIndex": 0,
    "gasUsed": "2728884",
    "logsBloom": "0x
    "blockHash": "0xbcfbb900adb90db169b2b1e9965a4be52819ae9b79bd71ebf86d7ce9b9c1dba6",
    "transactionHash": "0xce661991287bd58fda8cba5d8cc885906674f4be09a980635e58fba8e7c54d42",
    "logs": [],
    "blockNumber": 17,
    "cumulativeGasUsed": "2728884",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x0B306BF915C4d645ff596e518fAf3F9669b97016"
  ],
  "numDeployments": 1,
  "solcInputHash": "2bc52c20de8a37fa339f3a7b69b4b897",
  "metadata": "{\"compiler\":{\"version\":\"0.6.9+commit.3e3065ac\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dvmFactory\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"worldesApproveProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"name\":\"OrderHistory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_DVM_FACTORY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_NEW_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_WETH_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_WORLDES_APPROVE_PROXY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dvmAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"deadLine\",\"type\":\"uint256\"}],\"name\":\"addDVMLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAdjustedInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAdjustedInAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpenTWAP\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadLine\",\"type\":\"uint256\"}],\"name\":\"createVendingMachine\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newVendingMachine\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approveTarget\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callDataConcat\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadLine\",\"type\":\"uint256\"}],\"name\":\"externalSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"removeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"worldesPairs\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"directions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadLine\",\"type\":\"uint256\"}],\"name\":\"worldesSwapETHToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"worldesPairs\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"directions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadLine\",\"type\":\"uint256\"}],\"name\":\"worldesSwapTokenToETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"worldesPairs\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"directions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadLine\",\"type\":\"uint256\"}],\"name\":\"worldesSwapTokenToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{},\"title\":\"WorldesDvmProxy\"},\"userdoc\":{\"methods\":{},\"notice\":\"Entrance of trading in Worldes platform\"}},\"settings\":{\"compilationTarget\":{\"contracts/proxy/WorldesDvmProxy.sol\":\"WorldesDvmProxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC20.sol\":{\"content\":\"// This is a file copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\",\"keccak256\":\"0xc3b1b297d3eb14bbe1767f9d36a68592d7a80ad01b7596e95aa542a0d1d662a2\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n\\r\\ninterface IWETH {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 wad\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256 wad) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x48db02ef30ae2752ddc482785a0691bc2a047fe904e6c3d956a82b44910d7bf2\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IWorldes.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IWorldes {\\r\\n\\r\\n    //========== Common ==================\\r\\n\\r\\n    function sellBase(address to) external returns (uint256 receiveQuoteAmount);\\r\\n\\r\\n    function sellQuote(address to) external returns (uint256 receiveBaseAmount);\\r\\n\\r\\n    function getVaultReserve() external view returns (uint256 baseReserve, uint256 quoteReserve);\\r\\n\\r\\n    function _BASE_TOKEN_() external view returns (address);\\r\\n\\r\\n    function _QUOTE_TOKEN_() external view returns (address);\\r\\n\\r\\n    function getPMMStateForCall() external view returns (\\r\\n            uint256 i,\\r\\n            uint256 K,\\r\\n            uint256 B,\\r\\n            uint256 Q,\\r\\n            uint256 B0,\\r\\n            uint256 Q0,\\r\\n            uint256 R\\r\\n    );\\r\\n\\r\\n    function getUserFeeRate(address user) external view returns (uint256 lpFeeRate, uint256 mtFeeRate);\\r\\n\\r\\n    \\r\\n    function getPairPoolBidirection(address token0, address token1) external view returns (address[] memory, address[] memory);\\r\\n\\r\\n    //========== VendingMachine ========\\r\\n    \\r\\n    function createVendingMachine(\\r\\n        address baseToken,\\r\\n        address quoteToken,\\r\\n        uint256 lpFeeRate,\\r\\n        uint256 i,\\r\\n        uint256 k,\\r\\n        bool isOpenTWAP\\r\\n    ) external returns (address newVendingMachine);\\r\\n    \\r\\n    function buyShares(address to) external returns (uint256,uint256,uint256);\\r\\n\\r\\n    function bid(address to) external;\\r\\n}\",\"keccak256\":\"0xab27b4e218fbd8e660f12ee420ada550c1337f7deb47136254cdf7ad6a05a01a\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IWorldesApprove.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\n\\r\\ninterface IWorldesApprove {\\r\\n    function claimTokens(address token,address who,address dest,uint256 amount) external;\\r\\n    function getWorldesProxy() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x16e6dc195ddbe573eb428c0c7c41044f5289b5136590147084889e27e73a40b5\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IWorldesDvmProxy.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n\\r\\ninterface IWorldesDvmProxy {\\r\\n    function worldesSwapETHToToken(\\r\\n        address toToken,\\r\\n        uint256 minReturnAmount,\\r\\n        address[] memory worldesPairs,\\r\\n        uint256 directions,\\r\\n        uint256 deadLine\\r\\n    ) external payable returns (uint256 returnAmount);\\r\\n\\r\\n    function worldesSwapTokenToETH(\\r\\n        address fromToken,\\r\\n        uint256 fromTokenAmount,\\r\\n        uint256 minReturnAmount,\\r\\n        address[] memory worldesPairs,\\r\\n        uint256 directions,\\r\\n        uint256 deadLine\\r\\n    ) external returns (uint256 returnAmount);\\r\\n\\r\\n    function worldesSwapTokenToToken(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        uint256 fromTokenAmount,\\r\\n        uint256 minReturnAmount,\\r\\n        address[] memory worldesPairs,\\r\\n        uint256 directions,\\r\\n        uint256 deadLine\\r\\n    ) external returns (uint256 returnAmount);\\r\\n\\r\\n    function createVendingMachine(\\r\\n        address baseToken,\\r\\n        address quoteToken,\\r\\n        uint256 baseInAmount,\\r\\n        uint256 quoteInAmount,\\r\\n        uint256 lpFeeRate,\\r\\n        uint256 i,\\r\\n        uint256 k,\\r\\n        bool isOpenTWAP,\\r\\n        uint256 deadLine\\r\\n    ) external payable returns (address newVendingMachine, uint256 shares);\\r\\n\\r\\n    function addDVMLiquidity(\\r\\n        address dvmAddress,\\r\\n        uint256 baseInAmount,\\r\\n        uint256 quoteInAmount,\\r\\n        uint256 baseMinAmount,\\r\\n        uint256 quoteMinAmount,\\r\\n        uint8 flag, //  0 - ERC20, 1 - baseInETH, 2 - quoteInETH\\r\\n        uint256 deadLine\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 shares,\\r\\n            uint256 baseAdjustedInAmount,\\r\\n            uint256 quoteAdjustedInAmount\\r\\n        );\\r\\n\\r\\n    function externalSwap(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        address approveTarget,\\r\\n        address to,\\r\\n        uint256 fromTokenAmount,\\r\\n        uint256 minReturnAmount,\\r\\n        bytes memory callDataConcat,\\r\\n        uint256 deadLine\\r\\n    ) external payable returns (uint256 returnAmount);\\r\\n}\\r\\n\",\"keccak256\":\"0xafd4ed05d8c8064ce9d42ef57aed3ed50526622bb435a7e4137961d225f4010d\",\"license\":\"Apache-2.0\"},\"contracts/libraries/DecimalMath.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title DecimalMath\\r\\n *\\r\\n * @notice Functions for fixed point number with 18 decimals\\r\\n */\\r\\nlibrary DecimalMath {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 internal constant ONE = 10**18;\\r\\n    uint256 internal constant ONE2 = 10**36;\\r\\n\\r\\n    function mulFloor(uint256 target, uint256 d) internal pure returns (uint256) {\\r\\n        return target.mul(d) / (10**18);\\r\\n    }\\r\\n\\r\\n    function mulCeil(uint256 target, uint256 d) internal pure returns (uint256) {\\r\\n        return target.mul(d).divCeil(10**18);\\r\\n    }\\r\\n\\r\\n    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\\r\\n        return target.mul(10**18).div(d);\\r\\n    }\\r\\n\\r\\n    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\\r\\n        return target.mul(10**18).divCeil(d);\\r\\n    }\\r\\n\\r\\n    function reciprocalFloor(uint256 target) internal pure returns (uint256) {\\r\\n        return uint256(10**36).div(target);\\r\\n    }\\r\\n\\r\\n    function reciprocalCeil(uint256 target) internal pure returns (uint256) {\\r\\n        return uint256(10**36).divCeil(target);\\r\\n    }\\r\\n\\r\\n    function powFloor(uint256 target, uint256 e) internal pure returns (uint256) {\\r\\n        if (e == 0) {\\r\\n            return 10 ** 18;\\r\\n        } else if (e == 1) {\\r\\n            return target;\\r\\n        } else {\\r\\n            uint p = powFloor(target, e.div(2));\\r\\n            p = p.mul(p) / (10**18);\\r\\n            if (e % 2 == 1) {\\r\\n                p = p.mul(target) / (10**18);\\r\\n            }\\r\\n            return p;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa71c6c5af95e795862208bf00aac9a298291138b9324c720468ad4230acf7818\",\"license\":\"Apache-2.0\"},\"contracts/libraries/InitializableOwnable.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n  *\\r\\n * @notice Ownership related functions\\r\\n */\\r\\ncontract InitializableOwnable {\\r\\n    address public _OWNER_;\\r\\n    address public _NEW_OWNER_;\\r\\n    bool internal _INITIALIZED_;\\r\\n\\r\\n    // ============ Events ============\\r\\n\\r\\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    // ============ Modifiers ============\\r\\n\\r\\n    modifier notInitialized() {\\r\\n        require(!_INITIALIZED_, \\\"_INITIALIZED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == _OWNER_, \\\"NOT_OWNER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ============ Functions ============\\r\\n\\r\\n    function initOwner(address newOwner) public notInitialized {\\r\\n        _INITIALIZED_ = true;\\r\\n        _OWNER_ = newOwner;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\\r\\n        _NEW_OWNER_ = newOwner;\\r\\n    }\\r\\n\\r\\n    function claimOwnership() public {\\r\\n        require(msg.sender == _NEW_OWNER_, \\\"INVALID_CLAIM\\\");\\r\\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\\r\\n        _OWNER_ = _NEW_OWNER_;\\r\\n        _NEW_OWNER_ = address(0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfe6ac3ca14bc72355847e9a53052d5007d24155214135116feefabcc135a57e0\",\"license\":\"Apache-2.0\"},\"contracts/libraries/ReentrancyGuard.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * @title ReentrancyGuard\\r\\n  *\\r\\n * @notice Protect functions from Reentrancy Attack\\r\\n */\\r\\ncontract ReentrancyGuard {\\r\\n    // https://solidity.readthedocs.io/en/latest/control-structures.html?highlight=zero-state#scoping-and-declarations\\r\\n    // zero-state of _ENTERED_ is false\\r\\n    bool private _ENTERED_;\\r\\n\\r\\n    modifier preventReentrant() {\\r\\n        require(!_ENTERED_, \\\"REENTRANT\\\");\\r\\n        _ENTERED_ = true;\\r\\n        _;\\r\\n        _ENTERED_ = false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe447ab99ae8905d3b9fdff7f6c45ee21f39fe915e90d90dcf7cff3d6f86f7eb0\",\"license\":\"Apache-2.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n    This is a simplified version of OpenZepplin's SafeERC20 library\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\r\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves.\\r\\n\\r\\n        // A Solidity high level call has three parts:\\r\\n        //  1. The target address is checked to verify it contains contract code\\r\\n        //  2. The call itself is made, and success asserted\\r\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\r\\n        // solhint-disable-next-line max-line-length\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\r\\n\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x73bdda5b177b6f1cb93396fa135a99a99b317ec8475b6d5f13f4696b0685af9c\",\"license\":\"Apache-2.0\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n *\\r\\n * @notice Math operations with safety checks that revert on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"MUL_ERROR\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b > 0, \\\"DIVIDING_ERROR\\\");\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 quotient = div(a, b);\\r\\n        uint256 remainder = a - quotient * b;\\r\\n        if (remainder > 0) {\\r\\n            return quotient + 1;\\r\\n        } else {\\r\\n            return quotient;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= a, \\\"SUB_ERROR\\\");\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"ADD_ERROR\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\\r\\n        uint256 z = x / 2 + 1;\\r\\n        y = x;\\r\\n        while (z < y) {\\r\\n            y = z;\\r\\n            z = (x / z + z) / 2;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4e15e5debcd4097573f1e017fb458502a0122b8d543d140d8f708d4db35590c8\",\"license\":\"Apache-2.0\"},\"contracts/libraries/UniversalERC20.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\n\\r\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"./SafeERC20.sol\\\";\\r\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\r\\n\\r\\nlibrary UniversalERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    IERC20 private constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\r\\n\\r\\n    function universalTransfer(\\r\\n        IERC20 token,\\r\\n        address payable to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        if (amount > 0) {\\r\\n            if (isETH(token)) {\\r\\n                to.transfer(amount);\\r\\n            } else {\\r\\n                token.safeTransfer(to, amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function universalApproveMax(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        uint256 allowance = token.allowance(address(this), to);\\r\\n        if (allowance < amount) {\\r\\n            if (allowance > 0) {\\r\\n                token.safeApprove(to, 0);\\r\\n            }\\r\\n            token.safeApprove(to, uint256(-1));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\\r\\n        if (isETH(token)) {\\r\\n            return who.balance;\\r\\n        } else {\\r\\n            return token.balanceOf(who);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenBalanceOf(IERC20 token, address who) internal view returns (uint256) {\\r\\n        return token.balanceOf(who);\\r\\n    }\\r\\n\\r\\n    function isETH(IERC20 token) internal pure returns (bool) {\\r\\n        return token == ETH_ADDRESS;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x476aa71b09c64344cbfd5d4f99a1babfc38a0804f7e6c3e32751caec4da93e24\",\"license\":\"Apache-2.0\"},\"contracts/proxy/WorldesApproveProxy.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {IWorldesApprove} from \\\"../interfaces/IWorldesApprove.sol\\\";\\r\\nimport {InitializableOwnable} from \\\"../libraries/InitializableOwnable.sol\\\";\\r\\n\\r\\ninterface IWorldesApproveProxy {\\r\\n    function isAllowedProxy(address _proxy) external view returns (bool);\\r\\n    function claimTokens(address token,address who,address dest,uint256 amount) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title WorldesApproveProxy\\r\\n  *\\r\\n * @notice Allow different version worldesproxy to claim from WorldesApprove\\r\\n */\\r\\ncontract WorldesApproveProxy is InitializableOwnable {\\r\\n    \\r\\n    // ============ Storage ============\\r\\n    uint256 private constant _TIMELOCK_DURATION_ = 3 days;\\r\\n    mapping (address => bool) public _IS_ALLOWED_PROXY_;\\r\\n    uint256 public _TIMELOCK_;\\r\\n    address public _PENDING_ADD_WORLDES_PROXY_;\\r\\n    address public immutable _WORLDES_APPROVE_;\\r\\n\\r\\n    // ============ Modifiers ============\\r\\n    modifier notLocked() {\\r\\n        require(\\r\\n            _TIMELOCK_ <= block.timestamp,\\r\\n            \\\"SetProxy is timelocked\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address worldesApprove) public {\\r\\n        _WORLDES_APPROVE_ = worldesApprove;\\r\\n    }\\r\\n\\r\\n    function init(address owner, address[] memory proxies) external {\\r\\n        initOwner(owner);\\r\\n        for(uint i = 0; i < proxies.length; i++) \\r\\n            _IS_ALLOWED_PROXY_[proxies[i]] = true;\\r\\n    }\\r\\n\\r\\n    function unlockAddProxy(address newSwapProxy) public onlyOwner {\\r\\n        _TIMELOCK_ = block.timestamp + _TIMELOCK_DURATION_;\\r\\n        _PENDING_ADD_WORLDES_PROXY_ = newSwapProxy;\\r\\n    }\\r\\n\\r\\n    function lockAddProxy() public onlyOwner {\\r\\n       _PENDING_ADD_WORLDES_PROXY_ = address(0);\\r\\n       _TIMELOCK_ = 0;\\r\\n    }\\r\\n\\r\\n\\r\\n    function addWorldesProxy() external onlyOwner notLocked() {\\r\\n        _IS_ALLOWED_PROXY_[_PENDING_ADD_WORLDES_PROXY_] = true;\\r\\n        lockAddProxy();\\r\\n    }\\r\\n\\r\\n    function removeWorldesProxy (address oldSwapProxy) public onlyOwner {\\r\\n        _IS_ALLOWED_PROXY_[oldSwapProxy] = false;\\r\\n    }\\r\\n    \\r\\n    function claimTokens(\\r\\n        address token,\\r\\n        address who,\\r\\n        address dest,\\r\\n        uint256 amount\\r\\n    ) external {\\r\\n        require(_IS_ALLOWED_PROXY_[msg.sender], \\\"WorldesApproveProxy:Access restricted\\\");\\r\\n        IWorldesApprove(_WORLDES_APPROVE_).claimTokens(\\r\\n            token,\\r\\n            who,\\r\\n            dest,\\r\\n            amount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function isAllowedProxy(address _proxy) external view returns (bool) {\\r\\n        return _IS_ALLOWED_PROXY_[_proxy];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf29fec5cd4de23e8004eccf73d135b49252e26005e8f209101429f1889e3724e\",\"license\":\"Apache-2.0\"},\"contracts/proxy/WorldesDvmProxy.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\n\\r\\nimport {IWorldesDvmProxy} from \\\"../interfaces/IWorldesDvmProxy.sol\\\";\\r\\nimport {IWorldes} from \\\"../interfaces/IWorldes.sol\\\";\\r\\nimport {IWorldesApproveProxy} from \\\"./WorldesApproveProxy.sol\\\";\\r\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\r\\nimport {IWETH} from \\\"../interfaces/IWETH.sol\\\";\\r\\nimport {SafeMath} from \\\"../libraries/SafeMath.sol\\\";\\r\\nimport {UniversalERC20} from \\\"../libraries/UniversalERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"../libraries/SafeERC20.sol\\\";\\r\\nimport {DecimalMath} from \\\"../libraries/DecimalMath.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"../libraries/ReentrancyGuard.sol\\\";\\r\\nimport {InitializableOwnable} from \\\"../libraries/InitializableOwnable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title WorldesDvmProxy\\r\\n *\\r\\n * @notice Entrance of trading in Worldes platform\\r\\n */\\r\\ncontract WorldesDvmProxy is IWorldesDvmProxy, ReentrancyGuard, InitializableOwnable {\\r\\n    using SafeMath for uint256;\\r\\n    using UniversalERC20 for IERC20;\\r\\n\\r\\n    // ============ Storage ============\\r\\n\\r\\n    address constant _ETH_ADDRESS_ = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n    address public immutable _WETH_;\\r\\n    address public immutable _WORLDES_APPROVE_PROXY_;\\r\\n    address public immutable _DVM_FACTORY_;\\r\\n    mapping (address => bool) public isWhiteListed;\\r\\n\\r\\n    // ============ Events ============\\r\\n\\r\\n    event OrderHistory(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        address sender,\\r\\n        uint256 fromAmount,\\r\\n        uint256 returnAmount\\r\\n    );\\r\\n\\r\\n    // ============ Modifiers ============\\r\\n\\r\\n    modifier judgeExpired(uint256 deadLine) {\\r\\n        require(deadLine >= block.timestamp, \\\"WorldesDvmProxy: EXPIRED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    fallback() external payable {}\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    constructor(\\r\\n        address dvmFactory,\\r\\n        address payable weth,\\r\\n        address worldesApproveProxy\\r\\n    ) public {\\r\\n        _DVM_FACTORY_ = dvmFactory;\\r\\n        _WETH_ = weth;\\r\\n        _WORLDES_APPROVE_PROXY_ = worldesApproveProxy;\\r\\n    }\\r\\n\\r\\n    function addWhiteList (address contractAddr) public onlyOwner {\\r\\n        isWhiteListed[contractAddr] = true;\\r\\n    }\\r\\n\\r\\n    function removeWhiteList (address contractAddr) public onlyOwner {\\r\\n        isWhiteListed[contractAddr] = false;\\r\\n    }\\r\\n\\r\\n    // ============ DVM Functions (create & add liquidity) ============\\r\\n\\r\\n    function createVendingMachine(\\r\\n        address baseToken,\\r\\n        address quoteToken,\\r\\n        uint256 baseInAmount,\\r\\n        uint256 quoteInAmount,\\r\\n        uint256 lpFeeRate,\\r\\n        uint256 i,\\r\\n        uint256 k,\\r\\n        bool isOpenTWAP,\\r\\n        uint256 deadLine\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        payable\\r\\n        preventReentrant\\r\\n        judgeExpired(deadLine)\\r\\n        returns (address newVendingMachine, uint256 shares)\\r\\n    {\\r\\n        {\\r\\n            address _baseToken = baseToken == _ETH_ADDRESS_ ? _WETH_ : baseToken;\\r\\n            address _quoteToken = quoteToken == _ETH_ADDRESS_ ? _WETH_ : quoteToken;\\r\\n            newVendingMachine = IWorldes(_DVM_FACTORY_).createVendingMachine(\\r\\n                _baseToken,\\r\\n                _quoteToken,\\r\\n                lpFeeRate,\\r\\n                i,\\r\\n                k,\\r\\n                isOpenTWAP\\r\\n            );\\r\\n        }\\r\\n\\r\\n        {\\r\\n            address _baseToken = baseToken;\\r\\n            address _quoteToken = quoteToken;\\r\\n            _deposit(\\r\\n                msg.sender,\\r\\n                newVendingMachine,\\r\\n                _baseToken,\\r\\n                baseInAmount,\\r\\n                _baseToken == _ETH_ADDRESS_\\r\\n            );\\r\\n            _deposit(\\r\\n                msg.sender,\\r\\n                newVendingMachine,\\r\\n                _quoteToken,\\r\\n                quoteInAmount,\\r\\n                _quoteToken == _ETH_ADDRESS_\\r\\n            );\\r\\n        }\\r\\n\\r\\n        (shares, , ) = IWorldes(newVendingMachine).buyShares(msg.sender);\\r\\n    }\\r\\n\\r\\n    function addDVMLiquidity(\\r\\n        address dvmAddress,\\r\\n        uint256 baseInAmount,\\r\\n        uint256 quoteInAmount,\\r\\n        uint256 baseMinAmount,\\r\\n        uint256 quoteMinAmount,\\r\\n        uint8 flag, // 0 - ERC20, 1 - baseInETH, 2 - quoteInETH\\r\\n        uint256 deadLine\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        payable\\r\\n        preventReentrant\\r\\n        judgeExpired(deadLine)\\r\\n        returns (\\r\\n            uint256 shares,\\r\\n            uint256 baseAdjustedInAmount,\\r\\n            uint256 quoteAdjustedInAmount\\r\\n        )\\r\\n    {\\r\\n        address _dvm = dvmAddress;\\r\\n        (baseAdjustedInAmount, quoteAdjustedInAmount) = _addDVMLiquidity(\\r\\n            _dvm,\\r\\n            baseInAmount,\\r\\n            quoteInAmount\\r\\n        );\\r\\n        require(\\r\\n            baseAdjustedInAmount >= baseMinAmount && quoteAdjustedInAmount >= quoteMinAmount,\\r\\n            \\\"WorldesDvmProxy: deposit amount is not enough\\\"\\r\\n        );\\r\\n\\r\\n        _deposit(msg.sender, _dvm, IWorldes(_dvm)._BASE_TOKEN_(), baseAdjustedInAmount, flag == 1);\\r\\n        _deposit(msg.sender, _dvm, IWorldes(_dvm)._QUOTE_TOKEN_(), quoteAdjustedInAmount, flag == 2);\\r\\n        \\r\\n        (shares, , ) = IWorldes(_dvm).buyShares(msg.sender);\\r\\n        // refund dust eth\\r\\n        if (flag == 1 && msg.value > baseAdjustedInAmount) msg.sender.transfer(msg.value - baseAdjustedInAmount);\\r\\n        if (flag == 2 && msg.value > quoteAdjustedInAmount) msg.sender.transfer(msg.value - quoteAdjustedInAmount);\\r\\n    }\\r\\n\\r\\n    function _addDVMLiquidity(\\r\\n        address dvmAddress,\\r\\n        uint256 baseInAmount,\\r\\n        uint256 quoteInAmount\\r\\n    ) internal view returns (uint256 baseAdjustedInAmount, uint256 quoteAdjustedInAmount) {\\r\\n        (uint256 baseReserve, uint256 quoteReserve) = IWorldes(dvmAddress).getVaultReserve();\\r\\n        if (quoteReserve == 0 && baseReserve == 0) {\\r\\n            baseAdjustedInAmount = baseInAmount;\\r\\n            quoteAdjustedInAmount = quoteInAmount;\\r\\n        }\\r\\n        if (quoteReserve == 0 && baseReserve > 0) {\\r\\n            baseAdjustedInAmount = baseInAmount;\\r\\n            quoteAdjustedInAmount = 0;\\r\\n        }\\r\\n        if (quoteReserve > 0 && baseReserve > 0) {\\r\\n            uint256 baseIncreaseRatio = DecimalMath.divFloor(baseInAmount, baseReserve);\\r\\n            uint256 quoteIncreaseRatio = DecimalMath.divFloor(quoteInAmount, quoteReserve);\\r\\n            if (baseIncreaseRatio <= quoteIncreaseRatio) {\\r\\n                baseAdjustedInAmount = baseInAmount;\\r\\n                quoteAdjustedInAmount = DecimalMath.mulFloor(quoteReserve, baseIncreaseRatio);\\r\\n            } else {\\r\\n                quoteAdjustedInAmount = quoteInAmount;\\r\\n                baseAdjustedInAmount = DecimalMath.mulFloor(baseReserve, quoteIncreaseRatio);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============ Swap ============\\r\\n\\r\\n    function worldesSwapETHToToken(\\r\\n        address toToken,\\r\\n        uint256 minReturnAmount,\\r\\n        address[] memory worldesPairs,\\r\\n        uint256 directions,\\r\\n        uint256 deadLine\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        payable\\r\\n        judgeExpired(deadLine)\\r\\n        returns (uint256 returnAmount)\\r\\n    {\\r\\n        require(worldesPairs.length > 0, \\\"WorldesDvmProxy: PAIRS_EMPTY\\\");\\r\\n        require(minReturnAmount > 0, \\\"WorldesDvmProxy: RETURN_AMOUNT_ZERO\\\");\\r\\n        \\r\\n        uint256 originToTokenBalance = IERC20(toToken).balanceOf(msg.sender);\\r\\n        IWETH(_WETH_).deposit{value: msg.value}();\\r\\n        SafeERC20.safeTransfer(IERC20(_WETH_), worldesPairs[0], msg.value);\\r\\n\\r\\n        for (uint256 i = 0; i < worldesPairs.length; i++) {\\r\\n            if (i == worldesPairs.length - 1) {\\r\\n                if (directions & 1 == 0) {\\r\\n                    IWorldes(worldesPairs[i]).sellBase(msg.sender);\\r\\n                } else {\\r\\n                    IWorldes(worldesPairs[i]).sellQuote(msg.sender);\\r\\n                }\\r\\n            } else {\\r\\n                if (directions & 1 == 0) {\\r\\n                    IWorldes(worldesPairs[i]).sellBase(worldesPairs[i + 1]);\\r\\n                } else {\\r\\n                    IWorldes(worldesPairs[i]).sellQuote(worldesPairs[i + 1]);\\r\\n                }\\r\\n            }\\r\\n            directions = directions >> 1;\\r\\n        }\\r\\n\\r\\n        returnAmount = IERC20(toToken).balanceOf(msg.sender).sub(originToTokenBalance);\\r\\n        require(returnAmount >= minReturnAmount, \\\"WorldesDvmProxy: Return amount is not enough\\\");\\r\\n\\r\\n        emit OrderHistory(\\r\\n            _ETH_ADDRESS_,\\r\\n            toToken,\\r\\n            msg.sender,\\r\\n            msg.value,\\r\\n            returnAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function worldesSwapTokenToETH(\\r\\n        address fromToken,\\r\\n        uint256 fromTokenAmount,\\r\\n        uint256 minReturnAmount,\\r\\n        address[] memory worldesPairs,\\r\\n        uint256 directions,\\r\\n        uint256 deadLine\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        judgeExpired(deadLine)\\r\\n        returns (uint256 returnAmount)\\r\\n    {\\r\\n        require(worldesPairs.length > 0, \\\"WorldesDvmProxy: PAIRS_EMPTY\\\");\\r\\n        require(minReturnAmount > 0, \\\"WorldesDvmProxy: RETURN_AMOUNT_ZERO\\\");\\r\\n        \\r\\n        IWorldesApproveProxy(_WORLDES_APPROVE_PROXY_).claimTokens(fromToken, msg.sender, worldesPairs[0], fromTokenAmount);\\r\\n\\r\\n        for (uint256 i = 0; i < worldesPairs.length; i++) {\\r\\n            if (i == worldesPairs.length - 1) {\\r\\n                if (directions & 1 == 0) {\\r\\n                    IWorldes(worldesPairs[i]).sellBase(address(this));\\r\\n                } else {\\r\\n                    IWorldes(worldesPairs[i]).sellQuote(address(this));\\r\\n                }\\r\\n            } else {\\r\\n                if (directions & 1 == 0) {\\r\\n                    IWorldes(worldesPairs[i]).sellBase(worldesPairs[i + 1]);\\r\\n                } else {\\r\\n                    IWorldes(worldesPairs[i]).sellQuote(worldesPairs[i + 1]);\\r\\n                }\\r\\n            }\\r\\n            directions = directions >> 1;\\r\\n        }\\r\\n        returnAmount = IWETH(_WETH_).balanceOf(address(this));\\r\\n        require(returnAmount >= minReturnAmount, \\\"WorldesDvmProxy: Return amount is not enough\\\");\\r\\n        IWETH(_WETH_).withdraw(returnAmount);\\r\\n        msg.sender.transfer(returnAmount);\\r\\n\\r\\n        emit OrderHistory(\\r\\n            fromToken,\\r\\n            _ETH_ADDRESS_,\\r\\n            msg.sender,\\r\\n            fromTokenAmount,\\r\\n            returnAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function worldesSwapTokenToToken(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        uint256 fromTokenAmount,\\r\\n        uint256 minReturnAmount,\\r\\n        address[] memory worldesPairs,\\r\\n        uint256 directions,\\r\\n        uint256 deadLine\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        judgeExpired(deadLine)\\r\\n        returns (uint256 returnAmount)\\r\\n    {\\r\\n        require(worldesPairs.length > 0, \\\"WorldesDvmProxy: PAIRS_EMPTY\\\");\\r\\n        require(minReturnAmount > 0, \\\"WorldesDvmProxy: RETURN_AMOUNT_ZERO\\\");\\r\\n\\r\\n        uint256 originToTokenBalance = IERC20(toToken).balanceOf(msg.sender);\\r\\n        IWorldesApproveProxy(_WORLDES_APPROVE_PROXY_).claimTokens(fromToken, msg.sender, worldesPairs[0], fromTokenAmount);\\r\\n\\r\\n        for (uint256 i = 0; i < worldesPairs.length; i++) {\\r\\n            if (i == worldesPairs.length - 1) {\\r\\n                if (directions & 1 == 0) {\\r\\n                    IWorldes(worldesPairs[i]).sellBase(msg.sender);\\r\\n                } else {\\r\\n                    IWorldes(worldesPairs[i]).sellQuote(msg.sender);\\r\\n                }\\r\\n            } else {\\r\\n                if (directions& 1 == 0) {\\r\\n                    IWorldes(worldesPairs[i]).sellBase(worldesPairs[i + 1]);\\r\\n                } else {\\r\\n                    IWorldes(worldesPairs[i]).sellQuote(worldesPairs[i + 1]);\\r\\n                }\\r\\n            }\\r\\n            directions = directions >> 1;\\r\\n        }\\r\\n        returnAmount = IERC20(toToken).balanceOf(msg.sender).sub(originToTokenBalance);\\r\\n        require(returnAmount >= minReturnAmount, \\\"WorldesDvmProxy: Return amount is not enough\\\");\\r\\n\\r\\n        emit OrderHistory(\\r\\n            fromToken,\\r\\n            toToken,\\r\\n            msg.sender,\\r\\n            fromTokenAmount,\\r\\n            returnAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function externalSwap(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        address approveTarget,\\r\\n        address swapTarget,\\r\\n        uint256 fromTokenAmount,\\r\\n        uint256 minReturnAmount,\\r\\n        bytes memory callDataConcat,\\r\\n        uint256 deadLine\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        payable\\r\\n        judgeExpired(deadLine)\\r\\n        returns (uint256 returnAmount)\\r\\n    {\\r\\n        require(minReturnAmount > 0, \\\"WorldesDvmProxy: RETURN_AMOUNT_ZERO\\\");\\r\\n        \\r\\n        uint256 toTokenOriginBalance = IERC20(toToken).universalBalanceOf(msg.sender);\\r\\n        if (fromToken != _ETH_ADDRESS_) {\\r\\n            IWorldesApproveProxy(_WORLDES_APPROVE_PROXY_).claimTokens(\\r\\n                fromToken,\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                fromTokenAmount\\r\\n            );\\r\\n            IERC20(fromToken).universalApproveMax(approveTarget, fromTokenAmount);\\r\\n        }\\r\\n\\r\\n        require(isWhiteListed[swapTarget], \\\"WorldesDvmProxy: Not Whitelist Contract\\\");\\r\\n        (bool success, ) = swapTarget.call{value: fromToken == _ETH_ADDRESS_ ? msg.value : 0}(callDataConcat);\\r\\n\\r\\n        require(success, \\\"WorldesDvmProxy: External Swap execution Failed\\\");\\r\\n\\r\\n        IERC20(toToken).universalTransfer(\\r\\n            msg.sender,\\r\\n            IERC20(toToken).universalBalanceOf(address(this))\\r\\n        );\\r\\n\\r\\n        returnAmount = IERC20(toToken).universalBalanceOf(msg.sender).sub(toTokenOriginBalance);\\r\\n        require(returnAmount >= minReturnAmount, \\\"WorldesDvmProxy: Return amount is not enough\\\");\\r\\n\\r\\n        emit OrderHistory(\\r\\n            fromToken,\\r\\n            toToken,\\r\\n            msg.sender,\\r\\n            fromTokenAmount,\\r\\n            returnAmount\\r\\n        );\\r\\n    }\\r\\n    \\r\\n\\r\\n    function _deposit(\\r\\n        address from,\\r\\n        address to,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        bool isETH\\r\\n    ) internal {\\r\\n        if (isETH) {\\r\\n            if (amount > 0) {\\r\\n                require(msg.value == amount, \\\"ETH_VALUE_WRONG\\\");\\r\\n                IWETH(_WETH_).deposit{value: amount}();\\r\\n                if (to != address(this)) SafeERC20.safeTransfer(IERC20(_WETH_), to, amount);\\r\\n            }\\r\\n        } else {\\r\\n            IWorldesApproveProxy(_WORLDES_APPROVE_PROXY_).claimTokens(token, from, to, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _withdraw(\\r\\n        address payable to,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        bool isETH\\r\\n    ) internal {\\r\\n        if (isETH) {\\r\\n            if (amount > 0) {\\r\\n                IWETH(_WETH_).withdraw(amount);\\r\\n                to.transfer(amount);\\r\\n            }\\r\\n        } else {\\r\\n            if (amount > 0) {\\r\\n                SafeERC20.safeTransfer(IERC20(token), to, amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb49b07b51596631d9147e2facce832a2aa61d29481f512ae04bb5835c5aa95ad\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b506040516131443803806131448339818101604052606081101561003357600080fd5b50805160208201516040909201516001600160601b0319606092831b811660c05292821b8316608052901b1660a05260805160601c60a05160601c60c05160601c61306c6100d8600039806119175280611e4d52508061098552806114a952806117755280611f7052806129b552508061077e5280610f815280610fe8528061185d52806118ad528061230d52806123c252806128c95280612951525061306c6000f3fe6080604052600436106101025760003560e01c80634b44857b116100955780636f9170f6116100645780636f9170f6146105625780638456db15146105a9578063a9d09e40146105be578063e7cd4a041461068d578063f2fde38b146106c057610109565b80634b44857b1461044c5780634e71e0c8146104cd578063674d9422146104e257806369e4e4171461054d57610109565b8063281e4605116100d1578063281e4605146101b7578063302c2064146102a157806338f4c1881461035c5780634b23cca21461043757610109565b80630d0092971461010b5780630d4eec8f1461013e57806316048bc41461016f5780632042e5c21461018457610109565b3661010957005b005b34801561011757600080fd5b506101096004803603602081101561012e57600080fd5b50356001600160a01b03166106f3565b34801561014a57600080fd5b5061015361077c565b604080516001600160a01b039092168252519081900360200190f35b34801561017b57600080fd5b506101536107a0565b34801561019057600080fd5b50610109600480360360208110156101a757600080fd5b50356001600160a01b03166107b4565b3480156101c357600080fd5b5061028f600480360360e08110156101da57600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b81111561021957600080fd5b82018360208201111561022b57600080fd5b803590602001918460208302840111600160201b8311171561024c57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505082359350505060200135610825565b60408051918252519081900360200190f35b61028f600480360360a08110156102b757600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156102e657600080fd5b8201836020820111156102f857600080fd5b803590602001918460208302840111600160201b8311171561031957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505082359350505060200135610e13565b61028f600480360361010081101561037357600080fd5b6001600160a01b038235811692602081013582169260408201358316926060830135169160808101359160a0820135919081019060e0810160c0820135600160201b8111156103c157600080fd5b8201836020820111156103d357600080fd5b803590602001918460018302840111600160201b831117156103f457600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050913592506113ae915050565b34801561044357600080fd5b50610153611773565b6104aa600480360361012081101561046357600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060808101359060a08101359060c08101359060e08101351515906101000135611797565b604080516001600160a01b03909316835260208301919091528051918290030190f35b3480156104d957600080fd5b50610109611a81565b61052f600480360360e08110156104f857600080fd5b506001600160a01b038135169060208101359060408101359060608101359060808101359060ff60a0820135169060c00135611b45565b60408051938452602084019290925282820152519081900360600190f35b34801561055957600080fd5b50610153611e4b565b34801561056e57600080fd5b506105956004803603602081101561058557600080fd5b50356001600160a01b0316611e6f565b604080519115158252519081900360200190f35b3480156105b557600080fd5b50610153611e84565b3480156105ca57600080fd5b5061028f600480360360c08110156105e157600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b81111561061757600080fd5b82018360208201111561062957600080fd5b803590602001918460208302840111600160201b8311171561064a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505082359350505060200135611e93565b34801561069957600080fd5b50610109600480360360208110156106b057600080fd5b50356001600160a01b03166124ce565b3480156106cc57600080fd5b50610109600480360360208110156106e357600080fd5b50356001600160a01b0316612542565b600154600160a01b900460ff1615610741576040805162461bcd60e51b815260206004820152600c60248201526b17d25392551250531256915160a21b604482015290519081900360640190fd5b6001805460ff60a01b1916600160a01b179055600080546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005461010090046001600160a01b031681565b60005461010090046001600160a01b03163314610804576040805162461bcd60e51b81526020600482015260096024820152682727aa2fa7aba722a960b91b604482015290519081900360640190fd5b6001600160a01b03166000908152600260205260409020805460ff19169055565b6000814281101561086b576040805162461bcd60e51b81526020600482015260186024820152600080516020612fb7833981519152604482015290519081900360640190fd5b60008551116108c1576040805162461bcd60e51b815260206004820152601c60248201527f576f726c64657344766d50726f78793a2050414952535f454d50545900000000604482015290519081900360640190fd5b600086116109005760405162461bcd60e51b8152600401808060200182810382526023815260200180612f676023913960400191505060405180910390fd5b604080516370a0823160e01b815233600482015290516000916001600160a01b038b16916370a0823191602480820192602092909190829003018186803b15801561094a57600080fd5b505afa15801561095e573d6000803e3d6000fd5b505050506040513d602081101561097457600080fd5b505186519091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630a5ea466908c9033908a906000906109bb57fe5b60200260200101518c6040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b03168152602001828152602001945050505050600060405180830381600087803b158015610a4557600080fd5b505af1158015610a59573d6000803e3d6000fd5b506000925050505b8651811015610cfb576001875103811415610bb85760018616610b1b57868181518110610a8a57fe5b60200260200101516001600160a01b031663bd6015b4336040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b158015610ae957600080fd5b505af1158015610afd573d6000803e3d6000fd5b505050506040513d6020811015610b1357600080fd5b50610bb39050565b868181518110610b2757fe5b60200260200101516001600160a01b031663dd93f59a336040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b158015610b8657600080fd5b505af1158015610b9a573d6000803e3d6000fd5b505050506040513d6020811015610bb057600080fd5b50505b610cef565b60018616610c4157868181518110610bcc57fe5b60200260200101516001600160a01b031663bd6015b4888360010181518110610bf157fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b158015610b8657600080fd5b868181518110610c4d57fe5b60200260200101516001600160a01b031663dd93f59a888360010181518110610c7257fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b158015610cc257600080fd5b505af1158015610cd6573d6000803e3d6000fd5b505050506040513d6020811015610cec57600080fd5b50505b600195861c9501610a61565b50604080516370a0823160e01b81523360048201529051610d809183916001600160a01b038d16916370a08231916024808301926020929190829003018186803b158015610d4857600080fd5b505afa158015610d5c573d6000803e3d6000fd5b505050506040513d6020811015610d7257600080fd5b50519063ffffffff6125f216565b925086831015610dc15760405162461bcd60e51b815260040180806020018281038252602c815260200180612f0c602c913960400191505060405180910390fd5b604080516001600160a01b03808d1682528b1660208201523381830152606081018a9052608081018590529051600080516020612ec58339815191529181900360a00190a15050979650505050505050565b60008142811015610e59576040805162461bcd60e51b81526020600482015260186024820152600080516020612fb7833981519152604482015290519081900360640190fd5b6000855111610eaf576040805162461bcd60e51b815260206004820152601c60248201527f576f726c64657344766d50726f78793a2050414952535f454d50545900000000604482015290519081900360640190fd5b60008611610eee5760405162461bcd60e51b8152600401808060200182810382526023815260200180612f676023913960400191505060405180910390fd5b604080516370a0823160e01b815233600482015290516000916001600160a01b038a16916370a0823191602480820192602092909190829003018186803b158015610f3857600080fd5b505afa158015610f4c573d6000803e3d6000fd5b505050506040513d6020811015610f6257600080fd5b505160408051630d0e30db60e41b815290519192506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163d0e30db0913491600480830192600092919082900301818588803b158015610fca57600080fd5b505af1158015610fde573d6000803e3d6000fd5b50505050506110227f00000000000000000000000000000000000000000000000000000000000000008760008151811061101457fe5b602002602001015134612640565b60005b86518110156112bf57600187510381141561117c57600186166110df5786818151811061104e57fe5b60200260200101516001600160a01b031663bd6015b4336040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b1580156110ad57600080fd5b505af11580156110c1573d6000803e3d6000fd5b505050506040513d60208110156110d757600080fd5b506111779050565b8681815181106110eb57fe5b60200260200101516001600160a01b031663dd93f59a336040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b15801561114a57600080fd5b505af115801561115e573d6000803e3d6000fd5b505050506040513d602081101561117457600080fd5b50505b6112b3565b600186166112055786818151811061119057fe5b60200260200101516001600160a01b031663bd6015b48883600101815181106111b557fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b15801561114a57600080fd5b86818151811061121157fe5b60200260200101516001600160a01b031663dd93f59a88836001018151811061123657fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b15801561128657600080fd5b505af115801561129a573d6000803e3d6000fd5b505050506040513d60208110156112b057600080fd5b50505b600195861c9501611025565b50604080516370a0823160e01b8152336004820152905161130c9183916001600160a01b038c16916370a08231916024808301926020929190829003018186803b158015610d4857600080fd5b92508683101561134d5760405162461bcd60e51b815260040180806020018281038252602c815260200180612f0c602c913960400191505060405180910390fd5b6040805173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81526001600160a01b038a1660208201523381830152346060820152608081018590529051600080516020612ec58339815191529181900360a00190a1505095945050505050565b600081428110156113f4576040805162461bcd60e51b81526020600482015260186024820152600080516020612fb7833981519152604482015290519081900360640190fd5b600085116114335760405162461bcd60e51b8152600401808060200182810382526023815260200180612f676023913960400191505060405180910390fd5b600061144e6001600160a01b038b163363ffffffff61269716565b90506001600160a01b038b1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611520576040805163052f523360e11b81526001600160a01b038d81166004830152336024830152306044830152606482018a905291517f000000000000000000000000000000000000000000000000000000000000000090921691630a5ea4669160848082019260009290919082900301818387803b1580156114f357600080fd5b505af1158015611507573d6000803e3d6000fd5b50611520925050506001600160a01b038c168a89612741565b6001600160a01b03881660009081526002602052604090205460ff166115775760405162461bcd60e51b8152600401808060200182810382526027815260200180612ee56027913960400191505060405180910390fd5b60006001600160a01b03808a16908d1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146115a85760006115aa565b345b876040518082805190602001908083835b602083106115da5780518252601f1990920191602091820191016115bb565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461163c576040519150601f19603f3d011682016040523d82523d6000602084013e611641565b606091505b50509050806116815760405162461bcd60e51b815260040180806020018281038252602f815260200180612f38602f913960400191505060405180910390fd5b6116b53361169e6001600160a01b038e163063ffffffff61269716565b6001600160a01b038e16919063ffffffff61280b16565b6116de826116d26001600160a01b038e163363ffffffff61269716565b9063ffffffff6125f216565b93508684101561171f5760405162461bcd60e51b815260040180806020018281038252602c815260200180612f0c602c913960400191505060405180910390fd5b604080516001600160a01b03808f1682528d1660208201523381830152606081018a9052608081018690529051600080516020612ec58339815191529181900360a00190a150505098975050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054819060ff16156117de576040805162461bcd60e51b815260206004820152600960248201526814915153951490539560ba1b604482015290519081900360640190fd5b6000805460ff19166001179055824281101561182f576040805162461bcd60e51b81526020600482015260186024820152600080516020612fb7833981519152604482015290519081900360640190fd5b60006001600160a01b038d1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461185b578c61187d565b7f00000000000000000000000000000000000000000000000000000000000000005b905060006001600160a01b038d1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146118ab578c6118cd565b7f00000000000000000000000000000000000000000000000000000000000000005b60408051630ee3d9ef60e41b81526001600160a01b0385811660048301528381166024830152604482018e9052606482018d9052608482018c90528a151560a483015291519293507f00000000000000000000000000000000000000000000000000000000000000009091169163ee3d9ef09160c4808201926020929091908290030181600087803b15801561196257600080fd5b505af1158015611976573d6000803e3d6000fd5b505050506040513d602081101561198c57600080fd5b505194508d91508c90506119c23386848f6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14612875565b6119ee3386838e6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14612875565b505060408051634c85b42560e01b815233600482015290516001600160a01b03851691634c85b4259160248083019260609291908290030181600087803b158015611a3857600080fd5b505af1158015611a4c573d6000803e3d6000fd5b505050506040513d6060811015611a6257600080fd5b50516000805460ff19169055929c929b50919950505050505050505050565b6001546001600160a01b03163314611ad0576040805162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f434c41494d60981b604482015290519081900360640190fd5b600154600080546040516001600160a01b0393841693610100909204909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36001805460008054610100600160a81b0319166101006001600160a01b038416021790556001600160a01b0319169055565b600080548190819060ff1615611b8e576040805162461bcd60e51b815260206004820152600960248201526814915153951490539560ba1b604482015290519081900360640190fd5b6000805460ff191660011790558342811015611bdf576040805162461bcd60e51b81526020600482015260186024820152600080516020612fb7833981519152604482015290519081900360640190fd5b8a611beb818c8c612a1f565b9094509250888410801590611c005750878310155b611c3b5760405162461bcd60e51b815260040180806020018281038252602d815260200180612f8a602d913960400191505060405180910390fd5b611cb23382836001600160a01b0316634a248d2a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c7957600080fd5b505afa158015611c8d573d6000803e3d6000fd5b505050506040513d6020811015611ca357600080fd5b505187600160ff8d1614612875565b611d293382836001600160a01b031663d4b970466040518163ffffffff1660e01b815260040160206040518083038186803b158015611cf057600080fd5b505afa158015611d04573d6000803e3d6000fd5b505050506040513d6020811015611d1a57600080fd5b505186600260ff8d1614612875565b60408051634c85b42560e01b815233600482015290516001600160a01b03831691634c85b4259160248083019260609291908290030181600087803b158015611d7157600080fd5b505af1158015611d85573d6000803e3d6000fd5b505050506040513d6060811015611d9b57600080fd5b50519450600160ff8816148015611db157508334115b15611de75760405133903486900380156108fc02916000818181858888f19350505050158015611de5573d6000803e3d6000fd5b505b8660ff166002148015611df957508234115b15611e2f5760405133903485900380156108fc02916000818181858888f19350505050158015611e2d573d6000803e3d6000fd5b505b50506000805460ff191690559199909850909650945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60026020526000908152604090205460ff1681565b6001546001600160a01b031681565b60008142811015611ed9576040805162461bcd60e51b81526020600482015260186024820152600080516020612fb7833981519152604482015290519081900360640190fd5b6000855111611f2f576040805162461bcd60e51b815260206004820152601c60248201527f576f726c64657344766d50726f78793a2050414952535f454d50545900000000604482015290519081900360640190fd5b60008611611f6e5760405162461bcd60e51b8152600401808060200182810382526023815260200180612f676023913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a5ea466893388600081518110611fac57fe5b60200260200101518b6040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b03168152602001828152602001945050505050600060405180830381600087803b15801561203657600080fd5b505af115801561204a573d6000803e3d6000fd5b506000925050505b85518110156122ec5760018651038114156121a9576001851661210c5785818151811061207b57fe5b60200260200101516001600160a01b031663bd6015b4306040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b1580156120da57600080fd5b505af11580156120ee573d6000803e3d6000fd5b505050506040513d602081101561210457600080fd5b506121a49050565b85818151811061211857fe5b60200260200101516001600160a01b031663dd93f59a306040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b15801561217757600080fd5b505af115801561218b573d6000803e3d6000fd5b505050506040513d60208110156121a157600080fd5b50505b6122e0565b60018516612232578581815181106121bd57fe5b60200260200101516001600160a01b031663bd6015b48783600101815181106121e257fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b15801561217757600080fd5b85818151811061223e57fe5b60200260200101516001600160a01b031663dd93f59a87836001018151811061226357fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b1580156122b357600080fd5b505af11580156122c7573d6000803e3d6000fd5b505050506040513d60208110156122dd57600080fd5b50505b600194851c9401612052565b50604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b15801561235357600080fd5b505afa158015612367573d6000803e3d6000fd5b505050506040513d602081101561237d57600080fd5b50519150858210156123c05760405162461bcd60e51b815260040180806020018281038252602c815260200180612f0c602c913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561242657600080fd5b505af115801561243a573d6000803e3d6000fd5b505060405133925084156108fc02915084906000818181858888f1935050505015801561246b573d6000803e3d6000fd5b50604080516001600160a01b038a16815273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6020820152338183015260608101899052608081018490529051600080516020612ec58339815191529181900360a00190a1509695505050505050565b60005461010090046001600160a01b0316331461251e576040805162461bcd60e51b81526020600482015260096024820152682727aa2fa7aba722a960b91b604482015290519081900360640190fd5b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b60005461010090046001600160a01b03163314612592576040805162461bcd60e51b81526020600482015260096024820152682727aa2fa7aba722a960b91b604482015290519081900360640190fd5b600080546040516001600160a01b038085169361010090930416917fdcf55418cee3220104fef63f979ff3c4097ad240c0c43dcb33ce837748983e6291a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b600082821115612635576040805162461bcd60e51b815260206004820152600960248201526829aaa12fa2a92927a960b91b604482015290519081900360640190fd5b508082035b92915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612692908490612b31565b505050565b60006126a283612c86565b156126b857506001600160a01b0381163161263a565b826001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561270e57600080fd5b505afa158015612722573d6000803e3d6000fd5b505050506040513d602081101561273857600080fd5b5051905061263a565b60408051636eb1769f60e11b81523060048201526001600160a01b038481166024830152915160009286169163dd62ed3e916044808301926020929190829003018186803b15801561279257600080fd5b505afa1580156127a6573d6000803e3d6000fd5b505050506040513d60208110156127bc57600080fd5b50519050818110156128055780156127e9576127e96001600160a01b03851684600063ffffffff612cab16565b6128056001600160a01b0385168460001963ffffffff612cab16565b50505050565b80156126925761281a83612c86565b1561285b576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015612855573d6000803e3d6000fd5b50612692565b6126926001600160a01b038416838363ffffffff61264016565b801561297c578115612977578134146128c7576040805162461bcd60e51b815260206004820152600f60248201526e4554485f56414c55455f57524f4e4760881b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561292257600080fd5b505af1158015612936573d6000803e3d6000fd5b505050506001600160a01b03851630149050612977576129777f00000000000000000000000000000000000000000000000000000000000000008584612640565b612a18565b6040805163052f523360e11b81526001600160a01b038581166004830152878116602483015286811660448301526064820185905291517f000000000000000000000000000000000000000000000000000000000000000090921691630a5ea4669160848082019260009290919082900301818387803b1580156129ff57600080fd5b505af1158015612a13573d6000803e3d6000fd5b505050505b5050505050565b600080600080866001600160a01b03166336223ce96040518163ffffffff1660e01b8152600401604080518083038186803b158015612a5d57600080fd5b505afa158015612a71573d6000803e3d6000fd5b505050506040513d6040811015612a8757600080fd5b508051602090910151909250905080158015612aa1575081155b15612aad578593508492505b80158015612abb5750600082115b15612ac857859350600092505b600081118015612ad85750600082115b15612b27576000612ae98784612dbe565b90506000612af78784612dbe565b9050808211612b1457879550612b0d8383612def565b9450612b24565b869450612b218482612def565b95505b50505b5050935093915050565b60006060836001600160a01b0316836040518082805190602001908083835b60208310612b6f5780518252601f199092019160209182019101612b50565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612bd1576040519150601f19603f3d011682016040523d82523d6000602084013e612bd6565b606091505b509150915081612c2d576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b80511561280557808060200190516020811015612c4957600080fd5b50516128055760405162461bcd60e51b815260040180806020018281038252602a815260200180612fd7602a913960400191505060405180910390fd5b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14919050565b801580612d31575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015612d0357600080fd5b505afa158015612d17573d6000803e3d6000fd5b505050506040513d6020811015612d2d57600080fd5b5051155b612d6c5760405162461bcd60e51b81526004018080602001828103825260368152602001806130016036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052612692908490612b31565b6000612de882612ddc85670de0b6b3a764000063ffffffff612e1916565b9063ffffffff612e7416565b9392505050565b6000670de0b6b3a7640000612e0a848463ffffffff612e1916565b81612e1157fe5b049392505050565b600082612e285750600061263a565b82820282848281612e3557fe5b0414612de8576040805162461bcd60e51b815260206004820152600960248201526826aaa62fa2a92927a960b91b604482015290519081900360640190fd5b6000808211612ebb576040805162461bcd60e51b815260206004820152600e60248201526d2224ab24a224a723afa2a92927a960911b604482015290519081900360640190fd5b818381612e1157fefe92ceb067a9883c85aba061e46b9edf505a0d6e81927c4b966ebed543a5221787576f726c64657344766d50726f78793a204e6f742057686974656c69737420436f6e7472616374576f726c64657344766d50726f78793a2052657475726e20616d6f756e74206973206e6f7420656e6f756768576f726c64657344766d50726f78793a2045787465726e616c205377617020657865637574696f6e204661696c6564576f726c64657344766d50726f78793a2052455455524e5f414d4f554e545f5a45524f576f726c64657344766d50726f78793a206465706f73697420616d6f756e74206973206e6f7420656e6f756768576f726c64657344766d50726f78793a204558504952454400000000000000005361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220a48d6929f7c100343bb07855054b6777b392ee1be15b0a26fddfeca9ed523df864736f6c63430006090033",
  "deployedBytecode": "0x6080604052600436106101025760003560e01c80634b44857b116100955780636f9170f6116100645780636f9170f6146105625780638456db15146105a9578063a9d09e40146105be578063e7cd4a041461068d578063f2fde38b146106c057610109565b80634b44857b1461044c5780634e71e0c8146104cd578063674d9422146104e257806369e4e4171461054d57610109565b8063281e4605116100d1578063281e4605146101b7578063302c2064146102a157806338f4c1881461035c5780634b23cca21461043757610109565b80630d0092971461010b5780630d4eec8f1461013e57806316048bc41461016f5780632042e5c21461018457610109565b3661010957005b005b34801561011757600080fd5b506101096004803603602081101561012e57600080fd5b50356001600160a01b03166106f3565b34801561014a57600080fd5b5061015361077c565b604080516001600160a01b039092168252519081900360200190f35b34801561017b57600080fd5b506101536107a0565b34801561019057600080fd5b50610109600480360360208110156101a757600080fd5b50356001600160a01b03166107b4565b3480156101c357600080fd5b5061028f600480360360e08110156101da57600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b81111561021957600080fd5b82018360208201111561022b57600080fd5b803590602001918460208302840111600160201b8311171561024c57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505082359350505060200135610825565b60408051918252519081900360200190f35b61028f600480360360a08110156102b757600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156102e657600080fd5b8201836020820111156102f857600080fd5b803590602001918460208302840111600160201b8311171561031957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505082359350505060200135610e13565b61028f600480360361010081101561037357600080fd5b6001600160a01b038235811692602081013582169260408201358316926060830135169160808101359160a0820135919081019060e0810160c0820135600160201b8111156103c157600080fd5b8201836020820111156103d357600080fd5b803590602001918460018302840111600160201b831117156103f457600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050913592506113ae915050565b34801561044357600080fd5b50610153611773565b6104aa600480360361012081101561046357600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060808101359060a08101359060c08101359060e08101351515906101000135611797565b604080516001600160a01b03909316835260208301919091528051918290030190f35b3480156104d957600080fd5b50610109611a81565b61052f600480360360e08110156104f857600080fd5b506001600160a01b038135169060208101359060408101359060608101359060808101359060ff60a0820135169060c00135611b45565b60408051938452602084019290925282820152519081900360600190f35b34801561055957600080fd5b50610153611e4b565b34801561056e57600080fd5b506105956004803603602081101561058557600080fd5b50356001600160a01b0316611e6f565b604080519115158252519081900360200190f35b3480156105b557600080fd5b50610153611e84565b3480156105ca57600080fd5b5061028f600480360360c08110156105e157600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b81111561061757600080fd5b82018360208201111561062957600080fd5b803590602001918460208302840111600160201b8311171561064a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505082359350505060200135611e93565b34801561069957600080fd5b50610109600480360360208110156106b057600080fd5b50356001600160a01b03166124ce565b3480156106cc57600080fd5b50610109600480360360208110156106e357600080fd5b50356001600160a01b0316612542565b600154600160a01b900460ff1615610741576040805162461bcd60e51b815260206004820152600c60248201526b17d25392551250531256915160a21b604482015290519081900360640190fd5b6001805460ff60a01b1916600160a01b179055600080546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005461010090046001600160a01b031681565b60005461010090046001600160a01b03163314610804576040805162461bcd60e51b81526020600482015260096024820152682727aa2fa7aba722a960b91b604482015290519081900360640190fd5b6001600160a01b03166000908152600260205260409020805460ff19169055565b6000814281101561086b576040805162461bcd60e51b81526020600482015260186024820152600080516020612fb7833981519152604482015290519081900360640190fd5b60008551116108c1576040805162461bcd60e51b815260206004820152601c60248201527f576f726c64657344766d50726f78793a2050414952535f454d50545900000000604482015290519081900360640190fd5b600086116109005760405162461bcd60e51b8152600401808060200182810382526023815260200180612f676023913960400191505060405180910390fd5b604080516370a0823160e01b815233600482015290516000916001600160a01b038b16916370a0823191602480820192602092909190829003018186803b15801561094a57600080fd5b505afa15801561095e573d6000803e3d6000fd5b505050506040513d602081101561097457600080fd5b505186519091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630a5ea466908c9033908a906000906109bb57fe5b60200260200101518c6040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b03168152602001828152602001945050505050600060405180830381600087803b158015610a4557600080fd5b505af1158015610a59573d6000803e3d6000fd5b506000925050505b8651811015610cfb576001875103811415610bb85760018616610b1b57868181518110610a8a57fe5b60200260200101516001600160a01b031663bd6015b4336040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b158015610ae957600080fd5b505af1158015610afd573d6000803e3d6000fd5b505050506040513d6020811015610b1357600080fd5b50610bb39050565b868181518110610b2757fe5b60200260200101516001600160a01b031663dd93f59a336040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b158015610b8657600080fd5b505af1158015610b9a573d6000803e3d6000fd5b505050506040513d6020811015610bb057600080fd5b50505b610cef565b60018616610c4157868181518110610bcc57fe5b60200260200101516001600160a01b031663bd6015b4888360010181518110610bf157fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b158015610b8657600080fd5b868181518110610c4d57fe5b60200260200101516001600160a01b031663dd93f59a888360010181518110610c7257fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b158015610cc257600080fd5b505af1158015610cd6573d6000803e3d6000fd5b505050506040513d6020811015610cec57600080fd5b50505b600195861c9501610a61565b50604080516370a0823160e01b81523360048201529051610d809183916001600160a01b038d16916370a08231916024808301926020929190829003018186803b158015610d4857600080fd5b505afa158015610d5c573d6000803e3d6000fd5b505050506040513d6020811015610d7257600080fd5b50519063ffffffff6125f216565b925086831015610dc15760405162461bcd60e51b815260040180806020018281038252602c815260200180612f0c602c913960400191505060405180910390fd5b604080516001600160a01b03808d1682528b1660208201523381830152606081018a9052608081018590529051600080516020612ec58339815191529181900360a00190a15050979650505050505050565b60008142811015610e59576040805162461bcd60e51b81526020600482015260186024820152600080516020612fb7833981519152604482015290519081900360640190fd5b6000855111610eaf576040805162461bcd60e51b815260206004820152601c60248201527f576f726c64657344766d50726f78793a2050414952535f454d50545900000000604482015290519081900360640190fd5b60008611610eee5760405162461bcd60e51b8152600401808060200182810382526023815260200180612f676023913960400191505060405180910390fd5b604080516370a0823160e01b815233600482015290516000916001600160a01b038a16916370a0823191602480820192602092909190829003018186803b158015610f3857600080fd5b505afa158015610f4c573d6000803e3d6000fd5b505050506040513d6020811015610f6257600080fd5b505160408051630d0e30db60e41b815290519192506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163d0e30db0913491600480830192600092919082900301818588803b158015610fca57600080fd5b505af1158015610fde573d6000803e3d6000fd5b50505050506110227f00000000000000000000000000000000000000000000000000000000000000008760008151811061101457fe5b602002602001015134612640565b60005b86518110156112bf57600187510381141561117c57600186166110df5786818151811061104e57fe5b60200260200101516001600160a01b031663bd6015b4336040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b1580156110ad57600080fd5b505af11580156110c1573d6000803e3d6000fd5b505050506040513d60208110156110d757600080fd5b506111779050565b8681815181106110eb57fe5b60200260200101516001600160a01b031663dd93f59a336040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b15801561114a57600080fd5b505af115801561115e573d6000803e3d6000fd5b505050506040513d602081101561117457600080fd5b50505b6112b3565b600186166112055786818151811061119057fe5b60200260200101516001600160a01b031663bd6015b48883600101815181106111b557fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b15801561114a57600080fd5b86818151811061121157fe5b60200260200101516001600160a01b031663dd93f59a88836001018151811061123657fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b15801561128657600080fd5b505af115801561129a573d6000803e3d6000fd5b505050506040513d60208110156112b057600080fd5b50505b600195861c9501611025565b50604080516370a0823160e01b8152336004820152905161130c9183916001600160a01b038c16916370a08231916024808301926020929190829003018186803b158015610d4857600080fd5b92508683101561134d5760405162461bcd60e51b815260040180806020018281038252602c815260200180612f0c602c913960400191505060405180910390fd5b6040805173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81526001600160a01b038a1660208201523381830152346060820152608081018590529051600080516020612ec58339815191529181900360a00190a1505095945050505050565b600081428110156113f4576040805162461bcd60e51b81526020600482015260186024820152600080516020612fb7833981519152604482015290519081900360640190fd5b600085116114335760405162461bcd60e51b8152600401808060200182810382526023815260200180612f676023913960400191505060405180910390fd5b600061144e6001600160a01b038b163363ffffffff61269716565b90506001600160a01b038b1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611520576040805163052f523360e11b81526001600160a01b038d81166004830152336024830152306044830152606482018a905291517f000000000000000000000000000000000000000000000000000000000000000090921691630a5ea4669160848082019260009290919082900301818387803b1580156114f357600080fd5b505af1158015611507573d6000803e3d6000fd5b50611520925050506001600160a01b038c168a89612741565b6001600160a01b03881660009081526002602052604090205460ff166115775760405162461bcd60e51b8152600401808060200182810382526027815260200180612ee56027913960400191505060405180910390fd5b60006001600160a01b03808a16908d1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146115a85760006115aa565b345b876040518082805190602001908083835b602083106115da5780518252601f1990920191602091820191016115bb565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461163c576040519150601f19603f3d011682016040523d82523d6000602084013e611641565b606091505b50509050806116815760405162461bcd60e51b815260040180806020018281038252602f815260200180612f38602f913960400191505060405180910390fd5b6116b53361169e6001600160a01b038e163063ffffffff61269716565b6001600160a01b038e16919063ffffffff61280b16565b6116de826116d26001600160a01b038e163363ffffffff61269716565b9063ffffffff6125f216565b93508684101561171f5760405162461bcd60e51b815260040180806020018281038252602c815260200180612f0c602c913960400191505060405180910390fd5b604080516001600160a01b03808f1682528d1660208201523381830152606081018a9052608081018690529051600080516020612ec58339815191529181900360a00190a150505098975050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054819060ff16156117de576040805162461bcd60e51b815260206004820152600960248201526814915153951490539560ba1b604482015290519081900360640190fd5b6000805460ff19166001179055824281101561182f576040805162461bcd60e51b81526020600482015260186024820152600080516020612fb7833981519152604482015290519081900360640190fd5b60006001600160a01b038d1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461185b578c61187d565b7f00000000000000000000000000000000000000000000000000000000000000005b905060006001600160a01b038d1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146118ab578c6118cd565b7f00000000000000000000000000000000000000000000000000000000000000005b60408051630ee3d9ef60e41b81526001600160a01b0385811660048301528381166024830152604482018e9052606482018d9052608482018c90528a151560a483015291519293507f00000000000000000000000000000000000000000000000000000000000000009091169163ee3d9ef09160c4808201926020929091908290030181600087803b15801561196257600080fd5b505af1158015611976573d6000803e3d6000fd5b505050506040513d602081101561198c57600080fd5b505194508d91508c90506119c23386848f6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14612875565b6119ee3386838e6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14612875565b505060408051634c85b42560e01b815233600482015290516001600160a01b03851691634c85b4259160248083019260609291908290030181600087803b158015611a3857600080fd5b505af1158015611a4c573d6000803e3d6000fd5b505050506040513d6060811015611a6257600080fd5b50516000805460ff19169055929c929b50919950505050505050505050565b6001546001600160a01b03163314611ad0576040805162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f434c41494d60981b604482015290519081900360640190fd5b600154600080546040516001600160a01b0393841693610100909204909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36001805460008054610100600160a81b0319166101006001600160a01b038416021790556001600160a01b0319169055565b600080548190819060ff1615611b8e576040805162461bcd60e51b815260206004820152600960248201526814915153951490539560ba1b604482015290519081900360640190fd5b6000805460ff191660011790558342811015611bdf576040805162461bcd60e51b81526020600482015260186024820152600080516020612fb7833981519152604482015290519081900360640190fd5b8a611beb818c8c612a1f565b9094509250888410801590611c005750878310155b611c3b5760405162461bcd60e51b815260040180806020018281038252602d815260200180612f8a602d913960400191505060405180910390fd5b611cb23382836001600160a01b0316634a248d2a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c7957600080fd5b505afa158015611c8d573d6000803e3d6000fd5b505050506040513d6020811015611ca357600080fd5b505187600160ff8d1614612875565b611d293382836001600160a01b031663d4b970466040518163ffffffff1660e01b815260040160206040518083038186803b158015611cf057600080fd5b505afa158015611d04573d6000803e3d6000fd5b505050506040513d6020811015611d1a57600080fd5b505186600260ff8d1614612875565b60408051634c85b42560e01b815233600482015290516001600160a01b03831691634c85b4259160248083019260609291908290030181600087803b158015611d7157600080fd5b505af1158015611d85573d6000803e3d6000fd5b505050506040513d6060811015611d9b57600080fd5b50519450600160ff8816148015611db157508334115b15611de75760405133903486900380156108fc02916000818181858888f19350505050158015611de5573d6000803e3d6000fd5b505b8660ff166002148015611df957508234115b15611e2f5760405133903485900380156108fc02916000818181858888f19350505050158015611e2d573d6000803e3d6000fd5b505b50506000805460ff191690559199909850909650945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60026020526000908152604090205460ff1681565b6001546001600160a01b031681565b60008142811015611ed9576040805162461bcd60e51b81526020600482015260186024820152600080516020612fb7833981519152604482015290519081900360640190fd5b6000855111611f2f576040805162461bcd60e51b815260206004820152601c60248201527f576f726c64657344766d50726f78793a2050414952535f454d50545900000000604482015290519081900360640190fd5b60008611611f6e5760405162461bcd60e51b8152600401808060200182810382526023815260200180612f676023913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a5ea466893388600081518110611fac57fe5b60200260200101518b6040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b03168152602001828152602001945050505050600060405180830381600087803b15801561203657600080fd5b505af115801561204a573d6000803e3d6000fd5b506000925050505b85518110156122ec5760018651038114156121a9576001851661210c5785818151811061207b57fe5b60200260200101516001600160a01b031663bd6015b4306040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b1580156120da57600080fd5b505af11580156120ee573d6000803e3d6000fd5b505050506040513d602081101561210457600080fd5b506121a49050565b85818151811061211857fe5b60200260200101516001600160a01b031663dd93f59a306040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b15801561217757600080fd5b505af115801561218b573d6000803e3d6000fd5b505050506040513d60208110156121a157600080fd5b50505b6122e0565b60018516612232578581815181106121bd57fe5b60200260200101516001600160a01b031663bd6015b48783600101815181106121e257fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b15801561217757600080fd5b85818151811061223e57fe5b60200260200101516001600160a01b031663dd93f59a87836001018151811061226357fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b1580156122b357600080fd5b505af11580156122c7573d6000803e3d6000fd5b505050506040513d60208110156122dd57600080fd5b50505b600194851c9401612052565b50604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b15801561235357600080fd5b505afa158015612367573d6000803e3d6000fd5b505050506040513d602081101561237d57600080fd5b50519150858210156123c05760405162461bcd60e51b815260040180806020018281038252602c815260200180612f0c602c913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561242657600080fd5b505af115801561243a573d6000803e3d6000fd5b505060405133925084156108fc02915084906000818181858888f1935050505015801561246b573d6000803e3d6000fd5b50604080516001600160a01b038a16815273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6020820152338183015260608101899052608081018490529051600080516020612ec58339815191529181900360a00190a1509695505050505050565b60005461010090046001600160a01b0316331461251e576040805162461bcd60e51b81526020600482015260096024820152682727aa2fa7aba722a960b91b604482015290519081900360640190fd5b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b60005461010090046001600160a01b03163314612592576040805162461bcd60e51b81526020600482015260096024820152682727aa2fa7aba722a960b91b604482015290519081900360640190fd5b600080546040516001600160a01b038085169361010090930416917fdcf55418cee3220104fef63f979ff3c4097ad240c0c43dcb33ce837748983e6291a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b600082821115612635576040805162461bcd60e51b815260206004820152600960248201526829aaa12fa2a92927a960b91b604482015290519081900360640190fd5b508082035b92915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612692908490612b31565b505050565b60006126a283612c86565b156126b857506001600160a01b0381163161263a565b826001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561270e57600080fd5b505afa158015612722573d6000803e3d6000fd5b505050506040513d602081101561273857600080fd5b5051905061263a565b60408051636eb1769f60e11b81523060048201526001600160a01b038481166024830152915160009286169163dd62ed3e916044808301926020929190829003018186803b15801561279257600080fd5b505afa1580156127a6573d6000803e3d6000fd5b505050506040513d60208110156127bc57600080fd5b50519050818110156128055780156127e9576127e96001600160a01b03851684600063ffffffff612cab16565b6128056001600160a01b0385168460001963ffffffff612cab16565b50505050565b80156126925761281a83612c86565b1561285b576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015612855573d6000803e3d6000fd5b50612692565b6126926001600160a01b038416838363ffffffff61264016565b801561297c578115612977578134146128c7576040805162461bcd60e51b815260206004820152600f60248201526e4554485f56414c55455f57524f4e4760881b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561292257600080fd5b505af1158015612936573d6000803e3d6000fd5b505050506001600160a01b03851630149050612977576129777f00000000000000000000000000000000000000000000000000000000000000008584612640565b612a18565b6040805163052f523360e11b81526001600160a01b038581166004830152878116602483015286811660448301526064820185905291517f000000000000000000000000000000000000000000000000000000000000000090921691630a5ea4669160848082019260009290919082900301818387803b1580156129ff57600080fd5b505af1158015612a13573d6000803e3d6000fd5b505050505b5050505050565b600080600080866001600160a01b03166336223ce96040518163ffffffff1660e01b8152600401604080518083038186803b158015612a5d57600080fd5b505afa158015612a71573d6000803e3d6000fd5b505050506040513d6040811015612a8757600080fd5b508051602090910151909250905080158015612aa1575081155b15612aad578593508492505b80158015612abb5750600082115b15612ac857859350600092505b600081118015612ad85750600082115b15612b27576000612ae98784612dbe565b90506000612af78784612dbe565b9050808211612b1457879550612b0d8383612def565b9450612b24565b869450612b218482612def565b95505b50505b5050935093915050565b60006060836001600160a01b0316836040518082805190602001908083835b60208310612b6f5780518252601f199092019160209182019101612b50565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612bd1576040519150601f19603f3d011682016040523d82523d6000602084013e612bd6565b606091505b509150915081612c2d576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b80511561280557808060200190516020811015612c4957600080fd5b50516128055760405162461bcd60e51b815260040180806020018281038252602a815260200180612fd7602a913960400191505060405180910390fd5b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14919050565b801580612d31575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015612d0357600080fd5b505afa158015612d17573d6000803e3d6000fd5b505050506040513d6020811015612d2d57600080fd5b5051155b612d6c5760405162461bcd60e51b81526004018080602001828103825260368152602001806130016036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052612692908490612b31565b6000612de882612ddc85670de0b6b3a764000063ffffffff612e1916565b9063ffffffff612e7416565b9392505050565b6000670de0b6b3a7640000612e0a848463ffffffff612e1916565b81612e1157fe5b049392505050565b600082612e285750600061263a565b82820282848281612e3557fe5b0414612de8576040805162461bcd60e51b815260206004820152600960248201526826aaa62fa2a92927a960b91b604482015290519081900360640190fd5b6000808211612ebb576040805162461bcd60e51b815260206004820152600e60248201526d2224ab24a224a723afa2a92927a960911b604482015290519081900360640190fd5b818381612e1157fefe92ceb067a9883c85aba061e46b9edf505a0d6e81927c4b966ebed543a5221787576f726c64657344766d50726f78793a204e6f742057686974656c69737420436f6e7472616374576f726c64657344766d50726f78793a2052657475726e20616d6f756e74206973206e6f7420656e6f756768576f726c64657344766d50726f78793a2045787465726e616c205377617020657865637574696f6e204661696c6564576f726c64657344766d50726f78793a2052455455524e5f414d4f554e545f5a45524f576f726c64657344766d50726f78793a206465706f73697420616d6f756e74206973206e6f7420656e6f756768576f726c64657344766d50726f78793a204558504952454400000000000000005361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220a48d6929f7c100343bb07855054b6777b392ee1be15b0a26fddfeca9ed523df864736f6c63430006090033",
  "devdoc": {
    "methods": {},
    "title": "WorldesDvmProxy"
  },
  "userdoc": {
    "methods": {},
    "notice": "Entrance of trading in Worldes platform"
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2873,
        "contract": "contracts/proxy/WorldesDvmProxy.sol:WorldesDvmProxy",
        "label": "_ENTERED_",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2160,
        "contract": "contracts/proxy/WorldesDvmProxy.sol:WorldesDvmProxy",
        "label": "_OWNER_",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2162,
        "contract": "contracts/proxy/WorldesDvmProxy.sol:WorldesDvmProxy",
        "label": "_NEW_OWNER_",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2164,
        "contract": "contracts/proxy/WorldesDvmProxy.sol:WorldesDvmProxy",
        "label": "_INITIALIZED_",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 4815,
        "contract": "contracts/proxy/WorldesDvmProxy.sol:WorldesDvmProxy",
        "label": "isWhiteListed",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}