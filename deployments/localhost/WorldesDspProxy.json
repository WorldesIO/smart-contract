{
  "address": "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dspFactory",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "worldesApproveProxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "_DSP_FACTORY_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_WETH_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_WORLDES_APPROVE_PROXY_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dspAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseMinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteMinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "flag",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "deadLine",
          "type": "uint256"
        }
      ],
      "name": "addDSPLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseAdjustedInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteAdjustedInAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "k",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isOpenTWAP",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "deadLine",
          "type": "uint256"
        }
      ],
      "name": "createStablePair",
      "outputs": [
        {
          "internalType": "address",
          "name": "newStablePair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe27898c9d94d278ae4d3b4eb7ad5520b602fbdc726bec2e3ea3847f1de702d4f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c",
    "transactionIndex": 0,
    "gasUsed": "844566",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x702db83baa82b8362c5fda32aba518b0a783a072140bd93c2f05d4e221a4e4b0",
    "transactionHash": "0xe27898c9d94d278ae4d3b4eb7ad5520b602fbdc726bec2e3ea3847f1de702d4f",
    "logs": [],
    "blockNumber": 20,
    "cumulativeGasUsed": "844566",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x68B1D87F95878fE05B998F19b66F4baba5De1aed",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x0B306BF915C4d645ff596e518fAf3F9669b97016"
  ],
  "numDeployments": 1,
  "solcInputHash": "2bc52c20de8a37fa339f3a7b69b4b897",
  "metadata": "{\"compiler\":{\"version\":\"0.6.9+commit.3e3065ac\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dspFactory\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"worldesApproveProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_DSP_FACTORY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_WETH_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_WORLDES_APPROVE_PROXY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dspAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"deadLine\",\"type\":\"uint256\"}],\"name\":\"addDSPLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAdjustedInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAdjustedInAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpenTWAP\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadLine\",\"type\":\"uint256\"}],\"name\":\"createStablePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newStablePair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{},\"title\":\"WorldesDspProxy\"},\"userdoc\":{\"methods\":{},\"notice\":\"Entrance of Worldes Stable Pair in Worldes platform\"}},\"settings\":{\"compilationTarget\":{\"contracts/proxy/WorldesDspProxy.sol\":\"WorldesDspProxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/factory/DSPFactory.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {InitializableOwnable} from \\\"../libraries/InitializableOwnable.sol\\\";\\r\\nimport {ICloneFactory} from \\\"../libraries/CloneFactory.sol\\\";\\r\\nimport {IDSP} from \\\"../stablePool/interfaces/IDSP.sol\\\";\\r\\n\\r\\ninterface IDSPFactory {\\r\\n    function createStablePool(\\r\\n        address baseToken,\\r\\n        address quoteToken,\\r\\n        uint256 lpFeeRate,\\r\\n        uint256 i,\\r\\n        uint256 k,\\r\\n        bool isOpenTWAP\\r\\n    ) external returns (address newStablePool);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title StablePool Factory\\r\\n *\\r\\n * @notice Create And Register DSP Pools\\r\\n */\\r\\ncontract DSPFactory is InitializableOwnable {\\r\\n    // ============ Templates ============\\r\\n\\r\\n    address public immutable _CLONE_FACTORY_;\\r\\n    address public immutable _DEFAULT_MT_FEE_RATE_MODEL_;\\r\\n    address public _DEFAULT_MAINTAINER_;\\r\\n    address public _DSP_TEMPLATE_;\\r\\n\\r\\n    // ============ Registry ============\\r\\n\\r\\n    // base -> quote -> DSP address list\\r\\n    mapping(address => mapping(address => address[])) public _REGISTRY_;\\r\\n    // creator -> DSP address list\\r\\n    mapping(address => address[]) public _USER_REGISTRY_;\\r\\n\\r\\n    // ============ Events ============\\r\\n\\r\\n    event NewDSP(address baseToken, address quoteToken, address creator, address DSP);\\r\\n\\r\\n    event RemoveDSP(address DSP);\\r\\n\\r\\n    // ============ Functions ============\\r\\n\\r\\n    constructor(\\r\\n        address cloneFactory,\\r\\n        address DSPTemplate,\\r\\n        address defaultMaintainer,\\r\\n        address defaultMtFeeRateModel\\r\\n    ) public {\\r\\n        _CLONE_FACTORY_ = cloneFactory;\\r\\n        _DSP_TEMPLATE_ = DSPTemplate;\\r\\n        _DEFAULT_MAINTAINER_ = defaultMaintainer;\\r\\n        _DEFAULT_MT_FEE_RATE_MODEL_ = defaultMtFeeRateModel;\\r\\n    }\\r\\n\\r\\n    function createStablePool(\\r\\n        address baseToken,\\r\\n        address quoteToken,\\r\\n        uint256 lpFeeRate,\\r\\n        uint256 i,\\r\\n        uint256 k,\\r\\n        bool isOpenTWAP\\r\\n    ) external returns (address newStablePool) {\\r\\n        newStablePool = ICloneFactory(_CLONE_FACTORY_).clone(_DSP_TEMPLATE_);\\r\\n        {\\r\\n            IDSP(newStablePool).init(\\r\\n                _DEFAULT_MAINTAINER_,\\r\\n                baseToken,\\r\\n                quoteToken,\\r\\n                lpFeeRate,\\r\\n                _DEFAULT_MT_FEE_RATE_MODEL_,\\r\\n                i,\\r\\n                k,\\r\\n                isOpenTWAP\\r\\n            );\\r\\n        }\\r\\n        _REGISTRY_[baseToken][quoteToken].push(newStablePool);\\r\\n        _USER_REGISTRY_[tx.origin].push(newStablePool);\\r\\n        emit NewDSP(baseToken, quoteToken, tx.origin, newStablePool);\\r\\n    }\\r\\n\\r\\n    // ============ Admin Operation Functions ============\\r\\n\\r\\n    function updateDSPTemplate(address _newDSPTemplate) external onlyOwner {\\r\\n        _DSP_TEMPLATE_ = _newDSPTemplate;\\r\\n    }\\r\\n\\r\\n    function updateDefaultMaintainer(address _newMaintainer) external onlyOwner {\\r\\n        _DEFAULT_MAINTAINER_ = _newMaintainer;\\r\\n    }\\r\\n\\r\\n    function addPoolByAdmin(\\r\\n        address creator,\\r\\n        address baseToken,\\r\\n        address quoteToken,\\r\\n        address pool\\r\\n    ) external onlyOwner {\\r\\n        _REGISTRY_[baseToken][quoteToken].push(pool);\\r\\n        _USER_REGISTRY_[creator].push(pool);\\r\\n        emit NewDSP(baseToken, quoteToken, creator, pool);\\r\\n    }\\r\\n\\r\\n    function removePoolByAdmin(\\r\\n        address creator,\\r\\n        address baseToken,\\r\\n        address quoteToken,\\r\\n        address pool\\r\\n    ) external onlyOwner {\\r\\n        address[] memory registryList = _REGISTRY_[baseToken][quoteToken];\\r\\n        for (uint256 i = 0; i < registryList.length; i++) {\\r\\n            if (registryList[i] == pool) {\\r\\n                registryList[i] = registryList[registryList.length - 1];\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        _REGISTRY_[baseToken][quoteToken] = registryList;\\r\\n        _REGISTRY_[baseToken][quoteToken].pop();\\r\\n        address[] memory userRegistryList = _USER_REGISTRY_[creator];\\r\\n        for (uint256 i = 0; i < userRegistryList.length; i++) {\\r\\n            if (userRegistryList[i] == pool) {\\r\\n                userRegistryList[i] = userRegistryList[userRegistryList.length - 1];\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        _USER_REGISTRY_[creator] = userRegistryList;\\r\\n        _USER_REGISTRY_[creator].pop();\\r\\n        emit RemoveDSP(pool);\\r\\n    }\\r\\n\\r\\n    // ============ View Functions ============\\r\\n\\r\\n    function getPairPool(address baseToken, address quoteToken)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory machines)\\r\\n    {\\r\\n        return _REGISTRY_[baseToken][quoteToken];\\r\\n    }\\r\\n\\r\\n    function getPairPoolBidirection(address token0, address token1)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory baseToken0Machines, address[] memory baseToken1Machines)\\r\\n    {\\r\\n        return (_REGISTRY_[token0][token1], _REGISTRY_[token1][token0]);\\r\\n    }\\r\\n\\r\\n    function getPairPoolByUser(address user) external view returns (address[] memory machines) {\\r\\n        return _USER_REGISTRY_[user];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb8ac430cc92c16be854c8d12ac6d3ce12cb560b47b3c40703ab70407d8f2f2cc\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// This is a file copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\",\"keccak256\":\"0xc3b1b297d3eb14bbe1767f9d36a68592d7a80ad01b7596e95aa542a0d1d662a2\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n\\r\\ninterface IWETH {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 wad\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256 wad) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x48db02ef30ae2752ddc482785a0691bc2a047fe904e6c3d956a82b44910d7bf2\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IWorldesApprove.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\n\\r\\ninterface IWorldesApprove {\\r\\n    function claimTokens(address token,address who,address dest,uint256 amount) external;\\r\\n    function getWorldesProxy() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x16e6dc195ddbe573eb428c0c7c41044f5289b5136590147084889e27e73a40b5\",\"license\":\"Apache-2.0\"},\"contracts/libraries/CloneFactory.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface ICloneFactory {\\r\\n    function clone(address prototype) external returns (address proxy);\\r\\n}\\r\\n\\r\\n// introduction of proxy mode design: https://docs.openzeppelin.com/upgrades/2.8/\\r\\n// minimum implementation of transparent proxy: https://eips.ethereum.org/EIPS/eip-1167\\r\\n\\r\\ncontract CloneFactory is ICloneFactory {\\r\\n    function clone(address prototype) external override returns (address proxy) {\\r\\n        bytes20 targetBytes = bytes20(prototype);\\r\\n        assembly {\\r\\n            let clone := mload(0x40)\\r\\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\r\\n            mstore(add(clone, 0x14), targetBytes)\\r\\n            mstore(\\r\\n                add(clone, 0x28),\\r\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\r\\n            )\\r\\n            proxy := create(0, clone, 0x37)\\r\\n        }\\r\\n        return proxy;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf6069191f18849ec376dbcd063eab2f4a6e6fcd888bee6da2e717e57f8dd363d\",\"license\":\"Apache-2.0\"},\"contracts/libraries/DecimalMath.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title DecimalMath\\r\\n *\\r\\n * @notice Functions for fixed point number with 18 decimals\\r\\n */\\r\\nlibrary DecimalMath {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 internal constant ONE = 10**18;\\r\\n    uint256 internal constant ONE2 = 10**36;\\r\\n\\r\\n    function mulFloor(uint256 target, uint256 d) internal pure returns (uint256) {\\r\\n        return target.mul(d) / (10**18);\\r\\n    }\\r\\n\\r\\n    function mulCeil(uint256 target, uint256 d) internal pure returns (uint256) {\\r\\n        return target.mul(d).divCeil(10**18);\\r\\n    }\\r\\n\\r\\n    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\\r\\n        return target.mul(10**18).div(d);\\r\\n    }\\r\\n\\r\\n    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\\r\\n        return target.mul(10**18).divCeil(d);\\r\\n    }\\r\\n\\r\\n    function reciprocalFloor(uint256 target) internal pure returns (uint256) {\\r\\n        return uint256(10**36).div(target);\\r\\n    }\\r\\n\\r\\n    function reciprocalCeil(uint256 target) internal pure returns (uint256) {\\r\\n        return uint256(10**36).divCeil(target);\\r\\n    }\\r\\n\\r\\n    function powFloor(uint256 target, uint256 e) internal pure returns (uint256) {\\r\\n        if (e == 0) {\\r\\n            return 10 ** 18;\\r\\n        } else if (e == 1) {\\r\\n            return target;\\r\\n        } else {\\r\\n            uint p = powFloor(target, e.div(2));\\r\\n            p = p.mul(p) / (10**18);\\r\\n            if (e % 2 == 1) {\\r\\n                p = p.mul(target) / (10**18);\\r\\n            }\\r\\n            return p;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa71c6c5af95e795862208bf00aac9a298291138b9324c720468ad4230acf7818\",\"license\":\"Apache-2.0\"},\"contracts/libraries/InitializableOwnable.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n  *\\r\\n * @notice Ownership related functions\\r\\n */\\r\\ncontract InitializableOwnable {\\r\\n    address public _OWNER_;\\r\\n    address public _NEW_OWNER_;\\r\\n    bool internal _INITIALIZED_;\\r\\n\\r\\n    // ============ Events ============\\r\\n\\r\\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    // ============ Modifiers ============\\r\\n\\r\\n    modifier notInitialized() {\\r\\n        require(!_INITIALIZED_, \\\"_INITIALIZED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == _OWNER_, \\\"NOT_OWNER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ============ Functions ============\\r\\n\\r\\n    function initOwner(address newOwner) public notInitialized {\\r\\n        _INITIALIZED_ = true;\\r\\n        _OWNER_ = newOwner;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\\r\\n        _NEW_OWNER_ = newOwner;\\r\\n    }\\r\\n\\r\\n    function claimOwnership() public {\\r\\n        require(msg.sender == _NEW_OWNER_, \\\"INVALID_CLAIM\\\");\\r\\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\\r\\n        _OWNER_ = _NEW_OWNER_;\\r\\n        _NEW_OWNER_ = address(0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfe6ac3ca14bc72355847e9a53052d5007d24155214135116feefabcc135a57e0\",\"license\":\"Apache-2.0\"},\"contracts/libraries/ReentrancyGuard.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * @title ReentrancyGuard\\r\\n  *\\r\\n * @notice Protect functions from Reentrancy Attack\\r\\n */\\r\\ncontract ReentrancyGuard {\\r\\n    // https://solidity.readthedocs.io/en/latest/control-structures.html?highlight=zero-state#scoping-and-declarations\\r\\n    // zero-state of _ENTERED_ is false\\r\\n    bool private _ENTERED_;\\r\\n\\r\\n    modifier preventReentrant() {\\r\\n        require(!_ENTERED_, \\\"REENTRANT\\\");\\r\\n        _ENTERED_ = true;\\r\\n        _;\\r\\n        _ENTERED_ = false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe447ab99ae8905d3b9fdff7f6c45ee21f39fe915e90d90dcf7cff3d6f86f7eb0\",\"license\":\"Apache-2.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n    This is a simplified version of OpenZepplin's SafeERC20 library\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\r\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves.\\r\\n\\r\\n        // A Solidity high level call has three parts:\\r\\n        //  1. The target address is checked to verify it contains contract code\\r\\n        //  2. The call itself is made, and success asserted\\r\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\r\\n        // solhint-disable-next-line max-line-length\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\r\\n\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x73bdda5b177b6f1cb93396fa135a99a99b317ec8475b6d5f13f4696b0685af9c\",\"license\":\"Apache-2.0\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n *\\r\\n * @notice Math operations with safety checks that revert on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"MUL_ERROR\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b > 0, \\\"DIVIDING_ERROR\\\");\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 quotient = div(a, b);\\r\\n        uint256 remainder = a - quotient * b;\\r\\n        if (remainder > 0) {\\r\\n            return quotient + 1;\\r\\n        } else {\\r\\n            return quotient;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= a, \\\"SUB_ERROR\\\");\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"ADD_ERROR\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\\r\\n        uint256 z = x / 2 + 1;\\r\\n        y = x;\\r\\n        while (z < y) {\\r\\n            y = z;\\r\\n            z = (x / z + z) / 2;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4e15e5debcd4097573f1e017fb458502a0122b8d543d140d8f708d4db35590c8\",\"license\":\"Apache-2.0\"},\"contracts/proxy/WorldesApproveProxy.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {IWorldesApprove} from \\\"../interfaces/IWorldesApprove.sol\\\";\\r\\nimport {InitializableOwnable} from \\\"../libraries/InitializableOwnable.sol\\\";\\r\\n\\r\\ninterface IWorldesApproveProxy {\\r\\n    function isAllowedProxy(address _proxy) external view returns (bool);\\r\\n    function claimTokens(address token,address who,address dest,uint256 amount) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title WorldesApproveProxy\\r\\n  *\\r\\n * @notice Allow different version worldesproxy to claim from WorldesApprove\\r\\n */\\r\\ncontract WorldesApproveProxy is InitializableOwnable {\\r\\n    \\r\\n    // ============ Storage ============\\r\\n    uint256 private constant _TIMELOCK_DURATION_ = 3 days;\\r\\n    mapping (address => bool) public _IS_ALLOWED_PROXY_;\\r\\n    uint256 public _TIMELOCK_;\\r\\n    address public _PENDING_ADD_WORLDES_PROXY_;\\r\\n    address public immutable _WORLDES_APPROVE_;\\r\\n\\r\\n    // ============ Modifiers ============\\r\\n    modifier notLocked() {\\r\\n        require(\\r\\n            _TIMELOCK_ <= block.timestamp,\\r\\n            \\\"SetProxy is timelocked\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address worldesApprove) public {\\r\\n        _WORLDES_APPROVE_ = worldesApprove;\\r\\n    }\\r\\n\\r\\n    function init(address owner, address[] memory proxies) external {\\r\\n        initOwner(owner);\\r\\n        for(uint i = 0; i < proxies.length; i++) \\r\\n            _IS_ALLOWED_PROXY_[proxies[i]] = true;\\r\\n    }\\r\\n\\r\\n    function unlockAddProxy(address newSwapProxy) public onlyOwner {\\r\\n        _TIMELOCK_ = block.timestamp + _TIMELOCK_DURATION_;\\r\\n        _PENDING_ADD_WORLDES_PROXY_ = newSwapProxy;\\r\\n    }\\r\\n\\r\\n    function lockAddProxy() public onlyOwner {\\r\\n       _PENDING_ADD_WORLDES_PROXY_ = address(0);\\r\\n       _TIMELOCK_ = 0;\\r\\n    }\\r\\n\\r\\n\\r\\n    function addWorldesProxy() external onlyOwner notLocked() {\\r\\n        _IS_ALLOWED_PROXY_[_PENDING_ADD_WORLDES_PROXY_] = true;\\r\\n        lockAddProxy();\\r\\n    }\\r\\n\\r\\n    function removeWorldesProxy (address oldSwapProxy) public onlyOwner {\\r\\n        _IS_ALLOWED_PROXY_[oldSwapProxy] = false;\\r\\n    }\\r\\n    \\r\\n    function claimTokens(\\r\\n        address token,\\r\\n        address who,\\r\\n        address dest,\\r\\n        uint256 amount\\r\\n    ) external {\\r\\n        require(_IS_ALLOWED_PROXY_[msg.sender], \\\"WorldesApproveProxy:Access restricted\\\");\\r\\n        IWorldesApprove(_WORLDES_APPROVE_).claimTokens(\\r\\n            token,\\r\\n            who,\\r\\n            dest,\\r\\n            amount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function isAllowedProxy(address _proxy) external view returns (bool) {\\r\\n        return _IS_ALLOWED_PROXY_[_proxy];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf29fec5cd4de23e8004eccf73d135b49252e26005e8f209101429f1889e3724e\",\"license\":\"Apache-2.0\"},\"contracts/proxy/WorldesDspProxy.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\n\\r\\nimport {IWorldesApproveProxy} from \\\"./WorldesApproveProxy.sol\\\";\\r\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\r\\nimport {IWETH} from \\\"../interfaces/IWETH.sol\\\";\\r\\nimport {SafeMath} from \\\"../libraries/SafeMath.sol\\\";\\r\\nimport {SafeERC20} from \\\"../libraries/SafeERC20.sol\\\";\\r\\nimport {DecimalMath} from \\\"../libraries/DecimalMath.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"../libraries/ReentrancyGuard.sol\\\";\\r\\nimport {IDSP} from \\\"../stablePool/interfaces/IDSP.sol\\\";\\r\\nimport {IDSPFactory} from \\\"../factory/DSPFactory.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title WorldesDspProxy\\r\\n *\\r\\n * @notice Entrance of Worldes Stable Pair in Worldes platform\\r\\n */\\r\\ncontract WorldesDspProxy is ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // ============ Storage ============\\r\\n\\r\\n    address constant _ETH_ADDRESS_ = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n    address public immutable _WETH_;\\r\\n    address public immutable _WORLDES_APPROVE_PROXY_;\\r\\n    address public immutable _DSP_FACTORY_;\\r\\n\\r\\n    // ============ Modifiers ============\\r\\n\\r\\n    modifier judgeExpired(uint256 deadLine) {\\r\\n        require(deadLine >= block.timestamp, \\\"WorldesDspProxy: EXPIRED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    fallback() external payable {}\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    constructor(\\r\\n        address dspFactory,\\r\\n        address payable weth,\\r\\n        address worldesApproveProxy\\r\\n    ) public {\\r\\n        _DSP_FACTORY_ = dspFactory;\\r\\n        _WETH_ = weth;\\r\\n        _WORLDES_APPROVE_PROXY_ = worldesApproveProxy;\\r\\n    }\\r\\n\\r\\n    // ============ DSP Functions (create & add liquidity) ============\\r\\n\\r\\n    function createStablePair(\\r\\n        address baseToken,\\r\\n        address quoteToken,\\r\\n        uint256 baseInAmount,\\r\\n        uint256 quoteInAmount,\\r\\n        uint256 lpFeeRate,\\r\\n        uint256 i,\\r\\n        uint256 k,\\r\\n        bool isOpenTWAP,\\r\\n        uint256 deadLine\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        preventReentrant\\r\\n        judgeExpired(deadLine)\\r\\n        returns (address newStablePair, uint256 shares)\\r\\n    {\\r\\n        {\\r\\n            address _baseToken = baseToken == _ETH_ADDRESS_ ? _WETH_ : baseToken;\\r\\n            address _quoteToken = quoteToken == _ETH_ADDRESS_ ? _WETH_ : quoteToken;\\r\\n            newStablePair = IDSPFactory(_DSP_FACTORY_).createStablePool(\\r\\n                _baseToken,\\r\\n                _quoteToken,\\r\\n                lpFeeRate,\\r\\n                i,\\r\\n                k,\\r\\n                isOpenTWAP\\r\\n            );\\r\\n        }\\r\\n\\r\\n        {\\r\\n            address _baseToken = baseToken;\\r\\n            address _quoteToken = quoteToken;\\r\\n            _deposit(\\r\\n                msg.sender,\\r\\n                newStablePair,\\r\\n                _baseToken,\\r\\n                baseInAmount,\\r\\n                _baseToken == _ETH_ADDRESS_\\r\\n            );\\r\\n            _deposit(\\r\\n                msg.sender,\\r\\n                newStablePair,\\r\\n                _quoteToken,\\r\\n                quoteInAmount,\\r\\n                _quoteToken == _ETH_ADDRESS_\\r\\n            );\\r\\n        }\\r\\n\\r\\n        (shares, , ) = IDSP(newStablePair).buyShares(msg.sender);\\r\\n    }\\r\\n\\r\\n    function addDSPLiquidity(\\r\\n        address dspAddress,\\r\\n        uint256 baseInAmount,\\r\\n        uint256 quoteInAmount,\\r\\n        uint256 baseMinAmount,\\r\\n        uint256 quoteMinAmount,\\r\\n        uint8 flag, // 0 - ERC20, 1 - baseInETH, 2 - quoteInETH\\r\\n        uint256 deadLine\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        preventReentrant\\r\\n        judgeExpired(deadLine)\\r\\n        returns (\\r\\n            uint256 shares,\\r\\n            uint256 baseAdjustedInAmount,\\r\\n            uint256 quoteAdjustedInAmount\\r\\n        )\\r\\n    {\\r\\n        address _dsp = dspAddress;\\r\\n        (baseAdjustedInAmount, quoteAdjustedInAmount) = _addDSPLiquidity(\\r\\n            _dsp,\\r\\n            baseInAmount,\\r\\n            quoteInAmount\\r\\n        );\\r\\n        require(\\r\\n            baseAdjustedInAmount >= baseMinAmount && quoteAdjustedInAmount >= quoteMinAmount,\\r\\n            \\\"WorldesDspProxy: deposit amount is not enough\\\"\\r\\n        );\\r\\n\\r\\n        _deposit(msg.sender, _dsp, IDSP(_dsp)._BASE_TOKEN_(), baseAdjustedInAmount, flag == 1);\\r\\n        _deposit(msg.sender, _dsp, IDSP(_dsp)._QUOTE_TOKEN_(), quoteAdjustedInAmount, flag == 2);\\r\\n        \\r\\n        (shares, , ) = IDSP(_dsp).buyShares(msg.sender);\\r\\n\\r\\n        // refund dust eth\\r\\n        if (flag == 1 && msg.value > baseAdjustedInAmount) msg.sender.transfer(msg.value - baseAdjustedInAmount);\\r\\n        if (flag == 2 && msg.value > quoteAdjustedInAmount) msg.sender.transfer(msg.value - quoteAdjustedInAmount);\\r\\n    }\\r\\n\\r\\n\\r\\n    // =================== internal functions =====================\\r\\n\\r\\n    function _addDSPLiquidity(\\r\\n        address dspAddress,\\r\\n        uint256 baseInAmount,\\r\\n        uint256 quoteInAmount\\r\\n    ) internal view returns (uint256 baseAdjustedInAmount, uint256 quoteAdjustedInAmount) {\\r\\n        (uint256 baseReserve, uint256 quoteReserve) = IDSP(dspAddress).getVaultReserve();\\r\\n        if (quoteReserve == 0 && baseReserve == 0) {\\r\\n            uint256 i = IDSP(dspAddress)._I_();\\r\\n            uint256 shares = quoteInAmount < DecimalMath.mulFloor(baseInAmount, i)\\r\\n                ? DecimalMath.divFloor(quoteInAmount, i)\\r\\n                : baseInAmount;\\r\\n            baseAdjustedInAmount = shares;\\r\\n            quoteAdjustedInAmount = DecimalMath.mulFloor(shares, i);\\r\\n        }\\r\\n        if (quoteReserve > 0 && baseReserve > 0) {\\r\\n            uint256 baseIncreaseRatio = DecimalMath.divFloor(baseInAmount, baseReserve);\\r\\n            uint256 quoteIncreaseRatio = DecimalMath.divFloor(quoteInAmount, quoteReserve);\\r\\n            if (baseIncreaseRatio <= quoteIncreaseRatio) {\\r\\n                baseAdjustedInAmount = baseInAmount;\\r\\n                quoteAdjustedInAmount = DecimalMath.mulFloor(quoteReserve, baseIncreaseRatio);\\r\\n            } else {\\r\\n                quoteAdjustedInAmount = quoteInAmount;\\r\\n                baseAdjustedInAmount = DecimalMath.mulFloor(baseReserve, quoteIncreaseRatio);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _deposit(\\r\\n        address from,\\r\\n        address to,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        bool isETH\\r\\n    ) internal {\\r\\n        if (isETH) {\\r\\n            if (amount > 0) {\\r\\n                IWETH(_WETH_).deposit{value: amount}();\\r\\n                if (to != address(this)) SafeERC20.safeTransfer(IERC20(_WETH_), to, amount);\\r\\n            }\\r\\n        } else {\\r\\n            IWorldesApproveProxy(_WORLDES_APPROVE_PROXY_).claimTokens(token, from, to, amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x21fc3728a45d75338f9f2cbece7b48fa49eca29486db3bdef71629a74c388114\",\"license\":\"Apache-2.0\"},\"contracts/stablePool/interfaces/IDSP.sol\":{\"content\":\"/*\\r\\n \\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IDSP {\\r\\n    function init(\\r\\n        address maintainer,\\r\\n        address baseTokenAddress,\\r\\n        address quoteTokenAddress,\\r\\n        uint256 lpFeeRate,\\r\\n        address mtFeeRateModel,\\r\\n        uint256 i,\\r\\n        uint256 k,\\r\\n        bool isOpenTWAP\\r\\n    ) external;\\r\\n\\r\\n    function _BASE_TOKEN_() external view returns (address);\\r\\n\\r\\n    function _QUOTE_TOKEN_() external view returns (address);\\r\\n\\r\\n    function _I_() external view returns (uint256);\\r\\n\\r\\n    function _MT_FEE_RATE_MODEL_() external view returns (address);\\r\\n\\r\\n    function getVaultReserve() external view returns (uint256 baseReserve, uint256 quoteReserve);\\r\\n\\r\\n    function sellBase(address to) external returns (uint256);\\r\\n\\r\\n    function sellQuote(address to) external returns (uint256);\\r\\n\\r\\n    function buyShares(address to) external returns (uint256,uint256,uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x331337ac0937179cdf0cb4743b6ab3a2e280dedecce41877012865595cb52304\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b50604051610f03380380610f038339818101604052606081101561003357600080fd5b50805160208201516040909201516001600160601b0319606092831b811660c05292821b8316608052901b1660a05260805160601c60a05160601c60c05160601c610e4e6100b56000398061037352806107f25250806101c4528061090e5250806101a052806102b95280610309528061082252806108aa5250610e4e6000f3fe60806040526004361061004e5760003560e01c80630d4eec8f146100575780634b23cca2146100885780635a993ded1461009d578063e24db1ac1461011e578063fc3824371461018957610055565b3661005557005b005b34801561006357600080fd5b5061006c61019e565b604080516001600160a01b039092168252519081900360200190f35b34801561009457600080fd5b5061006c6101c2565b6100fb60048036036101208110156100b457600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060808101359060a08101359060c08101359060e081013515159061010001356101e6565b604080516001600160a01b03909316835260208301919091528051918290030190f35b61016b600480360360e081101561013457600080fd5b506001600160a01b038135169060208101359060408101359060608101359060808101359060ff60a0820135169060c001356104dd565b60408051938452602084019290925282820152519081900360600190f35b34801561019557600080fd5b5061006c6107f0565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054819060ff161561022d576040805162461bcd60e51b815260206004820152600960248201526814915153951490539560ba1b604482015290519081900360640190fd5b6000805460ff19166001179055824281101561028b576040805162461bcd60e51b815260206004820152601860248201527715dbdc9b19195cd11cdc141c9bde1e4e881156141254915160421b604482015290519081900360640190fd5b60006001600160a01b038d1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146102b7578c6102d9565b7f00000000000000000000000000000000000000000000000000000000000000005b905060006001600160a01b038d1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610307578c610329565b7f00000000000000000000000000000000000000000000000000000000000000005b60408051634d29ca8360e11b81526001600160a01b0385811660048301528381166024830152604482018e9052606482018d9052608482018c90528a151560a483015291519293507f000000000000000000000000000000000000000000000000000000000000000090911691639a5395069160c4808201926020929091908290030181600087803b1580156103be57600080fd5b505af11580156103d2573d6000803e3d6000fd5b505050506040513d60208110156103e857600080fd5b505194508d91508c905061041e3386848f6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610814565b61044a3386838e6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610814565b505060408051634c85b42560e01b815233600482015290516001600160a01b03851691634c85b4259160248083019260609291908290030181600087803b15801561049457600080fd5b505af11580156104a8573d6000803e3d6000fd5b505050506040513d60608110156104be57600080fd5b50516000805460ff19169055929c929b50919950505050505050505050565b600080548190819060ff1615610526576040805162461bcd60e51b815260206004820152600960248201526814915153951490539560ba1b604482015290519081900360640190fd5b6000805460ff191660011790558342811015610584576040805162461bcd60e51b815260206004820152601860248201527715dbdc9b19195cd11cdc141c9bde1e4e881156141254915160421b604482015290519081900360640190fd5b8a610590818c8c610978565b90945092508884108015906105a55750878310155b6105e05760405162461bcd60e51b815260040180806020018281038252602d815260200180610dc2602d913960400191505060405180910390fd5b6106573382836001600160a01b0316634a248d2a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561061e57600080fd5b505afa158015610632573d6000803e3d6000fd5b505050506040513d602081101561064857600080fd5b505187600160ff8d1614610814565b6106ce3382836001600160a01b031663d4b970466040518163ffffffff1660e01b815260040160206040518083038186803b15801561069557600080fd5b505afa1580156106a9573d6000803e3d6000fd5b505050506040513d60208110156106bf57600080fd5b505186600260ff8d1614610814565b60408051634c85b42560e01b815233600482015290516001600160a01b03831691634c85b4259160248083019260609291908290030181600087803b15801561071657600080fd5b505af115801561072a573d6000803e3d6000fd5b505050506040513d606081101561074057600080fd5b50519450600160ff881614801561075657508334115b1561078c5760405133903486900380156108fc02916000818181858888f1935050505015801561078a573d6000803e3d6000fd5b505b8660ff16600214801561079e57508234115b156107d45760405133903485900380156108fc02916000818181858888f193505050501580156107d2573d6000803e3d6000fd5b505b50506000805460ff191690559199909850909650945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b80156108d55781156108d0577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561087b57600080fd5b505af115801561088f573d6000803e3d6000fd5b505050506001600160a01b038516301490506108d0576108d07f00000000000000000000000000000000000000000000000000000000000000008584610b07565b610971565b6040805163052f523360e11b81526001600160a01b038581166004830152878116602483015286811660448301526064820185905291517f000000000000000000000000000000000000000000000000000000000000000090921691630a5ea4669160848082019260009290919082900301818387803b15801561095857600080fd5b505af115801561096c573d6000803e3d6000fd5b505050505b5050505050565b600080600080866001600160a01b03166336223ce96040518163ffffffff1660e01b8152600401604080518083038186803b1580156109b657600080fd5b505afa1580156109ca573d6000803e3d6000fd5b505050506040513d60408110156109e057600080fd5b5080516020909101519092509050801580156109fa575081155b15610a9e576000876001600160a01b031663f811d6926040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3a57600080fd5b505afa158015610a4e573d6000803e3d6000fd5b505050506040513d6020811015610a6457600080fd5b505190506000610a748883610b5e565b8710610a805787610a8a565b610a8a8783610b8a565b9050809550610a998183610b5e565b945050505b600081118015610aae5750600082115b15610afd576000610abf8784610b8a565b90506000610acd8784610b8a565b9050808211610aea57879550610ae38383610b5e565b9450610afa565b869450610af78482610b5e565b95505b50505b5050935093915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610b59908490610bbb565b505050565b6000670de0b6b3a7640000610b79848463ffffffff610d1616565b81610b8057fe5b0490505b92915050565b6000610bb482610ba885670de0b6b3a764000063ffffffff610d1616565b9063ffffffff610d7116565b9392505050565b60006060836001600160a01b0316836040518082805190602001908083835b60208310610bf95780518252601f199092019160209182019101610bda565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610c5b576040519150601f19603f3d011682016040523d82523d6000602084013e610c60565b606091505b509150915081610cb7576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b805115610d1057808060200190516020811015610cd357600080fd5b5051610d105760405162461bcd60e51b815260040180806020018281038252602a815260200180610def602a913960400191505060405180910390fd5b50505050565b600082610d2557506000610b84565b82820282848281610d3257fe5b0414610bb4576040805162461bcd60e51b815260206004820152600960248201526826aaa62fa2a92927a960b91b604482015290519081900360640190fd5b6000808211610db8576040805162461bcd60e51b815260206004820152600e60248201526d2224ab24a224a723afa2a92927a960911b604482015290519081900360640190fd5b818381610b8057fefe576f726c64657344737050726f78793a206465706f73697420616d6f756e74206973206e6f7420656e6f7567685361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212202329ee8079746b9a9e2d21a2cf7b7187a4033797e5773a603c06180142d0f7f664736f6c63430006090033",
  "deployedBytecode": "0x60806040526004361061004e5760003560e01c80630d4eec8f146100575780634b23cca2146100885780635a993ded1461009d578063e24db1ac1461011e578063fc3824371461018957610055565b3661005557005b005b34801561006357600080fd5b5061006c61019e565b604080516001600160a01b039092168252519081900360200190f35b34801561009457600080fd5b5061006c6101c2565b6100fb60048036036101208110156100b457600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060808101359060a08101359060c08101359060e081013515159061010001356101e6565b604080516001600160a01b03909316835260208301919091528051918290030190f35b61016b600480360360e081101561013457600080fd5b506001600160a01b038135169060208101359060408101359060608101359060808101359060ff60a0820135169060c001356104dd565b60408051938452602084019290925282820152519081900360600190f35b34801561019557600080fd5b5061006c6107f0565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054819060ff161561022d576040805162461bcd60e51b815260206004820152600960248201526814915153951490539560ba1b604482015290519081900360640190fd5b6000805460ff19166001179055824281101561028b576040805162461bcd60e51b815260206004820152601860248201527715dbdc9b19195cd11cdc141c9bde1e4e881156141254915160421b604482015290519081900360640190fd5b60006001600160a01b038d1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146102b7578c6102d9565b7f00000000000000000000000000000000000000000000000000000000000000005b905060006001600160a01b038d1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610307578c610329565b7f00000000000000000000000000000000000000000000000000000000000000005b60408051634d29ca8360e11b81526001600160a01b0385811660048301528381166024830152604482018e9052606482018d9052608482018c90528a151560a483015291519293507f000000000000000000000000000000000000000000000000000000000000000090911691639a5395069160c4808201926020929091908290030181600087803b1580156103be57600080fd5b505af11580156103d2573d6000803e3d6000fd5b505050506040513d60208110156103e857600080fd5b505194508d91508c905061041e3386848f6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610814565b61044a3386838e6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610814565b505060408051634c85b42560e01b815233600482015290516001600160a01b03851691634c85b4259160248083019260609291908290030181600087803b15801561049457600080fd5b505af11580156104a8573d6000803e3d6000fd5b505050506040513d60608110156104be57600080fd5b50516000805460ff19169055929c929b50919950505050505050505050565b600080548190819060ff1615610526576040805162461bcd60e51b815260206004820152600960248201526814915153951490539560ba1b604482015290519081900360640190fd5b6000805460ff191660011790558342811015610584576040805162461bcd60e51b815260206004820152601860248201527715dbdc9b19195cd11cdc141c9bde1e4e881156141254915160421b604482015290519081900360640190fd5b8a610590818c8c610978565b90945092508884108015906105a55750878310155b6105e05760405162461bcd60e51b815260040180806020018281038252602d815260200180610dc2602d913960400191505060405180910390fd5b6106573382836001600160a01b0316634a248d2a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561061e57600080fd5b505afa158015610632573d6000803e3d6000fd5b505050506040513d602081101561064857600080fd5b505187600160ff8d1614610814565b6106ce3382836001600160a01b031663d4b970466040518163ffffffff1660e01b815260040160206040518083038186803b15801561069557600080fd5b505afa1580156106a9573d6000803e3d6000fd5b505050506040513d60208110156106bf57600080fd5b505186600260ff8d1614610814565b60408051634c85b42560e01b815233600482015290516001600160a01b03831691634c85b4259160248083019260609291908290030181600087803b15801561071657600080fd5b505af115801561072a573d6000803e3d6000fd5b505050506040513d606081101561074057600080fd5b50519450600160ff881614801561075657508334115b1561078c5760405133903486900380156108fc02916000818181858888f1935050505015801561078a573d6000803e3d6000fd5b505b8660ff16600214801561079e57508234115b156107d45760405133903485900380156108fc02916000818181858888f193505050501580156107d2573d6000803e3d6000fd5b505b50506000805460ff191690559199909850909650945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b80156108d55781156108d0577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561087b57600080fd5b505af115801561088f573d6000803e3d6000fd5b505050506001600160a01b038516301490506108d0576108d07f00000000000000000000000000000000000000000000000000000000000000008584610b07565b610971565b6040805163052f523360e11b81526001600160a01b038581166004830152878116602483015286811660448301526064820185905291517f000000000000000000000000000000000000000000000000000000000000000090921691630a5ea4669160848082019260009290919082900301818387803b15801561095857600080fd5b505af115801561096c573d6000803e3d6000fd5b505050505b5050505050565b600080600080866001600160a01b03166336223ce96040518163ffffffff1660e01b8152600401604080518083038186803b1580156109b657600080fd5b505afa1580156109ca573d6000803e3d6000fd5b505050506040513d60408110156109e057600080fd5b5080516020909101519092509050801580156109fa575081155b15610a9e576000876001600160a01b031663f811d6926040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3a57600080fd5b505afa158015610a4e573d6000803e3d6000fd5b505050506040513d6020811015610a6457600080fd5b505190506000610a748883610b5e565b8710610a805787610a8a565b610a8a8783610b8a565b9050809550610a998183610b5e565b945050505b600081118015610aae5750600082115b15610afd576000610abf8784610b8a565b90506000610acd8784610b8a565b9050808211610aea57879550610ae38383610b5e565b9450610afa565b869450610af78482610b5e565b95505b50505b5050935093915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610b59908490610bbb565b505050565b6000670de0b6b3a7640000610b79848463ffffffff610d1616565b81610b8057fe5b0490505b92915050565b6000610bb482610ba885670de0b6b3a764000063ffffffff610d1616565b9063ffffffff610d7116565b9392505050565b60006060836001600160a01b0316836040518082805190602001908083835b60208310610bf95780518252601f199092019160209182019101610bda565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610c5b576040519150601f19603f3d011682016040523d82523d6000602084013e610c60565b606091505b509150915081610cb7576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b805115610d1057808060200190516020811015610cd357600080fd5b5051610d105760405162461bcd60e51b815260040180806020018281038252602a815260200180610def602a913960400191505060405180910390fd5b50505050565b600082610d2557506000610b84565b82820282848281610d3257fe5b0414610bb4576040805162461bcd60e51b815260206004820152600960248201526826aaa62fa2a92927a960b91b604482015290519081900360640190fd5b6000808211610db8576040805162461bcd60e51b815260206004820152600e60248201526d2224ab24a224a723afa2a92927a960911b604482015290519081900360640190fd5b818381610b8057fefe576f726c64657344737050726f78793a206465706f73697420616d6f756e74206973206e6f7420656e6f7567685361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212202329ee8079746b9a9e2d21a2cf7b7187a4033797e5773a603c06180142d0f7f664736f6c63430006090033",
  "devdoc": {
    "methods": {},
    "title": "WorldesDspProxy"
  },
  "userdoc": {
    "methods": {},
    "notice": "Entrance of Worldes Stable Pair in Worldes platform"
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2873,
        "contract": "contracts/proxy/WorldesDspProxy.sol:WorldesDspProxy",
        "label": "_ENTERED_",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}